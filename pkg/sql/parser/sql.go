// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:549
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7948

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	413, 55,
	-2, 858,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	163, 696,
	-2, 0,
	-1, 58,
	101, 858,
	167, 858,
	361, 858,
	362, 858,
	-2, 0,
	-1, 71,
	112, 832,
	124, 832,
	175, 832,
	201, 832,
	230, 832,
	238, 832,
	358, 832,
	-2, 821,
	-1, 106,
	191, 517,
	349, 517,
	-2, 0,
	-1, 111,
	4, 860,
	20, 860,
	21, 860,
	22, 860,
	23, 860,
	25, 860,
	30, 860,
	35, 860,
	36, 860,
	37, 860,
	38, 860,
	39, 860,
	40, 860,
	41, 860,
	42, 860,
	43, 860,
	44, 860,
	46, 860,
	47, 860,
	48, 860,
	49, 860,
	50, 860,
	51, 860,
	54, 860,
	55, 860,
	56, 860,
	58, 860,
	59, 860,
	63, 860,
	64, 860,
	65, 860,
	66, 860,
	67, 860,
	69, 860,
	70, 860,
	71, 860,
	72, 860,
	74, 860,
	76, 860,
	77, 860,
	80, 860,
	81, 860,
	82, 860,
	90, 860,
	91, 860,
	92, 860,
	93, 860,
	94, 860,
	95, 860,
	96, 860,
	97, 860,
	99, 860,
	101, 860,
	103, 860,
	106, 860,
	107, 860,
	109, 860,
	113, 860,
	114, 860,
	115, 860,
	116, 860,
	117, 860,
	118, 860,
	119, 860,
	120, 860,
	121, 860,
	129, 860,
	130, 860,
	131, 860,
	132, 860,
	133, 860,
	135, 860,
	137, 860,
	141, 860,
	143, 860,
	144, 860,
	146, 860,
	148, 860,
	149, 860,
	150, 860,
	151, 860,
	152, 860,
	153, 860,
	154, 860,
	155, 860,
	158, 860,
	162, 860,
	164, 860,
	167, 860,
	168, 860,
	169, 860,
	170, 860,
	171, 860,
	172, 860,
	173, 860,
	174, 860,
	176, 860,
	178, 860,
	181, 860,
	182, 860,
	183, 860,
	185, 860,
	186, 860,
	189, 860,
	190, 860,
	191, 860,
	193, 860,
	194, 860,
	196, 860,
	198, 860,
	199, 860,
	202, 860,
	203, 860,
	206, 860,
	208, 860,
	211, 860,
	212, 860,
	213, 860,
	214, 860,
	215, 860,
	217, 860,
	218, 860,
	219, 860,
	220, 860,
	225, 860,
	226, 860,
	227, 860,
	228, 860,
	229, 860,
	231, 860,
	232, 860,
	234, 860,
	235, 860,
	236, 860,
	239, 860,
	240, 860,
	242, 860,
	244, 860,
	245, 860,
	246, 860,
	247, 860,
	248, 860,
	249, 860,
	250, 860,
	251, 860,
	253, 860,
	254, 860,
	255, 860,
	256, 860,
	257, 860,
	259, 860,
	260, 860,
	261, 860,
	262, 860,
	263, 860,
	264, 860,
	265, 860,
	266, 860,
	268, 860,
	269, 860,
	270, 860,
	271, 860,
	272, 860,
	274, 860,
	275, 860,
	276, 860,
	277, 860,
	278, 860,
	279, 860,
	280, 860,
	282, 860,
	284, 860,
	285, 860,
	286, 860,
	287, 860,
	288, 860,
	289, 860,
	291, 860,
	292, 860,
	293, 860,
	294, 860,
	295, 860,
	296, 860,
	297, 860,
	299, 860,
	300, 860,
	301, 860,
	302, 860,
	303, 860,
	304, 860,
	305, 860,
	306, 860,
	307, 860,
	309, 860,
	310, 860,
	311, 860,
	312, 860,
	314, 860,
	315, 860,
	316, 860,
	317, 860,
	319, 860,
	320, 860,
	321, 860,
	322, 860,
	323, 860,
	324, 860,
	325, 860,
	326, 860,
	327, 860,
	329, 860,
	330, 860,
	332, 860,
	333, 860,
	335, 860,
	336, 860,
	337, 860,
	338, 860,
	339, 860,
	340, 860,
	341, 860,
	342, 860,
	344, 860,
	345, 860,
	346, 860,
	349, 860,
	350, 860,
	351, 860,
	352, 860,
	354, 860,
	355, 860,
	356, 860,
	357, 860,
	360, 860,
	361, 860,
	362, 860,
	363, 860,
	365, 860,
	367, 860,
	368, 860,
	369, 860,
	370, 860,
	371, 860,
	372, 860,
	375, 860,
	376, 860,
	381, 860,
	382, 860,
	383, 860,
	384, 860,
	385, 860,
	386, 860,
	-2, 0,
	-1, 131,
	112, 831,
	124, 831,
	175, 831,
	201, 831,
	230, 831,
	238, 831,
	358, 831,
	-2, 824,
	-1, 136,
	1, 754,
	181, 754,
	259, 754,
	263, 754,
	412, 754,
	413, 754,
	-2, 0,
	-1, 138,
	1, 754,
	412, 754,
	413, 754,
	-2, 0,
	-1, 139,
	1, 754,
	412, 754,
	413, 754,
	-2, 0,
	-1, 140,
	1, 758,
	412, 758,
	413, 758,
	-2, 0,
	-1, 166,
	4, 867,
	5, 867,
	6, 867,
	7, 867,
	8, 867,
	9, 867,
	20, 867,
	21, 867,
	22, 867,
	23, 867,
	25, 867,
	30, 867,
	31, 867,
	35, 867,
	36, 867,
	37, 867,
	38, 867,
	39, 867,
	40, 867,
	41, 867,
	42, 867,
	43, 867,
	44, 867,
	46, 867,
	47, 867,
	48, 867,
	49, 867,
	50, 867,
	51, 867,
	52, 867,
	53, 867,
	54, 867,
	55, 867,
	56, 867,
	58, 867,
	59, 867,
	61, 867,
	63, 867,
	64, 867,
	65, 867,
	66, 867,
	67, 867,
	69, 867,
	70, 867,
	71, 867,
	72, 867,
	74, 867,
	76, 867,
	77, 867,
	79, 867,
	80, 867,
	81, 867,
	82, 867,
	83, 867,
	84, 867,
	85, 867,
	86, 867,
	88, 867,
	89, 867,
	90, 867,
	91, 867,
	92, 867,
	93, 867,
	94, 867,
	95, 867,
	96, 867,
	97, 867,
	98, 867,
	99, 867,
	101, 867,
	103, 867,
	106, 867,
	107, 867,
	109, 867,
	113, 867,
	114, 867,
	115, 867,
	116, 867,
	117, 867,
	118, 867,
	119, 867,
	120, 867,
	121, 867,
	122, 867,
	123, 867,
	129, 867,
	130, 867,
	131, 867,
	132, 867,
	133, 867,
	135, 867,
	137, 867,
	140, 867,
	141, 867,
	143, 867,
	144, 867,
	146, 867,
	148, 867,
	149, 867,
	150, 867,
	151, 867,
	152, 867,
	153, 867,
	154, 867,
	155, 867,
	156, 867,
	158, 867,
	162, 867,
	164, 867,
	166, 867,
	167, 867,
	168, 867,
	169, 867,
	170, 867,
	171, 867,
	172, 867,
	173, 867,
	174, 867,
	176, 867,
	178, 867,
	179, 867,
	180, 867,
	181, 867,
	182, 867,
	183, 867,
	184, 867,
	185, 867,
	186, 867,
	189, 867,
	190, 867,
	191, 867,
	193, 867,
	194, 867,
	196, 867,
	197, 867,
	198, 867,
	199, 867,
	200, 867,
	202, 867,
	203, 867,
	206, 867,
	208, 867,
	209, 867,
	210, 867,
	211, 867,
	212, 867,
	213, 867,
	214, 867,
	215, 867,
	216, 867,
	217, 867,
	218, 867,
	219, 867,
	220, 867,
	221, 867,
	223, 867,
	224, 867,
	225, 867,
	226, 867,
	227, 867,
	228, 867,
	229, 867,
	231, 867,
	232, 867,
	235, 867,
	236, 867,
	239, 867,
	240, 867,
	241, 867,
	242, 867,
	243, 867,
	244, 867,
	245, 867,
	246, 867,
	247, 867,
	248, 867,
	249, 867,
	250, 867,
	251, 867,
	253, 867,
	254, 867,
	255, 867,
	256, 867,
	257, 867,
	259, 867,
	260, 867,
	261, 867,
	262, 867,
	263, 867,
	264, 867,
	265, 867,
	266, 867,
	268, 867,
	269, 867,
	270, 867,
	271, 867,
	272, 867,
	274, 867,
	275, 867,
	276, 867,
	277, 867,
	278, 867,
	279, 867,
	280, 867,
	282, 867,
	283, 867,
	284, 867,
	285, 867,
	286, 867,
	287, 867,
	288, 867,
	289, 867,
	291, 867,
	292, 867,
	293, 867,
	294, 867,
	295, 867,
	296, 867,
	297, 867,
	299, 867,
	300, 867,
	301, 867,
	302, 867,
	303, 867,
	304, 867,
	305, 867,
	306, 867,
	307, 867,
	308, 867,
	309, 867,
	310, 867,
	311, 867,
	312, 867,
	313, 867,
	314, 867,
	315, 867,
	316, 867,
	317, 867,
	319, 867,
	320, 867,
	321, 867,
	322, 867,
	323, 867,
	324, 867,
	325, 867,
	326, 867,
	327, 867,
	329, 867,
	330, 867,
	332, 867,
	333, 867,
	335, 867,
	336, 867,
	337, 867,
	338, 867,
	339, 867,
	340, 867,
	341, 867,
	342, 867,
	344, 867,
	345, 867,
	346, 867,
	349, 867,
	350, 867,
	351, 867,
	352, 867,
	353, 867,
	354, 867,
	355, 867,
	356, 867,
	357, 867,
	360, 867,
	361, 867,
	362, 867,
	363, 867,
	364, 867,
	365, 867,
	367, 867,
	368, 867,
	369, 867,
	370, 867,
	371, 867,
	372, 867,
	375, 867,
	376, 867,
	381, 867,
	382, 867,
	383, 867,
	384, 867,
	385, 867,
	386, 867,
	387, 867,
	395, 867,
	400, 867,
	401, 867,
	402, 867,
	409, 867,
	415, 867,
	-2, 0,
	-1, 169,
	1, 55,
	413, 55,
	-2, 858,
	-1, 201,
	411, 1421,
	414, 1421,
	-2, 557,
	-1, 202,
	411, 1423,
	414, 1423,
	-2, 558,
	-1, 203,
	411, 1422,
	414, 1422,
	-2, 559,
	-1, 204,
	414, 1363,
	-2, 560,
	-1, 589,
	139, 1516,
	347, 1516,
	392, 1516,
	411, 1516,
	-2, 0,
	-1, 590,
	139, 1455,
	347, 1455,
	392, 1455,
	411, 1455,
	-2, 0,
	-1, 592,
	139, 1584,
	347, 1584,
	392, 1584,
	411, 1584,
	-2, 0,
	-1, 594,
	139, 1609,
	347, 1609,
	392, 1609,
	411, 1609,
	-2, 0,
	-1, 601,
	139, 1521,
	347, 1521,
	392, 1521,
	411, 1521,
	-2, 394,
	-1, 635,
	1, 489,
	408, 489,
	410, 489,
	412, 489,
	413, 489,
	-2, 0,
	-1, 636,
	1, 556,
	136, 556,
	408, 556,
	410, 556,
	412, 556,
	413, 556,
	-2, 0,
	-1, 642,
	1, 503,
	408, 503,
	410, 503,
	412, 503,
	413, 503,
	-2, 0,
	-1, 644,
	1, 507,
	408, 507,
	410, 507,
	412, 507,
	413, 507,
	-2, 0,
	-1, 647,
	1, 518,
	408, 518,
	410, 518,
	412, 518,
	413, 518,
	-2, 0,
	-1, 648,
	1, 524,
	408, 524,
	410, 524,
	412, 524,
	413, 524,
	-2, 0,
	-1, 649,
	1, 527,
	408, 527,
	410, 527,
	412, 527,
	413, 527,
	-2, 0,
	-1, 653,
	1, 541,
	408, 541,
	410, 541,
	412, 541,
	413, 541,
	-2, 0,
	-1, 654,
	1, 543,
	408, 543,
	410, 543,
	412, 543,
	413, 543,
	-2, 0,
	-1, 680,
	124, 869,
	201, 869,
	230, 869,
	-2, 827,
	-1, 688,
	124, 868,
	201, 868,
	230, 868,
	-2, 825,
	-1, 715,
	409, 1703,
	-2, 1142,
	-1, 716,
	409, 1704,
	-2, 1143,
	-1, 747,
	409, 1415,
	-2, 1406,
	-1, 748,
	5, 1000,
	409, 1430,
	-2, 1421,
	-1, 749,
	409, 1431,
	-2, 1422,
	-1, 756,
	5, 984,
	-2, 1450,
	-1, 757,
	5, 985,
	-2, 1636,
	-1, 758,
	5, 986,
	-2, 1635,
	-1, 759,
	5, 987,
	-2, 1606,
	-1, 760,
	5, 988,
	-2, 1665,
	-1, 761,
	5, 989,
	-2, 1674,
	-1, 762,
	5, 990,
	-2, 1675,
	-1, 763,
	5, 991,
	-2, 1676,
	-1, 764,
	5, 992,
	-2, 1677,
	-1, 765,
	5, 993,
	-2, 1679,
	-1, 766,
	5, 994,
	-2, 1687,
	-1, 767,
	5, 995,
	-2, 1654,
	-1, 768,
	5, 996,
	-2, 1631,
	-1, 769,
	5, 997,
	-2, 1530,
	-1, 770,
	5, 998,
	-2, 1531,
	-1, 771,
	5, 999,
	-2, 1502,
	-1, 772,
	5, 1046,
	409, 1046,
	-2, 1661,
	-1, 790,
	5, 1011,
	-2, 1630,
	-1, 791,
	5, 1038,
	-2, 1632,
	-1, 792,
	5, 1021,
	-2, 1633,
	-1, 793,
	5, 1020,
	-2, 1634,
	-1, 794,
	5, 1038,
	-2, 1637,
	-1, 795,
	5, 1038,
	-2, 1638,
	-1, 796,
	5, 1039,
	-2, 1641,
	-1, 797,
	5, 1003,
	-2, 1642,
	-1, 798,
	5, 1003,
	-2, 1643,
	-1, 801,
	5, 1028,
	-2, 1647,
	-1, 802,
	5, 1013,
	-2, 1648,
	-1, 803,
	5, 1014,
	-2, 1649,
	-1, 805,
	5, 1004,
	-2, 1655,
	-1, 806,
	5, 1005,
	-2, 1656,
	-1, 807,
	5, 1006,
	-2, 1657,
	-1, 808,
	5, 1007,
	-2, 1658,
	-1, 809,
	5, 1008,
	-2, 1659,
	-1, 810,
	5, 1009,
	-2, 1660,
	-1, 811,
	5, 972,
	-2, 1662,
	-1, 812,
	5, 973,
	-2, 1663,
	-1, 814,
	5, 1003,
	-2, 1667,
	-1, 817,
	5, 1012,
	-2, 1672,
	-1, 818,
	5, 1010,
	-2, 1678,
	-1, 819,
	5, 1036,
	-2, 1680,
	-1, 821,
	5, 1040,
	-2, 1682,
	-1, 822,
	5, 1042,
	-2, 1683,
	-1, 823,
	5, 1044,
	-2, 1684,
	-1, 826,
	5, 1035,
	-2, 1689,
	-1, 894,
	409, 1430,
	-2, 1421,
	-1, 911,
	274, 1403,
	402, 1403,
	-2, 1402,
	-1, 1048,
	249, 856,
	-2, 682,
	-1, 1057,
	233, 1425,
	-2, 0,
	-1, 1100,
	1, 261,
	408, 261,
	410, 261,
	412, 261,
	413, 261,
	-2, 830,
	-1, 1103,
	4, 1688,
	10, 1688,
	11, 1688,
	13, 1688,
	14, 1688,
	15, 1688,
	16, 1688,
	17, 1688,
	18, 1688,
	20, 1688,
	21, 1688,
	22, 1688,
	23, 1688,
	25, 1688,
	28, 1688,
	30, 1688,
	32, 1688,
	35, 1688,
	36, 1688,
	37, 1688,
	38, 1688,
	39, 1688,
	40, 1688,
	41, 1688,
	42, 1688,
	43, 1688,
	44, 1688,
	46, 1688,
	47, 1688,
	48, 1688,
	49, 1688,
	50, 1688,
	51, 1688,
	54, 1688,
	55, 1688,
	56, 1688,
	58, 1688,
	59, 1688,
	60, 1688,
	63, 1688,
	64, 1688,
	65, 1688,
	66, 1688,
	67, 1688,
	68, 1688,
	69, 1688,
	70, 1688,
	71, 1688,
	72, 1688,
	74, 1688,
	75, 1688,
	76, 1688,
	77, 1688,
	79, 1688,
	80, 1688,
	81, 1688,
	82, 1688,
	90, 1688,
	91, 1688,
	92, 1688,
	93, 1688,
	94, 1688,
	95, 1688,
	96, 1688,
	97, 1688,
	99, 1688,
	101, 1688,
	103, 1688,
	106, 1688,
	107, 1688,
	109, 1688,
	113, 1688,
	114, 1688,
	115, 1688,
	116, 1688,
	117, 1688,
	118, 1688,
	119, 1688,
	120, 1688,
	121, 1688,
	125, 1688,
	126, 1688,
	127, 1688,
	128, 1688,
	129, 1688,
	130, 1688,
	131, 1688,
	132, 1688,
	133, 1688,
	134, 1688,
	135, 1688,
	137, 1688,
	140, 1688,
	141, 1688,
	143, 1688,
	144, 1688,
	146, 1688,
	148, 1688,
	149, 1688,
	150, 1688,
	151, 1688,
	152, 1688,
	153, 1688,
	154, 1688,
	155, 1688,
	156, 1688,
	157, 1688,
	158, 1688,
	159, 1688,
	160, 1688,
	161, 1688,
	162, 1688,
	164, 1688,
	166, 1688,
	167, 1688,
	168, 1688,
	169, 1688,
	170, 1688,
	171, 1688,
	172, 1688,
	173, 1688,
	174, 1688,
	176, 1688,
	178, 1688,
	179, 1688,
	180, 1688,
	181, 1688,
	182, 1688,
	183, 1688,
	184, 1688,
	185, 1688,
	186, 1688,
	187, 1688,
	188, 1688,
	189, 1688,
	190, 1688,
	191, 1688,
	193, 1688,
	194, 1688,
	196, 1688,
	197, 1688,
	198, 1688,
	199, 1688,
	200, 1688,
	202, 1688,
	203, 1688,
	206, 1688,
	207, 1688,
	208, 1688,
	211, 1688,
	212, 1688,
	213, 1688,
	214, 1688,
	215, 1688,
	216, 1688,
	217, 1688,
	218, 1688,
	219, 1688,
	220, 1688,
	223, 1688,
	225, 1688,
	226, 1688,
	227, 1688,
	228, 1688,
	229, 1688,
	231, 1688,
	232, 1688,
	235, 1688,
	236, 1688,
	237, 1688,
	239, 1688,
	240, 1688,
	242, 1688,
	244, 1688,
	245, 1688,
	246, 1688,
	247, 1688,
	248, 1688,
	249, 1688,
	250, 1688,
	251, 1688,
	253, 1688,
	254, 1688,
	255, 1688,
	256, 1688,
	257, 1688,
	259, 1688,
	260, 1688,
	261, 1688,
	262, 1688,
	263, 1688,
	264, 1688,
	265, 1688,
	266, 1688,
	268, 1688,
	269, 1688,
	270, 1688,
	271, 1688,
	272, 1688,
	273, 1688,
	274, 1688,
	275, 1688,
	276, 1688,
	277, 1688,
	278, 1688,
	279, 1688,
	280, 1688,
	282, 1688,
	283, 1688,
	284, 1688,
	285, 1688,
	286, 1688,
	287, 1688,
	288, 1688,
	289, 1688,
	290, 1688,
	291, 1688,
	292, 1688,
	293, 1688,
	294, 1688,
	295, 1688,
	296, 1688,
	297, 1688,
	299, 1688,
	300, 1688,
	301, 1688,
	302, 1688,
	303, 1688,
	304, 1688,
	305, 1688,
	306, 1688,
	307, 1688,
	309, 1688,
	310, 1688,
	311, 1688,
	312, 1688,
	313, 1688,
	314, 1688,
	315, 1688,
	316, 1688,
	317, 1688,
	319, 1688,
	320, 1688,
	321, 1688,
	322, 1688,
	323, 1688,
	324, 1688,
	325, 1688,
	326, 1688,
	327, 1688,
	329, 1688,
	330, 1688,
	332, 1688,
	333, 1688,
	335, 1688,
	336, 1688,
	337, 1688,
	338, 1688,
	339, 1688,
	340, 1688,
	341, 1688,
	342, 1688,
	344, 1688,
	345, 1688,
	346, 1688,
	349, 1688,
	350, 1688,
	351, 1688,
	352, 1688,
	354, 1688,
	355, 1688,
	356, 1688,
	357, 1688,
	360, 1688,
	361, 1688,
	362, 1688,
	363, 1688,
	365, 1688,
	367, 1688,
	368, 1688,
	369, 1688,
	370, 1688,
	371, 1688,
	372, 1688,
	375, 1688,
	376, 1688,
	381, 1688,
	382, 1688,
	383, 1688,
	384, 1688,
	385, 1688,
	386, 1688,
	387, 1688,
	388, 1688,
	390, 1688,
	391, 1688,
	392, 1688,
	393, 1688,
	394, 1688,
	395, 1688,
	397, 1688,
	398, 1688,
	399, 1688,
	400, 1688,
	401, 1688,
	402, 1688,
	403, 1688,
	404, 1688,
	405, 1688,
	407, 1688,
	410, 1688,
	411, 1688,
	414, 1688,
	415, 1688,
	-2, 0,
	-1, 1121,
	139, 1584,
	347, 1584,
	392, 1584,
	411, 1584,
	-2, 0,
	-1, 1146,
	139, 1609,
	347, 1609,
	392, 1609,
	411, 1609,
	-2, 0,
	-1, 1147,
	181, 766,
	259, 766,
	263, 766,
	-2, 381,
	-1, 1222,
	124, 868,
	201, 868,
	230, 868,
	-2, 828,
	-1, 1306,
	112, 832,
	124, 832,
	175, 832,
	201, 832,
	230, 832,
	238, 832,
	358, 832,
	-2, 1183,
	-1, 1352,
	410, 1298,
	-2, 0,
	-1, 1359,
	181, 766,
	259, 766,
	263, 766,
	-2, 761,
	-1, 1388,
	410, 1298,
	-2, 0,
	-1, 1392,
	112, 832,
	124, 832,
	175, 832,
	201, 832,
	230, 832,
	238, 832,
	358, 832,
	-2, 931,
	-1, 1583,
	181, 766,
	259, 766,
	263, 766,
	-2, 383,
	-1, 1690,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1081,
	-1, 1691,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1082,
	-1, 1692,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1083,
	-1, 1693,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1084,
	-1, 1694,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1085,
	-1, 1695,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1086,
	-1, 1696,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1087,
	-1, 1697,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1088,
	-1, 1709,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1100,
	-1, 1710,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1101,
	-1, 1711,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1102,
	-1, 1714,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1107,
	-1, 1720,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1109,
	-1, 1722,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1113,
	-1, 1723,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1114,
	-1, 1724,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1115,
	-1, 1725,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1116,
	-1, 1801,
	5, 1000,
	139, 1309,
	409, 1430,
	-2, 1421,
	-1, 1802,
	139, 1310,
	-2, 1626,
	-1, 1803,
	139, 1311,
	-2, 1520,
	-1, 1804,
	139, 1312,
	-2, 1475,
	-1, 1805,
	139, 1313,
	-2, 1496,
	-1, 1806,
	139, 1314,
	-2, 1519,
	-1, 1807,
	139, 1315,
	-2, 1580,
	-1, 1881,
	1, 932,
	79, 932,
	112, 932,
	124, 932,
	140, 932,
	145, 932,
	147, 932,
	166, 932,
	175, 932,
	184, 932,
	197, 932,
	201, 932,
	216, 932,
	230, 932,
	233, 932,
	238, 932,
	281, 932,
	283, 932,
	358, 932,
	366, 932,
	378, 932,
	379, 932,
	389, 932,
	408, 932,
	410, 932,
	412, 932,
	413, 932,
	414, 932,
	-2, 931,
	-1, 1883,
	409, 1407,
	-2, 1419,
	-1, 1961,
	410, 1368,
	414, 1368,
	-2, 1395,
	-1, 2080,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1108,
	-1, 2081,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1110,
	-1, 2086,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1111,
	-1, 2104,
	243, 1269,
	-2, 1271,
	-1, 2307,
	249, 856,
	-2, 682,
	-1, 2370,
	181, 766,
	259, 766,
	263, 766,
	-2, 380,
	-1, 2384,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1112,
	-1, 2389,
	179, 0,
	180, 0,
	223, 0,
	-2, 1130,
	-1, 2398,
	243, 1270,
	-2, 1272,
	-1, 2447,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1160,
	-1, 2448,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1161,
	-1, 2449,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1162,
	-1, 2453,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1166,
	-1, 2454,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1167,
	-1, 2455,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1168,
	-1, 2494,
	409, 1408,
	-2, 1420,
	-1, 2608,
	179, 0,
	180, 0,
	223, 0,
	-2, 1131,
	-1, 2611,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1134,
	-1, 2612,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1136,
	-1, 2755,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1135,
	-1, 2756,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1137,
	-1, 2766,
	179, 0,
	-2, 1169,
	-1, 2854,
	179, 0,
	-2, 1170,
	-1, 2952,
	38, 0,
	156, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1629,
}

const sqlPrivate = 57344

const sqlLast = 55450

var sqlAct = [...]int{

	749, 3014, 2709, 2951, 2960, 2545, 2794, 2928, 1986, 2927,
	2930, 2914, 2961, 2419, 2962, 1994, 2031, 2783, 2858, 2950,
	2723, 1090, 2562, 2503, 2557, 1677, 2746, 2074, 1033, 2663,
	2321, 915, 689, 1737, 2678, 1019, 723, 1514, 2316, 2314,
	203, 2567, 1225, 2354, 472, 2356, 1386, 2504, 1875, 1963,
	2326, 472, 741, 1959, 2643, 1983, 1515, 2221, 472, 2233,
	472, 2180, 2197, 472, 203, 2771, 472, 472, 930, 2583,
	1995, 1054, 1086, 472, 541, 27, 1367, 1466, 788, 1488,
	1463, 472, 1962, 1895, 1475, 1467, 1886, 1453, 1418, 467,
	908, 924, 2472, 2208, 1876, 1947, 2179, 520, 1668, 1663,
	1313, 2116, 2070, 517, 2859, 1750, 1749, 1921, 2325, 2290,
	1472, 1776, 1608, 1359, 1440, 1368, 1400, 1434, 732, 1464,
	1402, 1758, 1734, 1869, 553, 70, 1922, 1310, 1149, 1948,
	1340, 881, 746, 1770, 1391, 1338, 1960, 1966, 1083, 917,
	1861, 1301, 1101, 204, 1073, 1988, 745, 205, 1878, 469,
	697, 125, 885, 863, 713, 1846, 1377, 1226, 1224, 1838,
	740, 472, 472, 599, 1797, 199, 1607, 579, 556, 593,
	1482, 131, 1070, 627, 1023, 1358, 2103, 861, 468, 132,
	2488, 1490, 1230, 2489, 1490, 1490, 1987, 3041, 693, 457,
	572, 1855, 472, 472, 472, 920, 472, 472, 933, 933,
	3035, 2033, 1093, 693, 1855, 2505, 514, 472, 472, 125,
	1949, 565, 3034, 457, 1387, 3011, 1855, 1855, 460, 2677,
	3008, 1751, 2332, 2986, 1449, 2710, 2980, 2677, 2979, 567,
	1855, 2360, 1855, 2976, 688, 1502, 2973, 2977, 2910, 2970,
	2974, 828, 460, 1449, 27, 2948, 2947, 883, 703, 1449,
	1449, 2946, 2945, 2909, 1395, 1502, 1502, 2023, 2896, 694,
	2889, 2887, 1449, 2885, 2677, 2677, 2856, 2677, 2842, 927,
	2023, 2830, 2591, 2825, 2823, 2677, 548, 1449, 2677, 1949,
	2813, 2812, 2805, 911, 1449, 1449, 1449, 39, 2804, 2777,
	2757, 2382, 2677, 1449, 2023, 1026, 2703, 681, 2699, 2676,
	1855, 42, 1855, 2677, 2475, 680, 2333, 2610, 698, 864,
	864, 2023, 2581, 2573, 2484, 2478, 2574, 2574, 2485, 1855,
	125, 2304, 2393, 901, 905, 910, 1855, 2345, 2194, 547,
	2145, 2296, 1855, 2144, 1855, 2107, 2138, 1855, 2137, 865,
	2139, 2108, 1855, 2042, 2022, 2011, 2015, 1855, 2023, 1855,
	1025, 1954, 1443, 1854, 1024, 1449, 457, 1855, 549, 1506,
	1848, 1132, 1773, 1507, 1855, 57, 551, 1123, 2843, 867,
	58, 868, 1502, 1449, 696, 1241, 1242, 2475, 1847, 2115,
	1449, 1586, 2591, 1937, 1884, 460, 166, 2460, 2395, 2296,
	2073, 2053, 1448, 1363, 1753, 1022, 169, 913, 2150, 2151,
	1244, 1991, 60, 1120, 1119, 2334, 1118, 1117, 1116, 1491,
	1115, 1114, 1491, 1491, 1113, 1112, 1111, 1774, 2150, 2151,
	1110, 166, 168, 878, 2335, 1243, 1109, 1108, 1107, 1106,
	1105, 1104, 1311, 869, 1124, 866, 687, 1241, 1242, 686,
	1274, 1275, 1276, 1284, 1285, 1286, 1605, 685, 684, 683,
	1241, 1242, 679, 678, 677, 1277, 2165, 168, 676, 167,
	675, 674, 1244, 673, 672, 1290, 671, 670, 160, 669,
	665, 664, 663, 625, 624, 1244, 161, 623, 1775, 1772,
	622, 472, 472, 472, 920, 920, 472, 1243, 621, 472,
	620, 619, 472, 618, 167, 1263, 617, 133, 472, 1249,
	1243, 61, 1260, 616, 2967, 615, 1124, 614, 472, 472,
	472, 472, 472, 920, 920, 613, 612, 611, 610, 609,
	920, 608, 2156, 2150, 2151, 607, 606, 605, 134, 63,
	604, 64, 133, 603, 588, 1094, 587, 586, 585, 584,
	583, 505, 2156, 504, 1498, 1789, 2656, 1489, 1647, 166,
	738, 472, 1266, 1267, 1268, 1269, 478, 2375, 477, 476,
	550, 1249, 472, 106, 1777, 462, 461, 189, 188, 187,
	186, 185, 1047, 1044, 1249, 184, 183, 182, 181, 1958,
	1059, 2332, 472, 1281, 1291, 168, 1271, 1272, 1273, 180,
	179, 178, 177, 472, 2617, 2166, 1449, 176, 175, 174,
	173, 166, 172, 1087, 171, 170, 1287, 1288, 2575, 2544,
	2150, 2151, 2229, 548, 1258, 1259, 2113, 2062, 1955, 1952,
	1390, 1611, 167, 1399, 39, 1787, 1785, 1279, 1317, 1072,
	1163, 160, 920, 1783, 1264, 1847, 1124, 168, 42, 161,
	1035, 1028, 1237, 2949, 2932, 694, 2019, 2156, 2921, 2850,
	1289, 2826, 1771, 1077, 1080, 1241, 1242, 39, 2740, 1102,
	133, 2731, 2642, 2793, 1278, 2641, 547, 472, 2846, 2640,
	166, 42, 2844, 2633, 167, 2629, 2028, 877, 2167, 2628,
	1244, 2627, 2623, 160, 2622, 2621, 1048, 1051, 2620, 2613,
	2590, 161, 2588, 2469, 2468, 549, 2467, 2405, 2299, 2020,
	1270, 2295, 57, 551, 2228, 1243, 168, 58, 1147, 2224,
	1157, 2190, 1990, 1223, 1161, 2178, 2149, 1265, 2146, 882,
	2166, 2143, 2142, 2140, 2121, 2120, 2150, 2151, 2021, 2168,
	2169, 2170, 2104, 1881, 2156, 1237, 551, 1321, 1236, 60,
	1282, 1745, 3039, 167, 2607, 1511, 1314, 3022, 1304, 3021,
	1034, 2421, 160, 2940, 2935, 2891, 2882, 2881, 2877, 2876,
	161, 2870, 1144, 2867, 2841, 1245, 1246, 1247, 1248, 1250,
	1251, 2840, 60, 1739, 2349, 2789, 2768, 2718, 2714, 1249,
	2712, 133, 1222, 2698, 2165, 2161, 2159, 2160, 2152, 2153,
	2154, 2155, 2157, 2158, 2682, 2638, 2592, 747, 1221, 2560,
	2552, 2551, 1164, 2167, 1271, 1272, 1273, 2549, 2152, 2153,
	2154, 2155, 2157, 2158, 1280, 2524, 2523, 1255, 1256, 1262,
	1261, 1257, 1283, 2513, 1254, 1252, 1253, 1245, 1246, 1247,
	1248, 1250, 1251, 2512, 1170, 2214, 1314, 2730, 61, 1606,
	1923, 2630, 1247, 1248, 1250, 1251, 2480, 694, 2069, 2861,
	2156, 2388, 1264, 2351, 2279, 2263, 2243, 2242, 472, 2150,
	2151, 2193, 1746, 472, 2177, 134, 63, 2130, 64, 681,
	2129, 61, 2126, 1238, 1233, 1234, 2100, 680, 2095, 1341,
	1346, 2030, 1241, 1242, 1866, 1853, 166, 1781, 1459, 472,
	1328, 1327, 1326, 1365, 2058, 2171, 1325, 550, 134, 63,
	106, 64, 1388, 1366, 1357, 1356, 1352, 1244, 1351, 1350,
	2161, 2159, 2160, 2152, 2153, 2154, 2155, 2157, 2158, 166,
	1348, 1347, 168, 2166, 1344, 1343, 1334, 1336, 1333, 1342,
	550, 1339, 1243, 106, 1332, 1265, 1331, 1330, 1329, 1318,
	1305, 1304, 1143, 1308, 2243, 1349, 1128, 1098, 1371, 1372,
	1241, 1242, 2739, 1788, 2615, 168, 2587, 2487, 2483, 167,
	2106, 2150, 2151, 1867, 2347, 883, 889, 1302, 160, 1396,
	2025, 2150, 2151, 2317, 1605, 1244, 161, 1596, 1595, 1160,
	1605, 1602, 2736, 2156, 1385, 2150, 2151, 2594, 2593, 2490,
	1949, 1413, 167, 1605, 1390, 1138, 2819, 133, 2283, 2278,
	1243, 160, 2154, 2155, 2157, 2158, 2167, 2041, 1384, 161,
	1354, 864, 694, 1219, 1605, 2274, 1355, 1323, 1389, 2262,
	2185, 2184, 920, 472, 1360, 1362, 2183, 739, 1417, 933,
	133, 125, 1925, 1786, 1784, 472, 933, 472, 472, 1393,
	1364, 1782, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250,
	1251, 2079, 2040, 2847, 1579, 1156, 2166, 2845, 472, 472,
	1872, 2522, 859, 1353, 2033, 472, 1468, 472, 1460, 472,
	2792, 1599, 1592, 472, 1249, 2362, 1512, 2273, 1430, 2772,
	1987, 2423, 1759, 1471, 876, 2156, 2968, 194, 1337, 2111,
	2978, 2975, 2328, 2499, 2924, 860, 1213, 2558, 1374, 1271,
	1272, 1273, 2016, 3002, 2895, 513, 2162, 2163, 2164, 2156,
	3001, 494, 2690, 2161, 2159, 2160, 2152, 2153, 2154, 2155,
	2157, 2158, 472, 203, 472, 472, 484, 1408, 2043, 855,
	920, 1211, 203, 472, 2969, 1199, 472, 472, 1632, 2167,
	3038, 1320, 472, 1888, 1198, 1479, 2818, 1264, 2372, 1540,
	853, 1569, 2817, 1441, 2527, 2815, 1456, 1493, 2166, 851,
	1495, 2814, 2538, 1497, 933, 2533, 1025, 1500, 1414, 1477,
	1024, 1212, 457, 472, 2532, 2348, 1600, 495, 472, 2496,
	2495, 1520, 2166, 203, 472, 512, 472, 1158, 472, 488,
	472, 1773, 472, 2125, 1888, 1411, 1072, 1447, 2124, 692,
	2123, 460, 472, 849, 472, 1887, 483, 846, 2122, 1601,
	1732, 1509, 472, 472, 472, 2082, 1412, 2014, 1942, 2707,
	1571, 1486, 1593, 2849, 1446, 1936, 1932, 1573, 1730, 1833,
	1265, 1913, 1159, 1721, 1361, 1021, 1832, 1481, 1831, 1484,
	472, 2167, 1679, 2894, 933, 1984, 1774, 2159, 2160, 2152,
	2153, 2154, 2155, 2157, 2158, 667, 1946, 562, 931, 1020,
	1583, 1645, 691, 503, 1613, 2167, 1037, 1644, 2543, 1650,
	1953, 1736, 457, 577, 578, 487, 1617, 1251, 1396, 1736,
	1777, 457, 1240, 1604, 1639, 498, 1142, 2906, 1508, 2943,
	578, 1144, 2796, 1510, 1520, 1520, 1906, 1570, 1669, 1676,
	1646, 460, 1197, 1047, 1641, 1580, 1485, 1775, 1772, 2415,
	460, 2993, 1194, 1403, 2907, 2323, 1404, 1597, 933, 1726,
	1505, 2071, 2072, 1743, 3024, 693, 1609, 1727, 1741, 2270,
	1728, 1134, 457, 2265, 1733, 1429, 1614, 1415, 1252, 1253,
	1245, 1246, 1247, 1248, 1250, 1251, 2026, 1929, 1623, 1490,
	2160, 2152, 2153, 2154, 2155, 2157, 2158, 1137, 1759, 1195,
	2873, 460, 472, 3001, 472, 1581, 2158, 1606, 1923, 1335,
	1539, 497, 496, 1606, 1603, 2152, 2153, 2154, 2155, 2157,
	2158, 484, 1648, 1649, 2255, 2324, 1606, 1923, 933, 2373,
	472, 2534, 472, 1777, 1897, 1777, 482, 1218, 1405, 472,
	933, 1173, 681, 1667, 472, 681, 681, 1606, 1923, 1407,
	1659, 472, 1975, 1660, 1661, 1756, 2674, 472, 2254, 481,
	1754, 1135, 2150, 2151, 1210, 2168, 2169, 2170, 2525, 472,
	694, 480, 920, 2323, 2092, 694, 1409, 882, 1643, 2371,
	1880, 2671, 1747, 472, 933, 690, 1933, 1409, 1432, 472,
	472, 2752, 2090, 1889, 1744, 2763, 489, 883, 1830, 1729,
	472, 483, 2282, 472, 2515, 2821, 1731, 1153, 1299, 1796,
	2128, 485, 1520, 883, 857, 1900, 1916, 856, 1879, 1885,
	2165, 1771, 2672, 1539, 1539, 1631, 472, 1910, 472, 1820,
	472, 1901, 1903, 472, 1873, 472, 657, 472, 847, 472,
	472, 1862, 472, 920, 920, 920, 1915, 847, 920, 1808,
	479, 1939, 864, 472, 499, 1943, 702, 1843, 911, 1930,
	694, 1868, 1863, 1864, 2596, 2009, 2010, 1851, 1852, 1842,
	693, 1308, 1924, 1926, 1927, 1928, 1859, 3017, 1036, 1409,
	1763, 1892, 1908, 2087, 2797, 1154, 2156, 1393, 1914, 1155,
	1973, 848, 3025, 1915, 2088, 847, 1795, 1989, 2093, 1989,
	1931, 500, 733, 2582, 2963, 1800, 1800, 1944, 2084, 1811,
	1813, 2005, 1818, 472, 2992, 2964, 1735, 1491, 1133, 1841,
	190, 511, 195, 1437, 658, 1616, 506, 668, 1845, 561,
	1239, 2171, 1025, 2007, 1141, 1899, 1950, 501, 457, 502,
	488, 2364, 458, 1207, 2602, 2667, 470, 1433, 2668, 1893,
	2012, 2018, 933, 490, 472, 1181, 2412, 1742, 3000, 2166,
	516, 472, 557, 472, 2998, 516, 458, 460, 557, 575,
	1993, 2722, 1229, 1858, 1934, 582, 2000, 2002, 2006, 2003,
	1584, 2004, 2670, 602, 472, 472, 472, 1102, 472, 2017,
	2013, 2673, 510, 196, 2027, 2256, 1718, 125, 2720, 1174,
	1406, 1539, 1981, 1136, 125, 1893, 2516, 472, 3030, 2036,
	195, 2037, 2367, 1979, 2029, 2258, 511, 2413, 2748, 463,
	2046, 1208, 2965, 2089, 889, 1342, 487, 1349, 1462, 1373,
	2091, 1998, 2048, 1131, 2991, 1122, 1898, 2035, 475, 2032,
	1228, 1339, 2167, 2753, 3015, 2008, 1175, 659, 2056, 1172,
	2057, 2287, 1445, 2291, 2044, 2257, 1409, 2064, 1893, 2807,
	2456, 2636, 2049, 516, 516, 2806, 2787, 1591, 2689, 2686,
	2915, 895, 2864, 2059, 2047, 2688, 2498, 2061, 198, 2239,
	2235, 196, 1439, 2669, 1982, 1209, 1148, 510, 1980, 2966,
	1480, 1470, 197, 2085, 470, 470, 470, 2366, 925, 470,
	1438, 1469, 1465, 1777, 1461, 3016, 2222, 2411, 2747, 458,
	1027, 2363, 1228, 513, 1716, 1719, 1636, 1227, 2724, 2066,
	125, 2068, 1587, 1655, 125, 1589, 2563, 1435, 508, 193,
	1917, 2788, 484, 2245, 3029, 3018, 2114, 2244, 2077, 1590,
	660, 570, 2162, 2163, 2164, 2211, 1229, 482, 1436, 2161,
	2159, 2160, 2152, 2153, 2154, 2155, 2157, 2158, 1715, 1153,
	1857, 1957, 1956, 509, 191, 1165, 198, 657, 1856, 1069,
	481, 1067, 691, 2297, 564, 1458, 661, 2457, 1058, 1057,
	197, 2083, 480, 2365, 2458, 2637, 1182, 702, 2223, 1227,
	933, 3, 2685, 512, 194, 2195, 2749, 2546, 2687, 464,
	2202, 2203, 3005, 507, 192, 694, 472, 489, 513, 472,
	1656, 2711, 483, 2286, 2644, 2473, 1780, 193, 472, 2110,
	2785, 2719, 485, 508, 3007, 2767, 472, 472, 472, 2635,
	2542, 2181, 472, 2387, 1204, 472, 2182, 1154, 546, 35,
	2141, 1155, 472, 472, 472, 472, 472, 2226, 2094, 1918,
	1919, 2786, 191, 2034, 472, 658, 1403, 2218, 509, 1404,
	1941, 472, 1912, 1452, 1217, 1153, 1216, 883, 1129, 882,
	2060, 1717, 2292, 472, 920, 883, 883, 472, 465, 883,
	2038, 2236, 194, 933, 1202, 882, 1520, 472, 512, 1633,
	2240, 694, 192, 933, 2241, 1620, 933, 1630, 507, 933,
	2213, 2098, 2247, 2196, 2251, 2252, 1167, 1572, 2101, 472,
	1324, 472, 2959, 472, 1779, 472, 920, 920, 920, 2540,
	472, 569, 472, 1380, 2261, 2264, 472, 2118, 2119, 545,
	34, 472, 1444, 472, 2216, 2187, 2188, 2189, 2219, 2912,
	472, 1405, 2217, 1154, 1068, 2230, 1066, 1155, 1403, 1383,
	2660, 1404, 1407, 2277, 563, 472, 2227, 920, 2520, 2319,
	2518, 899, 1047, 2271, 2330, 2259, 2225, 1860, 2275, 544,
	31, 1203, 707, 2267, 472, 472, 2497, 2268, 659, 2266,
	1381, 2313, 2311, 470, 1043, 470, 2302, 2176, 470, 2353,
	2269, 925, 2276, 2309, 1062, 2301, 1985, 1841, 1841, 1841,
	470, 2281, 2192, 472, 1047, 2305, 2280, 2293, 35, 1977,
	470, 470, 470, 470, 925, 2204, 1520, 2318, 472, 2298,
	2346, 1201, 2337, 2338, 2339, 1976, 2340, 2341, 1974, 1450,
	1192, 1629, 2232, 1405, 543, 76, 1454, 1893, 542, 75,
	1166, 1190, 2342, 2199, 1407, 539, 22, 2246, 2336, 2249,
	1408, 2206, 2207, 602, 933, 2212, 694, 540, 23, 538,
	29, 1188, 2359, 1972, 470, 700, 1382, 657, 1504, 472,
	1503, 660, 1501, 2390, 1408, 1539, 2272, 537, 20, 535,
	19, 2329, 1409, 1499, 1139, 1186, 1496, 702, 1520, 1494,
	2407, 2408, 2409, 2368, 2369, 602, 1517, 2370, 2352, 34,
	536, 18, 1492, 1441, 2376, 1442, 2374, 661, 2260, 1441,
	2378, 1184, 1431, 2380, 1428, 1416, 889, 1410, 2306, 2307,
	2308, 701, 525, 15, 845, 1520, 1520, 526, 16, 1669,
	2427, 2400, 889, 534, 55, 2315, 2327, 2835, 1231, 31,
	533, 54, 1178, 1520, 1520, 2327, 2394, 1669, 2436, 2399,
	2396, 125, 1065, 3002, 1610, 658, 2738, 2737, 472, 2344,
	2584, 524, 53, 1376, 1612, 532, 12, 1191, 472, 470,
	933, 2426, 2424, 2420, 1409, 2414, 2416, 2417, 1189, 1520,
	2837, 2462, 1888, 2466, 2433, 1888, 523, 48, 1905, 2435,
	2572, 530, 45, 1904, 2492, 2705, 1902, 2075, 1187, 1945,
	1401, 1940, 1935, 1406, 76, 1539, 2486, 2431, 75, 1517,
	1517, 2039, 531, 46, 1911, 22, 2875, 2463, 1232, 2679,
	522, 47, 1185, 2461, 1380, 529, 7, 23, 1176, 29,
	883, 2471, 2852, 2474, 2645, 2476, 2477, 472, 472, 2528,
	472, 2479, 2541, 552, 1678, 472, 1920, 20, 1183, 19,
	1383, 2535, 933, 1907, 933, 2536, 1235, 920, 528, 6,
	2539, 1938, 2493, 850, 852, 2501, 2076, 1909, 1378, 2519,
	18, 2521, 2553, 472, 527, 37, 2911, 1539, 659, 1177,
	2576, 1381, 521, 36, 125, 1577, 1578, 2526, 2565, 1064,
	873, 2717, 15, 2569, 2564, 1406, 1376, 16, 1915, 2491,
	1379, 472, 2568, 55, 933, 472, 472, 933, 472, 571,
	54, 1992, 874, 1978, 1539, 1539, 2510, 2210, 1760, 2547,
	1241, 1242, 2548, 933, 1971, 2556, 2555, 1844, 1241, 1242,
	2509, 53, 1539, 1539, 1582, 12, 2578, 1513, 2343, 882,
	2570, 3013, 2600, 2577, 2566, 1244, 3028, 882, 882, 2604,
	2550, 882, 883, 2470, 1311, 2585, 48, 1380, 2150, 2151,
	582, 45, 472, 1241, 1242, 516, 2609, 1382, 1539, 699,
	1243, 660, 2597, 2051, 2050, 2559, 2586, 2561, 1243, 1169,
	2601, 1520, 46, 1383, 1168, 2418, 2350, 1517, 2595, 895,
	47, 470, 875, 2051, 2052, 7, 2598, 1810, 1769, 1206,
	1883, 1378, 1205, 2618, 2410, 1321, 2482, 661, 1319, 2734,
	2580, 1215, 1214, 1200, 1381, 1196, 1193, 1179, 1140, 2589,
	1585, 472, 858, 666, 2795, 2531, 2253, 1619, 6, 1180,
	1621, 933, 472, 1379, 2215, 2634, 472, 472, 472, 1865,
	2905, 2537, 1893, 2624, 37, 2127, 2605, 2857, 2762, 1778,
	2209, 1322, 36, 51, 472, 2506, 726, 2661, 2500, 472,
	1965, 472, 1964, 936, 472, 472, 472, 472, 472, 1594,
	2650, 2647, 2648, 472, 472, 920, 2683, 750, 1998, 933,
	2655, 2680, 1799, 920, 1670, 933, 2652, 2659, 752, 1518,
	755, 754, 472, 472, 883, 753, 2658, 1519, 1345, 751,
	1382, 1516, 1099, 1996, 2706, 920, 645, 1598, 2649, 1740,
	1757, 2109, 1315, 2713, 718, 472, 730, 729, 1755, 1127,
	2692, 717, 2220, 2322, 2721, 458, 2729, 2697, 2199, 1654,
	2067, 1651, 472, 472, 920, 920, 2726, 1027, 2728, 470,
	1457, 2684, 2725, 2517, 2700, 486, 2716, 2751, 2147, 2735,
	1097, 2693, 2694, 2651, 2653, 1827, 1819, 1815, 933, 1220,
	1476, 1476, 2727, 1047, 2701, 2733, 1300, 470, 1997, 470,
	1539, 470, 1162, 2754, 2331, 516, 2742, 2741, 2024, 2715,
	1662, 872, 871, 870, 2929, 2510, 889, 2926, 2732, 2750,
	1588, 2045, 2761, 1293, 889, 889, 722, 933, 889, 2509,
	2200, 472, 2704, 472, 2300, 933, 472, 1041, 1292, 854,
	2866, 1152, 2054, 1151, 472, 1150, 2769, 2238, 3023, 2874,
	933, 2514, 2510, 2923, 602, 458, 1027, 557, 165, 162,
	2782, 1520, 164, 2510, 458, 1027, 2509, 163, 925, 470,
	2285, 2657, 79, 1893, 602, 2800, 2799, 2509, 2801, 33,
	2780, 32, 105, 2775, 2776, 104, 103, 102, 1458, 101,
	100, 472, 2781, 472, 2691, 2798, 920, 99, 98, 97,
	2646, 472, 2696, 96, 95, 602, 2822, 2702, 2824, 94,
	470, 93, 2828, 1520, 2820, 458, 470, 2809, 470, 92,
	470, 91, 470, 933, 470, 90, 89, 2833, 1893, 88,
	87, 86, 882, 2832, 1634, 85, 1635, 2834, 84, 83,
	2839, 2810, 2811, 472, 470, 470, 470, 2838, 2568, 472,
	2327, 82, 2779, 81, 598, 2778, 472, 595, 2848, 78,
	77, 30, 2827, 25, 2511, 2851, 2743, 2744, 109, 110,
	2869, 24, 602, 2863, 74, 73, 2855, 28, 17, 11,
	2510, 2862, 21, 2529, 130, 472, 472, 129, 2836, 128,
	127, 1520, 472, 126, 2509, 2529, 14, 2860, 13, 2529,
	2886, 124, 2888, 920, 2529, 123, 2872, 2871, 472, 122,
	121, 920, 920, 120, 119, 2510, 472, 2510, 472, 2880,
	472, 2510, 10, 8, 2890, 108, 2883, 2893, 9, 2509,
	2745, 2509, 2899, 2900, 2892, 2509, 1893, 2774, 472, 2898,
	2901, 472, 2918, 2361, 472, 2879, 933, 67, 68, 26,
	1539, 41, 40, 107, 882, 2931, 156, 155, 154, 153,
	150, 2938, 2936, 152, 2937, 149, 2939, 2897, 151, 2920,
	148, 2925, 118, 158, 2803, 2944, 157, 146, 144, 145,
	2201, 472, 147, 143, 2942, 2941, 142, 159, 117, 116,
	2816, 1517, 115, 114, 582, 2958, 516, 2956, 113, 2957,
	112, 5, 1539, 2902, 2, 2903, 472, 1, 0, 2982,
	0, 895, 0, 2983, 472, 2984, 0, 1241, 1242, 0,
	0, 2971, 516, 0, 516, 0, 2990, 895, 2919, 2987,
	472, 470, 2988, 2989, 2985, 0, 1896, 0, 0, 0,
	0, 0, 1244, 470, 827, 2999, 2997, 2996, 0, 470,
	0, 1419, 0, 3003, 3004, 2931, 3009, 3010, 3006, 0,
	0, 470, 0, 0, 0, 0, 3012, 1243, 1423, 0,
	0, 0, 0, 0, 3019, 470, 0, 0, 3020, 889,
	1539, 458, 1951, 2289, 0, 0, 2289, 3027, 3026, 2294,
	2878, 0, 1961, 2981, 2510, 1027, 882, 0, 0, 0,
	0, 0, 3033, 0, 0, 0, 3036, 3037, 2509, 1420,
	0, 889, 0, 0, 3042, 0, 0, 0, 1896, 0,
	516, 1517, 470, 0, 0, 470, 0, 470, 0, 470,
	889, 470, 470, 2511, 925, 0, 0, 0, 0, 0,
	0, 1249, 889, 2510, 2908, 1896, 889, 0, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 2509, 0, 0,
	0, 2674, 0, 0, 0, 0, 1271, 1272, 1273, 0,
	2511, 1424, 0, 2933, 2934, 0, 0, 0, 0, 0,
	0, 2511, 0, 0, 0, 0, 2671, 0, 0, 2664,
	0, 0, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 889, 2662, 0, 1311, 557, 0, 2666, 0, 0,
	0, 0, 0, 0, 1264, 0, 0, 0, 0, 1998,
	0, 0, 548, 0, 0, 0, 0, 2672, 1425, 1426,
	1517, 1517, 0, 39, 0, 0, 0, 1421, 0, 922,
	0, 0, 935, 935, 2403, 0, 470, 42, 1517, 1517,
	0, 0, 2665, 1027, 0, 1027, 0, 0, 0, 0,
	473, 0, 0, 0, 1422, 0, 0, 0, 2150, 2151,
	0, 2168, 2169, 2170, 0, 547, 470, 470, 470, 0,
	470, 0, 0, 0, 1517, 0, 2606, 0, 0, 0,
	0, 0, 0, 0, 2096, 2097, 0, 1265, 2511, 470,
	202, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 57, 551, 3031, 3032, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 2165, 0, 2529, 0,
	0, 3040, 1658, 2511, 0, 2511, 0, 0, 0, 2511,
	1427, 0, 0, 889, 0, 0, 0, 887, 60, 1375,
	2667, 0, 0, 2668, 0, 0, 0, 0, 0, 0,
	2494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	889, 0, 2173, 2174, 2175, 0, 0, 2670, 0, 0,
	0, 466, 2156, 0, 0, 0, 2673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 1245, 1246, 1247,
	1248, 1250, 1251, 0, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 2171, 0, 0,
	2529, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 1821, 921, 0, 0, 934, 934,
	0, 0, 0, 0, 0, 2166, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 63, 0, 64, 0, 0,
	0, 895, 0, 0, 0, 705, 1517, 0, 2669, 895,
	895, 0, 0, 895, 931, 166, 0, 1020, 516, 0,
	0, 516, 0, 0, 0, 0, 550, 0, 0, 106,
	516, 0, 2511, 0, 0, 0, 0, 0, 470, 1896,
	2234, 0, 0, 0, 1896, 0, 0, 2234, 922, 922,
	0, 168, 0, 0, 1896, 2234, 1896, 2234, 2234, 903,
	0, 0, 0, 0, 929, 889, 470, 0, 2167, 0,
	0, 0, 0, 1457, 0, 0, 0, 922, 922, 0,
	0, 2511, 0, 0, 922, 470, 0, 0, 167, 925,
	0, 0, 0, 0, 0, 889, 0, 160, 0, 470,
	889, 0, 889, 0, 0, 161, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1476, 0, 1476, 0, 470, 133, 470, 0, 0,
	0, 0, 470, 0, 470, 0, 0, 0, 925, 0,
	0, 0, 0, 1896, 0, 516, 0, 0, 0, 0,
	0, 0, 1896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2385, 2386, 0, 0, 1027, 2162, 2163,
	2164, 0, 0, 0, 0, 2161, 2159, 2160, 2152, 2153,
	2154, 2155, 2157, 2158, 0, 0, 2357, 1027, 0, 0,
	0, 0, 0, 0, 0, 2708, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 2377, 0, 0, 0, 0,
	0, 0, 2150, 2151, 0, 2168, 2169, 2170, 0, 0,
	470, 0, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444,
	2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454,
	2455, 0, 2459, 0, 0, 0, 1517, 0, 0, 0,
	0, 0, 0, 0, 921, 921, 0, 0, 2759, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 889,
	2165, 2422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 921, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 2759, 1517, 0,
	0, 0, 0, 0, 0, 1678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	1678, 0, 0, 0, 1029, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 1241, 1242, 2156, 0, 1039, 0,
	1284, 1285, 1286, 1056, 0, 0, 0, 1821, 1821, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 1244,
	516, 0, 1290, 1241, 1242, 1076, 1076, 1076, 929, 0,
	516, 0, 0, 0, 0, 0, 1517, 0, 0, 0,
	0, 0, 0, 0, 1243, 0, 2508, 0, 1244, 0,
	0, 0, 1263, 1020, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 2530, 0, 0, 0, 2166,
	0, 0, 0, 1243, 0, 0, 0, 2530, 0, 1125,
	0, 2530, 0, 1126, 0, 0, 2530, 0, 0, 1130,
	0, 0, 0, 0, 0, 1821, 1821, 1821, 0, 1896,
	1476, 0, 1476, 0, 0, 0, 0, 470, 0, 1266,
	1267, 1268, 1269, 0, 0, 0, 0, 705, 1249, 0,
	0, 705, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1896, 895, 0, 0, 0,
	1281, 1291, 0, 1271, 1272, 1273, 0, 1249, 0, 0,
	0, 0, 2167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1027, 0, 0, 0, 925, 470, 0,
	470, 0, 1271, 1272, 1273, 0, 1678, 2150, 2151, 0,
	2168, 2169, 2170, 0, 1279, 0, 0, 0, 0, 0,
	0, 1264, 0, 0, 0, 2392, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1264, 0, 0, 0, 2625, 0, 0, 0, 1294, 1295,
	1296, 1297, 1298, 0, 0, 2165, 922, 0, 0, 0,
	0, 1307, 0, 935, 0, 0, 0, 0, 0, 0,
	935, 1316, 2162, 2163, 2164, 0, 0, 1270, 0, 2161,
	2159, 2160, 2152, 2153, 2154, 2155, 2157, 2158, 0, 0,
	0, 0, 0, 0, 1265, 0, 0, 0, 895, 0,
	0, 0, 0, 1027, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 0, 0, 1282, 1896, 2234,
	1896, 2156, 0, 1265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2508, 1027, 0, 0, 0,
	0, 1896, 0, 2234, 0, 0, 1027, 1027, 470, 1896,
	2234, 0, 0, 0, 0, 470, 470, 0, 0, 0,
	0, 0, 0, 0, 922, 0, 2171, 0, 0, 0,
	0, 0, 2508, 0, 1027, 1961, 1821, 1821, 0, 0,
	0, 0, 0, 2508, 0, 2766, 0, 0, 0, 0,
	0, 1280, 0, 0, 2166, 0, 0, 1896, 935, 1283,
	0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251,
	1369, 1369, 1369, 0, 2357, 2357, 0, 0, 0, 0,
	0, 0, 2790, 0, 0, 0, 1397, 0, 0, 0,
	0, 0, 0, 1245, 1246, 1247, 1248, 1250, 1251, 0,
	0, 0, 0, 0, 0, 1821, 1821, 1821, 1821, 1821,
	1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821, 1821,
	1821, 1821, 1821, 1821, 0, 1821, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 2167, 935, 934,
	0, 0, 0, 1896, 0, 2234, 934, 0, 2784, 0,
	0, 0, 0, 0, 0, 0, 470, 0, 0, 0,
	2508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2530, 0, 0, 0, 0, 2508, 0, 2508, 0, 0,
	0, 2508, 0, 470, 0, 470, 0, 0, 0, 0,
	0, 0, 935, 1027, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 71, 0, 0,
	0, 0, 0, 202, 1455, 0, 0, 2162, 2163, 2164,
	921, 0, 202, 0, 2161, 2159, 2160, 2152, 2153, 2154,
	2155, 2157, 2158, 0, 0, 2422, 0, 0, 0, 0,
	0, 516, 0, 0, 1483, 0, 1483, 0, 2784, 0,
	0, 0, 0, 0, 934, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 202, 935, 0, 0, 1896, 2234, 0,
	0, 0, 2530, 0, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2234, 0, 0, 0, 0, 0, 922, 0, 1027, 0,
	1027, 0, 470, 0, 1575, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2916, 0, 682, 1027, 934, 0, 470, 0, 705, 705,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2508, 1618, 0, 0, 0, 0,
	0, 1624, 0, 1625, 0, 1626, 0, 1627, 0, 1628,
	0, 0, 0, 2422, 0, 884, 71, 922, 922, 922,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 1637,
	1056, 0, 0, 0, 0, 0, 0, 0, 1027, 0,
	0, 0, 0, 2508, 0, 0, 1896, 1652, 934, 1657,
	0, 0, 0, 0, 0, 1664, 0, 0, 0, 0,
	0, 0, 2784, 0, 0, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	0, 1720, 0, 1722, 1723, 1724, 1725, 0, 0, 0,
	518, 0, 0, 0, 0, 0, 0, 0, 934, 0,
	0, 0, 1748, 0, 0, 0, 935, 0, 0, 1307,
	934, 1241, 1242, 548, 1274, 1275, 1276, 1284, 1285, 1286,
	0, 0, 0, 0, 39, 0, 0, 0, 0, 1790,
	1791, 1792, 1793, 1794, 0, 0, 1244, 0, 42, 1290,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 0,
	1817, 0, 1829, 0, 934, 0, 1834, 1839, 0, 0,
	0, 1243, 0, 0, 0, 0, 547, 0, 0, 1263,
	0, 0, 0, 0, 0, 0, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1821, 0,
	0, 0, 0, 0, 0, 549, 1882, 0, 0, 0,
	0, 0, 57, 551, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 921, 921, 921, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 1821, 1266, 1267, 1268, 1269,
	0, 0, 0, 0, 0, 1249, 0, 0, 0, 60,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 1291, 0,
	1271, 1272, 1273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1288, 0, 0, 0, 0, 0, 2001, 1258, 1259,
	1076, 0, 1076, 0, 1076, 0, 929, 929, 0, 0,
	0, 1279, 0, 0, 0, 0, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1821, 0, 934, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 935, 0, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2150,
	2151, 0, 2168, 2169, 2170, 134, 63, 0, 64, 0,
	0, 0, 0, 0, 1270, 0, 0, 2391, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 1265, 0, 0, 0, 0, 0, 550, 0, 0,
	106, 0, 2150, 2151, 0, 2168, 2169, 2170, 0, 0,
	0, 2055, 0, 0, 1282, 0, 0, 2165, 0, 0,
	0, 0, 168, 0, 0, 0, 0, 0, 922, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 2063, 929, 2065, 0, 0, 0, 935, 0, 0,
	935, 0, 0, 935, 0, 0, 0, 0, 0, 167,
	2165, 0, 0, 0, 2078, 0, 0, 0, 160, 0,
	922, 922, 922, 0, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 2156, 0, 0, 0, 0, 1280, 0,
	0, 1255, 1256, 1262, 1261, 1257, 1283, 519, 1254, 1252,
	1253, 1245, 1246, 1247, 1248, 1250, 1251, 0, 0, 0,
	0, 922, 0, 0, 0, 2080, 2081, 0, 0, 0,
	0, 2086, 0, 0, 682, 0, 2156, 0, 2171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2099, 0, 0, 0, 0, 0, 1303, 0, 1306, 2172,
	0, 0, 0, 2105, 0, 1312, 2166, 0, 0, 2112,
	934, 0, 0, 0, 2117, 0, 0, 0, 0, 0,
	0, 2171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2131, 0, 0, 1241, 1242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2166,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 1244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 1243, 1839, 1839, 1839, 0, 2167,
	0, 0, 1263, 0, 921, 0, 0, 1369, 0, 0,
	0, 0, 0, 934, 0, 2205, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 934, 0, 0, 934,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2167, 2231, 0, 0, 921, 921, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	1267, 1268, 1269, 0, 0, 0, 0, 71, 1249, 0,
	0, 1056, 0, 1392, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 921, 0, 0,
	0, 0, 0, 1271, 1272, 1273, 0, 0, 0, 2162,
	2163, 2164, 0, 0, 2284, 0, 2161, 2159, 2160, 2152,
	2153, 2154, 2155, 2157, 2158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2303, 0, 0, 0, 0, 0, 0, 2310, 0, 2312,
	0, 1264, 2162, 2163, 2164, 0, 0, 2320, 0, 2161,
	2159, 2160, 2152, 2153, 2154, 2155, 2157, 2158, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 935, 0,
	0, 922, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	705, 705, 0, 0, 0, 0, 0, 1270, 0, 0,
	0, 0, 0, 705, 0, 0, 0, 0, 935, 0,
	0, 935, 0, 0, 1265, 0, 0, 0, 0, 2379,
	0, 0, 0, 1664, 0, 2381, 0, 935, 0, 2383,
	0, 0, 2384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2389, 0, 0, 0, 0, 0,
	0, 1241, 1242, 2397, 1274, 1275, 1276, 1284, 1285, 1286,
	0, 2401, 0, 0, 0, 2205, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 1244, 0, 0, 1290,
	0, 0, 0, 0, 2428, 2429, 2430, 0, 0, 0,
	934, 2432, 0, 0, 0, 0, 0, 0, 2434, 0,
	0, 1243, 0, 0, 0, 0, 0, 0, 0, 1263,
	0, 0, 0, 0, 0, 0, 1260, 0, 0, 0,
	0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251,
	0, 2464, 2465, 0, 0, 935, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2481, 0, 0, 0, 0, 0, 1266, 1267, 1268, 1269,
	0, 0, 934, 0, 934, 1249, 0, 921, 0, 922,
	0, 0, 0, 935, 0, 0, 0, 922, 0, 935,
	0, 0, 2502, 0, 0, 0, 0, 1281, 1291, 0,
	1271, 1272, 1273, 0, 0, 0, 0, 682, 0, 922,
	682, 682, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1288, 0, 0, 934, 0, 0, 934, 1258, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 922, 922,
	0, 1279, 0, 934, 0, 0, 0, 0, 1264, 0,
	0, 0, 2554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 1289, 0, 0, 0, 1738, 0,
	0, 0, 0, 1369, 0, 0, 0, 0, 1278, 0,
	0, 695, 0, 0, 2579, 0, 1306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 0, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 0, 2599, 1270, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 0, 0, 0, 2608, 0, 0,
	0, 2611, 2612, 0, 0, 2614, 0, 0, 0, 0,
	0, 934, 2616, 0, 1282, 884, 2619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	922, 1392, 0, 2626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 921, 0, 935, 0, 934,
	0, 0, 0, 921, 0, 934, 0, 0, 0, 0,
	2639, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 1280, 0,
	0, 1255, 1256, 1262, 1261, 1257, 1283, 0, 1254, 1252,
	1253, 1245, 1246, 1247, 1248, 1250, 1251, 0, 0, 0,
	0, 2917, 0, 0, 921, 921, 0, 2681, 0, 71,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2695, 0, 0, 0, 922, 934, 0,
	1056, 0, 0, 71, 0, 922, 922, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	935, 0, 0, 0, 0, 934, 0, 0, 0, 0,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 39, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 42, 2755, 2756, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2765, 0, 0, 547, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 2773, 0, 0, 1241, 1242, 0,
	1274, 1275, 1276, 1284, 1285, 1286, 71, 0, 0, 0,
	71, 0, 549, 934, 0, 1277, 0, 0, 0, 57,
	551, 2791, 1244, 0, 58, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2808, 0,
	0, 0, 0, 0, 0, 0, 0, 1243, 0, 0,
	0, 0, 0, 0, 0, 1263, 60, 0, 0, 0,
	0, 0, 1260, 0, 0, 0, 0, 0, 2829, 0,
	2831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 1738, 0, 0, 0,
	0, 921, 921, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 1267, 1268, 1269, 1306, 0, 0, 0,
	0, 1249, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 2865,
	0, 0, 2868, 1281, 1291, 0, 1271, 1272, 1273, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 1288, 0, 2884,
	0, 0, 0, 0, 1258, 1259, 0, 0, 0, 0,
	0, 0, 134, 63, 0, 64, 0, 1279, 0, 0,
	0, 0, 0, 0, 1264, 0, 0, 2904, 0, 0,
	0, 0, 1306, 166, 0, 0, 0, 0, 0, 0,
	1289, 0, 0, 0, 550, 0, 0, 106, 0, 0,
	0, 2922, 0, 0, 1278, 884, 0, 0, 0, 0,
	0, 0, 0, 884, 884, 0, 0, 884, 0, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2955, 2955, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2972, 0, 167, 1265, 0, 0,
	0, 0, 0, 0, 0, 160, 71, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 0, 0,
	1282, 0, 2955, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 2955, 0, 0, 0, 695, 0, 0,
	0, 0, 0, 0, 1280, 0, 0, 1255, 1256, 1262,
	1261, 1257, 1283, 0, 1254, 1252, 1253, 1245, 1246, 1247,
	1248, 1250, 1251, 0, 0, 0, 0, 0, 0, 0,
	0, 2136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 1768, 0, 748, 736, 737, 734, 735,
	725, 0, 0, 0, 0, 0, 0, 0, 884, 0,
	0, 272, 273, 274, 275, 1765, 276, 0, 0, 0,
	0, 783, 728, 0, 0, 0, 277, 278, 279, 209,
	790, 768, 791, 756, 792, 793, 0, 281, 758, 757,
	282, 283, 284, 731, 782, 794, 795, 219, 0, 285,
	787, 0, 773, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 776, 774, 775, 779, 0, 777,
	778, 301, 302, 474, 303, 796, 304, 797, 798, 714,
	305, 0, 306, 0, 307, 1766, 0, 789, 309, 0,
	310, 0, 0, 0, 719, 311, 312, 314, 315, 313,
	316, 799, 800, 743, 830, 0, 0, 0, 0, 0,
	317, 318, 801, 802, 803, 0, 319, 0, 320, 0,
	884, 831, 321, 0, 322, 804, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 784, 786, 833, 0, 767,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 805,
	771, 806, 807, 808, 809, 810, 0, 772, 0, 333,
	834, 835, 334, 335, 336, 836, 811, 812, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 813, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	716, 715, 348, 349, 351, 760, 350, 839, 352, 353,
	355, 354, 711, 0, 840, 744, 785, 356, 814, 357,
	358, 0, 769, 770, 0, 0, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 815, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 816, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 817, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 884, 394, 843, 395, 396, 397, 398, 720,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 761, 762, 763, 764, 410, 413, 414, 780,
	415, 400, 401, 416, 844, 417, 818, 765, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 819, 423, 0,
	424, 820, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 759, 436, 0, 821, 822, 823, 0, 0,
	437, 438, 824, 825, 742, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 781, 447, 0, 766, 448,
	449, 450, 268, 826, 1764, 0, 451, 270, 0, 0,
	71, 0, 452, 453, 271, 454, 455, 456, 712, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 708, 709, 1767, 0, 0, 0, 0, 0, 0,
	721, 1762, 0, 0, 0, 0, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1738, 272, 273, 274, 275, 937, 276,
	938, 939, 940, 941, 208, 942, 943, 944, 945, 277,
	278, 279, 209, 210, 211, 212, 280, 213, 214, 946,
	281, 215, 216, 282, 283, 284, 947, 948, 217, 218,
	219, 949, 285, 220, 950, 896, 951, 286, 287, 288,
	289, 290, 0, 292, 293, 294, 291, 952, 295, 0,
	296, 297, 953, 829, 298, 299, 300, 954, 955, 957,
	956, 958, 959, 960, 301, 302, 474, 303, 221, 304,
	222, 223, 961, 305, 962, 306, 963, 307, 964, 965,
	308, 309, 966, 310, 967, 0, 968, 224, 311, 312,
	314, 315, 313, 316, 225, 226, 969, 830, 970, 0,
	0, 0, 0, 317, 318, 227, 228, 229, 0, 319,
	971, 320, 972, 973, 831, 321, 974, 322, 230, 975,
	231, 976, 323, 324, 325, 326, 327, 328, 232, 233,
	833, 977, 234, 0, 0, 0, 332, 978, 329, 979,
	832, 330, 235, 331, 236, 237, 238, 239, 240, 980,
	241, 981, 333, 834, 835, 334, 335, 336, 836, 242,
	243, 0, 0, 337, 338, 339, 982, 341, 340, 983,
	244, 837, 342, 343, 838, 984, 344, 345, 985, 986,
	346, 0, 347, 898, 897, 348, 349, 351, 245, 350,
	839, 352, 353, 355, 354, 987, 988, 840, 989, 246,
	356, 247, 357, 358, 990, 359, 360, 991, 992, 361,
	362, 993, 994, 363, 248, 841, 364, 842, 249, 365,
	366, 367, 368, 369, 370, 371, 995, 372, 250, 373,
	251, 374, 996, 375, 376, 377, 378, 379, 252, 380,
	381, 997, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 998, 394, 843, 395, 396,
	397, 398, 253, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 999, 411, 412, 254, 255, 256, 257, 410,
	413, 414, 1000, 415, 400, 401, 416, 844, 417, 258,
	259, 418, 1001, 426, 419, 420, 421, 402, 422, 425,
	260, 423, 1002, 424, 261, 1003, 427, 428, 1004, 429,
	430, 431, 432, 433, 434, 435, 436, 1005, 262, 263,
	264, 1006, 1007, 437, 438, 265, 266, 1008, 439, 440,
	441, 442, 1009, 1010, 443, 444, 445, 446, 1011, 447,
	1012, 267, 448, 449, 450, 268, 269, 1013, 1014, 451,
	270, 1015, 1016, 1017, 1018, 452, 453, 271, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 1870, 0, 0, 0, 0, 0, 0, 0, 0,
	1871, 272, 273, 274, 275, 937, 276, 938, 939, 940,
	941, 208, 942, 943, 944, 945, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 946, 281, 215, 216,
	282, 283, 284, 947, 948, 217, 218, 219, 949, 285,
	220, 950, 896, 951, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 952, 295, 0, 296, 297, 953,
	829, 298, 299, 300, 954, 955, 957, 956, 958, 959,
	960, 301, 302, 474, 303, 221, 304, 222, 223, 961,
	305, 962, 306, 963, 307, 964, 965, 308, 309, 966,
	310, 967, 0, 968, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 969, 830, 970, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 971, 320, 972,
	973, 831, 321, 974, 322, 230, 975, 231, 976, 323,
	324, 325, 326, 327, 328, 232, 233, 833, 977, 234,
	0, 0, 0, 332, 978, 329, 979, 832, 330, 235,
	331, 236, 237, 238, 239, 240, 980, 241, 981, 333,
	834, 835, 334, 335, 336, 836, 242, 243, 0, 0,
	337, 338, 339, 982, 341, 340, 983, 244, 837, 342,
	343, 838, 984, 344, 345, 985, 986, 346, 0, 347,
	898, 897, 348, 349, 351, 245, 350, 839, 352, 353,
	355, 354, 987, 988, 840, 989, 246, 356, 247, 357,
	358, 990, 359, 360, 991, 992, 361, 362, 993, 994,
	363, 248, 841, 364, 842, 249, 365, 366, 367, 368,
	369, 370, 371, 995, 372, 250, 373, 251, 374, 996,
	375, 376, 377, 378, 379, 252, 380, 381, 997, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 998, 394, 843, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 999,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 1000,
	415, 400, 401, 416, 844, 417, 258, 259, 418, 1001,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 1002,
	424, 261, 1003, 427, 428, 1004, 429, 430, 431, 432,
	433, 434, 435, 436, 1005, 262, 263, 264, 1006, 1007,
	437, 438, 265, 266, 1008, 439, 440, 441, 442, 1009,
	1010, 443, 444, 445, 446, 1011, 447, 1012, 267, 448,
	449, 450, 268, 269, 1013, 1014, 451, 270, 1015, 1016,
	1017, 1018, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2654, 272,
	273, 274, 275, 937, 276, 938, 939, 940, 941, 208,
	942, 943, 944, 945, 277, 278, 279, 209, 210, 211,
	212, 280, 213, 214, 946, 281, 215, 216, 282, 283,
	284, 947, 948, 217, 218, 219, 949, 285, 220, 950,
	896, 951, 286, 287, 288, 289, 290, 0, 292, 293,
	294, 291, 952, 295, 0, 296, 297, 953, 829, 298,
	299, 300, 954, 955, 957, 956, 958, 959, 960, 301,
	302, 474, 303, 221, 304, 222, 223, 961, 305, 962,
	306, 963, 307, 964, 965, 308, 309, 966, 310, 967,
	0, 968, 224, 311, 312, 314, 315, 313, 316, 225,
	226, 969, 830, 970, 0, 0, 0, 0, 317, 318,
	227, 228, 229, 0, 319, 971, 320, 972, 973, 831,
	321, 974, 322, 230, 975, 231, 976, 323, 324, 325,
	326, 327, 328, 232, 233, 833, 977, 234, 0, 0,
	0, 332, 978, 329, 979, 832, 330, 235, 331, 236,
	237, 238, 239, 240, 980, 241, 981, 333, 834, 835,
	334, 335, 336, 836, 242, 243, 0, 0, 337, 338,
	339, 982, 341, 340, 983, 244, 837, 342, 343, 838,
	984, 344, 345, 985, 986, 346, 0, 347, 898, 897,
	348, 349, 351, 245, 350, 839, 352, 353, 355, 354,
	987, 988, 840, 989, 246, 356, 247, 357, 358, 990,
	359, 360, 991, 992, 361, 362, 993, 994, 363, 248,
	841, 364, 842, 249, 365, 366, 367, 368, 369, 370,
	371, 995, 372, 250, 373, 251, 374, 996, 375, 376,
	377, 378, 379, 252, 380, 381, 997, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	998, 394, 843, 395, 396, 397, 398, 253, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 999, 411, 412,
	254, 255, 256, 257, 410, 413, 414, 1000, 415, 400,
	401, 416, 844, 417, 258, 259, 418, 1001, 426, 419,
	420, 421, 402, 422, 425, 260, 423, 1002, 424, 261,
	1003, 427, 428, 1004, 429, 430, 431, 432, 433, 434,
	435, 436, 1005, 262, 263, 264, 1006, 1007, 437, 438,
	265, 266, 1008, 439, 440, 441, 442, 1009, 1010, 443,
	444, 445, 446, 1011, 447, 1012, 267, 448, 449, 450,
	268, 269, 1013, 1014, 451, 270, 1015, 1016, 1017, 1018,
	452, 453, 271, 454, 455, 456, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2760, 272, 273, 274, 275, 937, 276, 938, 939,
	940, 941, 208, 942, 943, 944, 945, 277, 278, 279,
	209, 210, 211, 212, 280, 213, 214, 946, 281, 215,
	216, 282, 283, 284, 947, 948, 217, 218, 219, 949,
	285, 220, 950, 896, 951, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 952, 295, 0, 296, 297,
	953, 829, 298, 299, 300, 954, 955, 957, 956, 958,
	959, 960, 301, 302, 474, 303, 221, 304, 222, 223,
	961, 305, 962, 306, 963, 307, 964, 965, 308, 309,
	966, 310, 967, 0, 968, 224, 311, 312, 314, 315,
	313, 316, 225, 226, 969, 830, 970, 0, 0, 0,
	0, 317, 318, 227, 228, 229, 0, 319, 971, 320,
	972, 973, 831, 321, 974, 322, 230, 975, 231, 976,
	323, 324, 325, 326, 327, 328, 232, 233, 833, 977,
	234, 0, 0, 0, 332, 978, 329, 979, 832, 330,
	235, 331, 236, 237, 238, 239, 240, 980, 241, 981,
	333, 834, 835, 334, 335, 336, 836, 242, 243, 0,
	0, 337, 338, 339, 982, 341, 340, 983, 244, 837,
	342, 343, 838, 984, 344, 345, 985, 986, 346, 0,
	347, 898, 897, 348, 349, 351, 245, 350, 839, 352,
	353, 355, 354, 987, 988, 840, 989, 246, 356, 247,
	357, 358, 990, 359, 360, 991, 992, 361, 362, 993,
	994, 363, 248, 841, 364, 842, 249, 365, 366, 367,
	368, 369, 370, 371, 995, 372, 250, 373, 251, 374,
	996, 375, 376, 377, 378, 379, 252, 380, 381, 997,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 998, 394, 843, 395, 396, 397, 398,
	253, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	999, 411, 412, 254, 255, 256, 257, 410, 413, 414,
	1000, 415, 400, 401, 416, 844, 417, 258, 259, 418,
	1001, 426, 419, 420, 421, 402, 422, 425, 260, 423,
	1002, 424, 261, 1003, 427, 428, 1004, 429, 430, 431,
	432, 433, 434, 435, 436, 1005, 262, 263, 264, 1006,
	1007, 437, 438, 265, 266, 1008, 439, 440, 441, 442,
	1009, 1010, 443, 444, 445, 446, 1011, 447, 1012, 267,
	448, 449, 450, 268, 269, 1013, 1014, 451, 270, 1015,
	1016, 1017, 1018, 452, 453, 271, 454, 455, 456, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2404, 272, 273, 274, 275, 937,
	276, 938, 939, 940, 941, 208, 942, 943, 944, 945,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	946, 281, 215, 216, 282, 283, 284, 947, 948, 217,
	218, 219, 949, 285, 220, 950, 896, 951, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 952, 295,
	0, 296, 297, 953, 829, 298, 299, 300, 954, 955,
	957, 956, 958, 959, 960, 301, 302, 474, 303, 221,
	304, 222, 223, 961, 305, 962, 306, 963, 307, 964,
	965, 308, 309, 966, 310, 967, 0, 968, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 969, 830, 970,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 971, 320, 972, 973, 831, 321, 974, 322, 230,
	975, 231, 976, 323, 324, 325, 326, 327, 328, 232,
	233, 833, 977, 234, 0, 0, 0, 332, 978, 329,
	979, 832, 330, 235, 331, 236, 237, 238, 239, 240,
	980, 241, 981, 333, 834, 835, 334, 335, 336, 836,
	242, 243, 0, 0, 337, 338, 339, 982, 341, 340,
	983, 244, 837, 342, 343, 838, 984, 344, 345, 985,
	986, 346, 0, 347, 898, 897, 348, 349, 351, 245,
	350, 839, 352, 353, 355, 354, 987, 988, 840, 989,
	246, 356, 247, 357, 358, 990, 359, 360, 991, 992,
	361, 362, 993, 994, 363, 248, 841, 364, 842, 249,
	365, 366, 367, 368, 369, 370, 371, 995, 372, 250,
	373, 251, 374, 996, 375, 376, 377, 378, 379, 252,
	380, 381, 997, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 998, 394, 843, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 999, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 1000, 415, 400, 401, 416, 844, 417,
	258, 259, 418, 1001, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 1002, 424, 261, 1003, 427, 428, 1004,
	429, 430, 431, 432, 433, 434, 435, 436, 1005, 262,
	263, 264, 1006, 1007, 437, 438, 265, 266, 1008, 439,
	440, 441, 442, 1009, 1010, 443, 444, 445, 446, 1011,
	447, 1012, 267, 448, 449, 450, 268, 269, 1013, 1014,
	451, 270, 1015, 1016, 1017, 1018, 452, 453, 271, 454,
	455, 456, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2288, 272, 273,
	274, 275, 937, 276, 938, 939, 940, 941, 208, 942,
	943, 944, 945, 277, 278, 279, 209, 210, 211, 212,
	280, 213, 214, 946, 281, 215, 216, 282, 283, 284,
	947, 948, 217, 218, 219, 949, 285, 220, 950, 896,
	951, 286, 287, 288, 289, 290, 0, 292, 293, 294,
	291, 952, 295, 0, 296, 297, 953, 829, 298, 299,
	300, 954, 955, 957, 956, 958, 959, 960, 301, 302,
	474, 303, 221, 304, 222, 223, 961, 305, 962, 306,
	963, 307, 964, 965, 308, 309, 966, 310, 967, 0,
	968, 224, 311, 312, 314, 315, 313, 316, 225, 226,
	969, 830, 970, 0, 0, 0, 0, 317, 318, 227,
	228, 229, 0, 319, 971, 320, 972, 973, 831, 321,
	974, 322, 230, 975, 231, 976, 323, 324, 325, 326,
	327, 328, 232, 233, 833, 977, 234, 0, 0, 0,
	332, 978, 329, 979, 832, 330, 235, 331, 236, 237,
	238, 239, 240, 980, 241, 981, 333, 834, 835, 334,
	335, 336, 836, 242, 243, 0, 0, 337, 338, 339,
	982, 341, 340, 983, 244, 837, 342, 343, 838, 984,
	344, 345, 985, 986, 346, 0, 347, 898, 897, 348,
	349, 351, 245, 350, 839, 352, 353, 355, 354, 987,
	988, 840, 989, 246, 356, 247, 357, 358, 990, 359,
	360, 991, 992, 361, 362, 993, 994, 363, 248, 841,
	364, 842, 249, 365, 366, 367, 368, 369, 370, 371,
	995, 372, 250, 373, 251, 374, 996, 375, 376, 377,
	378, 379, 252, 380, 381, 997, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 998,
	394, 843, 395, 396, 397, 398, 253, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 999, 411, 412, 254,
	255, 256, 257, 410, 413, 414, 1000, 415, 400, 401,
	416, 844, 417, 258, 259, 418, 1001, 426, 419, 420,
	421, 402, 422, 425, 260, 423, 1002, 424, 261, 1003,
	427, 428, 1004, 429, 430, 431, 432, 433, 434, 435,
	436, 1005, 262, 263, 264, 1006, 1007, 437, 438, 265,
	266, 1008, 439, 440, 441, 442, 1009, 1010, 443, 444,
	445, 446, 1011, 447, 1012, 267, 448, 449, 450, 268,
	269, 1013, 1014, 451, 270, 1015, 1016, 1017, 1018, 452,
	453, 271, 454, 455, 456, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1761, 272, 273, 274, 275, 937, 276, 938, 939, 940,
	941, 208, 942, 943, 944, 945, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 946, 281, 215, 216,
	282, 283, 284, 947, 948, 217, 218, 219, 949, 285,
	220, 950, 896, 951, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 952, 295, 0, 296, 297, 953,
	829, 298, 299, 300, 954, 955, 957, 956, 958, 959,
	960, 301, 302, 474, 303, 221, 304, 222, 223, 961,
	305, 962, 306, 963, 307, 964, 965, 308, 309, 966,
	310, 967, 0, 968, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 969, 830, 970, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 971, 320, 972,
	973, 831, 321, 974, 322, 230, 975, 231, 976, 323,
	324, 325, 326, 327, 328, 232, 233, 833, 977, 234,
	0, 0, 0, 332, 978, 329, 979, 832, 330, 235,
	331, 236, 237, 238, 239, 240, 980, 241, 981, 333,
	834, 835, 334, 335, 336, 836, 242, 243, 0, 0,
	337, 338, 339, 982, 341, 340, 983, 244, 837, 342,
	343, 838, 984, 344, 345, 985, 986, 346, 0, 347,
	898, 897, 348, 349, 351, 245, 350, 839, 352, 353,
	355, 354, 987, 988, 840, 989, 246, 356, 247, 357,
	358, 990, 359, 360, 991, 992, 361, 362, 993, 994,
	363, 248, 841, 364, 842, 249, 365, 366, 367, 368,
	369, 370, 371, 995, 372, 250, 373, 251, 374, 996,
	375, 376, 377, 378, 379, 252, 380, 381, 997, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 998, 394, 843, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 999,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 1000,
	415, 400, 401, 416, 844, 417, 258, 259, 418, 1001,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 1002,
	424, 261, 1003, 427, 428, 1004, 429, 430, 431, 432,
	433, 434, 435, 436, 1005, 262, 263, 264, 1006, 1007,
	437, 438, 265, 266, 1008, 439, 440, 441, 442, 1009,
	1010, 443, 444, 445, 446, 1011, 447, 1012, 267, 448,
	449, 450, 268, 269, 1013, 1014, 451, 270, 1015, 1016,
	1017, 1018, 452, 453, 271, 454, 455, 456, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1451, 272, 273, 274, 275, 937, 276,
	938, 939, 940, 941, 208, 942, 943, 944, 945, 277,
	278, 279, 209, 210, 211, 212, 280, 213, 214, 946,
	281, 215, 216, 282, 283, 284, 947, 948, 217, 218,
	219, 949, 285, 220, 950, 896, 951, 286, 287, 288,
	289, 290, 0, 292, 293, 294, 291, 952, 295, 0,
	296, 297, 953, 829, 298, 299, 300, 954, 955, 957,
	956, 958, 959, 960, 301, 302, 474, 303, 221, 304,
	222, 223, 961, 305, 962, 306, 963, 307, 964, 965,
	308, 309, 966, 310, 967, 0, 968, 224, 311, 312,
	314, 315, 313, 316, 225, 226, 969, 830, 970, 0,
	0, 0, 0, 317, 318, 227, 228, 229, 0, 319,
	971, 320, 972, 973, 831, 321, 974, 322, 230, 975,
	231, 976, 323, 324, 325, 326, 327, 328, 232, 233,
	833, 977, 234, 0, 0, 0, 332, 978, 329, 979,
	832, 330, 235, 331, 236, 237, 238, 239, 240, 980,
	241, 981, 333, 834, 835, 334, 335, 336, 836, 242,
	243, 0, 0, 337, 338, 339, 982, 341, 340, 983,
	244, 837, 342, 343, 838, 984, 344, 345, 985, 986,
	346, 0, 347, 898, 897, 348, 349, 351, 245, 350,
	839, 352, 353, 355, 354, 987, 988, 840, 989, 246,
	356, 247, 357, 358, 990, 359, 360, 991, 992, 361,
	362, 993, 994, 363, 248, 841, 364, 842, 249, 365,
	366, 367, 368, 369, 370, 371, 995, 372, 250, 373,
	251, 374, 996, 375, 376, 377, 378, 379, 252, 380,
	381, 997, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 998, 394, 843, 395, 396,
	397, 398, 253, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 999, 411, 412, 254, 255, 256, 257, 410,
	413, 414, 1000, 415, 400, 401, 416, 844, 417, 258,
	259, 418, 1001, 426, 419, 420, 421, 402, 422, 425,
	260, 423, 1002, 424, 261, 1003, 427, 428, 1004, 429,
	430, 431, 432, 433, 434, 435, 436, 1005, 262, 263,
	264, 1006, 1007, 437, 438, 265, 266, 1008, 439, 440,
	441, 442, 1009, 1010, 443, 444, 445, 446, 1011, 447,
	1012, 267, 448, 449, 450, 268, 269, 1013, 1014, 451,
	270, 1015, 1016, 1017, 1018, 452, 453, 271, 454, 455,
	456, 696, 0, 748, 736, 737, 734, 735, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	273, 274, 275, 0, 276, 0, 0, 0, 0, 783,
	728, 0, 0, 0, 277, 278, 279, 209, 790, 768,
	791, 756, 792, 793, 0, 281, 758, 757, 282, 283,
	284, 731, 782, 794, 795, 219, 0, 285, 787, 0,
	773, 0, 286, 287, 288, 289, 290, 0, 292, 293,
	294, 291, 0, 295, 0, 296, 297, 0, 829, 298,
	299, 300, 776, 774, 775, 779, 0, 777, 778, 301,
	302, 474, 303, 796, 304, 797, 798, 714, 305, 0,
	306, 0, 307, 0, 0, 789, 309, 0, 310, 0,
	0, 0, 719, 311, 312, 314, 315, 313, 316, 799,
	800, 743, 830, 0, 0, 0, 0, 0, 317, 318,
	801, 802, 803, 0, 319, 0, 320, 0, 0, 831,
	321, 0, 322, 804, 0, 231, 0, 323, 324, 325,
	326, 327, 328, 784, 786, 833, 0, 767, 0, 0,
	0, 332, 0, 329, 0, 832, 330, 805, 771, 806,
	807, 808, 809, 810, 0, 772, 0, 333, 834, 835,
	334, 335, 336, 836, 811, 812, 0, 0, 337, 338,
	339, 0, 341, 340, 0, 813, 837, 342, 343, 838,
	0, 344, 345, 0, 0, 346, 0, 347, 716, 715,
	348, 349, 351, 760, 350, 839, 352, 353, 355, 354,
	711, 0, 840, 744, 785, 356, 814, 357, 358, 0,
	769, 770, 0, 0, 361, 362, 0, 0, 363, 248,
	841, 364, 842, 815, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 816, 373, 251, 374, 0, 375, 376,
	377, 378, 379, 817, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 843, 395, 396, 397, 398, 720, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 166, 411, 412,
	761, 762, 763, 764, 410, 413, 414, 780, 415, 400,
	401, 416, 844, 417, 818, 765, 418, 0, 426, 419,
	420, 421, 402, 422, 425, 819, 423, 0, 424, 820,
	0, 427, 428, 168, 429, 430, 431, 432, 433, 434,
	759, 436, 0, 821, 822, 823, 0, 0, 437, 438,
	824, 825, 742, 439, 440, 441, 442, 0, 0, 443,
	444, 445, 446, 781, 447, 0, 766, 448, 449, 450,
	1103, 826, 0, 0, 451, 270, 0, 0, 0, 160,
	452, 453, 271, 454, 455, 456, 712, 161, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 0, 0, 708,
	709, 748, 736, 737, 734, 735, 725, 0, 1309, 0,
	0, 0, 0, 0, 724, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 0, 0, 0, 783, 728, 0,
	0, 0, 277, 278, 279, 209, 790, 768, 791, 756,
	792, 793, 0, 281, 758, 757, 282, 283, 284, 731,
	782, 794, 795, 219, 0, 285, 787, 0, 773, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 829, 298, 299, 300,
	776, 774, 775, 779, 0, 777, 778, 301, 302, 474,
	303, 796, 304, 797, 798, 714, 305, 0, 306, 0,
	307, 0, 0, 789, 309, 0, 310, 0, 0, 0,
	719, 311, 312, 314, 315, 313, 316, 799, 800, 743,
	830, 0, 0, 0, 0, 0, 317, 318, 801, 802,
	803, 0, 319, 0, 320, 0, 0, 831, 321, 0,
	322, 804, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 784, 786, 833, 0, 767, 0, 0, 0, 332,
	0, 329, 0, 832, 330, 805, 771, 806, 807, 808,
	809, 810, 0, 772, 0, 333, 834, 835, 334, 335,
	336, 836, 811, 812, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 813, 837, 342, 343, 838, 0, 344,
	345, 0, 0, 346, 0, 347, 716, 715, 348, 349,
	351, 760, 350, 839, 352, 353, 355, 354, 711, 0,
	840, 744, 785, 356, 814, 357, 358, 0, 769, 770,
	0, 0, 361, 362, 0, 0, 363, 248, 841, 364,
	842, 815, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 816, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 817, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	843, 395, 396, 397, 398, 720, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 166, 411, 412, 761, 762,
	763, 764, 410, 413, 414, 780, 415, 400, 401, 416,
	844, 417, 818, 765, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 819, 423, 0, 424, 820, 0, 427,
	428, 168, 429, 430, 431, 432, 433, 434, 759, 436,
	0, 821, 822, 823, 0, 0, 437, 438, 824, 825,
	742, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 781, 447, 0, 766, 448, 449, 450, 1103, 826,
	0, 0, 451, 270, 0, 0, 0, 160, 452, 453,
	271, 454, 455, 456, 712, 161, 0, 0, 0, 0,
	0, 0, 710, 0, 0, 0, 0, 708, 709, 748,
	736, 737, 734, 735, 725, 0, 1309, 0, 0, 0,
	0, 0, 724, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 783, 728, 0, 0, 0,
	277, 278, 279, 209, 790, 768, 791, 756, 792, 793,
	1835, 281, 758, 757, 282, 283, 284, 731, 782, 794,
	795, 219, 0, 285, 787, 0, 773, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 829, 298, 299, 300, 776, 774,
	775, 779, 0, 777, 778, 301, 302, 474, 303, 796,
	304, 797, 798, 714, 305, 0, 306, 0, 307, 0,
	0, 789, 309, 0, 310, 0, 0, 0, 719, 311,
	312, 314, 315, 313, 316, 799, 800, 743, 830, 0,
	0, 0, 0, 0, 317, 318, 801, 802, 803, 0,
	319, 0, 320, 0, 1840, 831, 321, 0, 322, 804,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 784,
	786, 833, 0, 767, 0, 0, 0, 332, 0, 329,
	0, 832, 330, 805, 771, 806, 807, 808, 809, 810,
	0, 772, 0, 333, 834, 835, 334, 335, 336, 836,
	811, 812, 0, 0, 337, 338, 339, 0, 341, 340,
	1836, 813, 837, 342, 343, 838, 0, 344, 345, 0,
	0, 346, 0, 347, 716, 715, 348, 349, 351, 760,
	350, 839, 352, 353, 355, 354, 711, 0, 840, 744,
	785, 356, 814, 357, 358, 0, 769, 770, 0, 0,
	361, 362, 0, 0, 363, 248, 841, 364, 842, 815,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 816,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 817,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 843, 395,
	396, 397, 398, 720, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 761, 762, 763, 764,
	410, 413, 414, 780, 415, 400, 401, 416, 844, 417,
	818, 765, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 819, 423, 0, 424, 820, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 759, 436, 0, 821,
	822, 823, 0, 1837, 437, 438, 824, 825, 742, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 781,
	447, 0, 766, 448, 449, 450, 268, 826, 0, 0,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 712, 0, 0, 0, 0, 0, 0, 0,
	710, 0, 0, 0, 0, 708, 709, 748, 736, 737,
	734, 735, 725, 0, 721, 0, 0, 0, 0, 0,
	724, 0, 0, 272, 273, 274, 275, 0, 276, 0,
	0, 0, 0, 783, 728, 0, 0, 0, 277, 278,
	279, 209, 790, 768, 791, 756, 792, 793, 0, 281,
	758, 757, 282, 283, 284, 731, 782, 794, 795, 219,
	0, 285, 787, 0, 773, 0, 286, 287, 288, 289,
	290, 0, 292, 293, 294, 291, 0, 295, 0, 296,
	297, 0, 829, 298, 299, 300, 776, 774, 775, 779,
	0, 777, 778, 301, 302, 474, 303, 796, 304, 797,
	798, 714, 305, 0, 306, 0, 307, 0, 0, 789,
	309, 0, 310, 0, 0, 0, 719, 311, 312, 314,
	315, 313, 316, 799, 800, 743, 830, 0, 0, 0,
	0, 0, 317, 318, 801, 802, 803, 0, 319, 0,
	320, 0, 0, 831, 321, 0, 322, 804, 0, 231,
	0, 323, 324, 325, 326, 327, 328, 784, 786, 833,
	0, 767, 0, 0, 0, 332, 0, 329, 0, 832,
	330, 805, 771, 806, 807, 808, 809, 810, 0, 772,
	0, 333, 834, 835, 334, 335, 336, 836, 811, 812,
	0, 0, 337, 338, 339, 0, 341, 340, 0, 813,
	837, 342, 343, 838, 0, 344, 345, 0, 0, 346,
	0, 347, 716, 715, 348, 349, 351, 760, 350, 839,
	352, 353, 355, 354, 711, 2571, 840, 744, 785, 356,
	814, 357, 358, 0, 769, 770, 0, 0, 361, 362,
	0, 0, 363, 248, 841, 364, 842, 815, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 816, 373, 251,
	374, 0, 375, 376, 377, 378, 379, 817, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 843, 395, 396, 397,
	398, 720, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 411, 412, 761, 762, 763, 764, 410, 413,
	414, 780, 415, 400, 401, 416, 844, 417, 818, 765,
	418, 0, 426, 419, 420, 421, 402, 422, 425, 819,
	423, 0, 424, 820, 0, 427, 428, 0, 429, 430,
	431, 432, 433, 434, 759, 436, 0, 821, 822, 823,
	0, 0, 437, 438, 824, 825, 742, 439, 440, 441,
	442, 0, 0, 443, 444, 445, 446, 781, 447, 0,
	766, 448, 449, 450, 268, 826, 0, 0, 451, 270,
	0, 0, 0, 0, 452, 453, 271, 454, 455, 456,
	712, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	0, 0, 0, 708, 709, 1370, 748, 736, 737, 734,
	735, 725, 721, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 272, 273, 274, 275, 0, 276, 0, 0,
	0, 0, 783, 728, 0, 0, 0, 277, 278, 279,
	209, 790, 768, 791, 756, 792, 793, 0, 281, 758,
	757, 282, 283, 284, 731, 782, 794, 795, 219, 0,
	285, 787, 0, 773, 0, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 0, 295, 0, 296, 297,
	0, 829, 298, 299, 300, 776, 774, 775, 779, 0,
	777, 778, 301, 302, 474, 303, 796, 304, 797, 798,
	714, 305, 0, 306, 0, 307, 0, 0, 789, 309,
	0, 310, 0, 0, 0, 719, 311, 312, 314, 315,
	313, 316, 799, 800, 743, 830, 0, 0, 0, 0,
	0, 317, 318, 801, 802, 803, 0, 319, 0, 320,
	0, 0, 831, 321, 0, 322, 804, 0, 231, 0,
	323, 324, 325, 326, 327, 328, 784, 786, 833, 0,
	767, 0, 0, 0, 332, 1666, 329, 0, 832, 330,
	805, 771, 806, 807, 808, 809, 810, 0, 772, 0,
	333, 834, 835, 334, 335, 336, 836, 811, 812, 0,
	0, 337, 338, 339, 0, 341, 340, 0, 813, 837,
	342, 343, 838, 0, 344, 345, 0, 0, 346, 0,
	347, 716, 715, 348, 349, 351, 760, 350, 839, 352,
	353, 355, 354, 711, 0, 840, 744, 785, 356, 814,
	357, 358, 0, 769, 770, 0, 0, 361, 362, 0,
	0, 363, 248, 841, 364, 842, 815, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 816, 373, 251, 374,
	1665, 375, 376, 377, 378, 379, 817, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 843, 395, 396, 397, 398,
	720, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	0, 411, 412, 761, 762, 763, 764, 410, 413, 414,
	780, 415, 400, 401, 416, 844, 417, 818, 765, 418,
	0, 426, 419, 420, 421, 402, 422, 425, 819, 423,
	0, 424, 820, 0, 427, 428, 0, 429, 430, 431,
	432, 433, 434, 759, 436, 0, 821, 822, 823, 0,
	0, 437, 438, 824, 825, 742, 439, 440, 441, 442,
	0, 0, 443, 444, 445, 446, 781, 447, 0, 766,
	448, 449, 450, 268, 826, 0, 0, 451, 270, 0,
	0, 0, 0, 452, 453, 271, 454, 455, 456, 712,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	0, 0, 708, 709, 0, 0, 0, 0, 0, 0,
	0, 721, 0, 0, 0, 0, 704, 724, 748, 736,
	737, 734, 735, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 272, 273, 274, 275, 0, 276,
	0, 0, 0, 0, 783, 728, 0, 0, 0, 277,
	278, 279, 209, 790, 768, 791, 756, 792, 793, 0,
	281, 758, 757, 282, 283, 284, 731, 782, 794, 795,
	219, 0, 285, 787, 0, 773, 0, 286, 287, 288,
	289, 290, 0, 292, 293, 294, 291, 0, 295, 0,
	296, 297, 0, 829, 298, 299, 300, 776, 774, 775,
	779, 0, 777, 778, 301, 302, 474, 303, 796, 304,
	797, 798, 714, 305, 0, 306, 0, 307, 0, 0,
	789, 309, 0, 310, 0, 0, 0, 719, 311, 312,
	314, 315, 313, 316, 799, 800, 743, 830, 0, 0,
	0, 0, 0, 317, 318, 801, 802, 803, 0, 319,
	0, 320, 0, 0, 831, 321, 0, 322, 804, 0,
	231, 0, 323, 324, 325, 326, 327, 328, 784, 786,
	833, 0, 767, 0, 0, 0, 332, 0, 329, 0,
	832, 330, 805, 771, 806, 807, 808, 809, 810, 0,
	772, 0, 333, 834, 835, 334, 335, 336, 836, 811,
	812, 0, 0, 337, 338, 339, 0, 341, 340, 0,
	813, 837, 342, 343, 838, 0, 344, 345, 0, 0,
	346, 0, 347, 716, 715, 348, 349, 351, 760, 350,
	839, 352, 353, 355, 354, 711, 0, 840, 744, 785,
	356, 814, 357, 358, 0, 769, 770, 706, 0, 361,
	362, 0, 0, 363, 248, 841, 364, 842, 815, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 816, 373,
	251, 374, 0, 375, 376, 377, 378, 379, 817, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 0, 394, 843, 395, 396,
	397, 398, 720, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 0, 411, 412, 761, 762, 763, 764, 410,
	413, 414, 780, 415, 400, 401, 416, 844, 417, 818,
	765, 418, 0, 426, 419, 420, 421, 402, 422, 425,
	819, 423, 0, 424, 820, 0, 427, 428, 0, 429,
	430, 431, 432, 433, 434, 759, 436, 0, 821, 822,
	823, 0, 0, 437, 438, 824, 825, 742, 439, 440,
	441, 442, 0, 0, 443, 444, 445, 446, 781, 447,
	0, 766, 448, 449, 450, 268, 826, 0, 0, 451,
	270, 0, 0, 0, 0, 452, 453, 271, 454, 455,
	456, 712, 0, 0, 0, 0, 0, 0, 0, 710,
	0, 0, 0, 0, 708, 709, 748, 736, 737, 734,
	735, 725, 0, 721, 0, 0, 0, 0, 0, 724,
	0, 0, 272, 273, 274, 275, 0, 276, 0, 0,
	0, 0, 783, 728, 0, 0, 0, 277, 278, 279,
	209, 790, 768, 791, 756, 792, 793, 0, 281, 758,
	757, 282, 283, 284, 731, 782, 794, 795, 219, 0,
	285, 787, 0, 773, 0, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 0, 295, 0, 296, 297,
	0, 829, 298, 299, 300, 776, 774, 775, 779, 0,
	777, 778, 301, 302, 474, 303, 796, 304, 797, 798,
	714, 305, 0, 306, 0, 307, 0, 0, 789, 309,
	0, 310, 0, 0, 0, 719, 311, 312, 314, 315,
	313, 316, 799, 800, 743, 830, 0, 0, 0, 0,
	0, 317, 318, 801, 802, 803, 0, 319, 0, 320,
	0, 0, 831, 321, 0, 322, 804, 0, 231, 0,
	323, 324, 325, 326, 327, 328, 784, 786, 833, 0,
	767, 0, 0, 0, 332, 0, 329, 0, 832, 330,
	805, 771, 806, 807, 808, 809, 810, 0, 772, 0,
	333, 834, 835, 334, 335, 336, 836, 811, 812, 0,
	0, 337, 338, 339, 0, 341, 340, 0, 813, 837,
	342, 343, 838, 0, 344, 345, 0, 0, 346, 0,
	347, 716, 715, 348, 349, 351, 760, 350, 839, 352,
	353, 355, 354, 711, 0, 840, 744, 785, 356, 814,
	357, 358, 0, 769, 770, 0, 0, 361, 362, 0,
	0, 363, 248, 841, 364, 842, 815, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 816, 373, 251, 374,
	0, 375, 376, 377, 378, 379, 817, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 843, 395, 396, 397, 398,
	720, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	0, 411, 412, 761, 762, 763, 764, 410, 413, 414,
	780, 415, 400, 401, 416, 844, 417, 818, 765, 418,
	0, 426, 419, 420, 421, 402, 422, 425, 819, 423,
	0, 424, 820, 0, 427, 428, 0, 429, 430, 431,
	432, 433, 434, 759, 436, 0, 821, 822, 823, 0,
	0, 437, 438, 824, 825, 742, 439, 440, 441, 442,
	0, 0, 443, 444, 445, 446, 781, 447, 0, 766,
	448, 449, 450, 268, 826, 2406, 0, 451, 270, 0,
	0, 0, 0, 452, 453, 271, 454, 455, 456, 712,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	0, 0, 708, 709, 748, 736, 737, 734, 735, 725,
	0, 721, 0, 0, 0, 0, 0, 724, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	783, 728, 0, 0, 0, 277, 278, 279, 209, 790,
	768, 791, 756, 792, 793, 0, 281, 758, 757, 282,
	283, 284, 731, 782, 794, 795, 219, 0, 285, 787,
	0, 773, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 829,
	298, 299, 300, 776, 774, 775, 779, 0, 777, 778,
	301, 302, 474, 303, 796, 304, 797, 798, 714, 305,
	0, 306, 0, 307, 0, 0, 789, 309, 0, 310,
	0, 0, 0, 719, 311, 312, 314, 315, 313, 316,
	799, 800, 743, 830, 0, 0, 0, 0, 0, 317,
	318, 801, 802, 803, 0, 319, 0, 320, 0, 0,
	831, 321, 0, 322, 804, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 784, 786, 833, 0, 767, 0,
	0, 0, 332, 0, 329, 0, 832, 330, 805, 771,
	806, 807, 808, 809, 810, 0, 772, 0, 333, 834,
	835, 334, 335, 336, 836, 811, 812, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 813, 837, 342, 343,
	838, 0, 344, 345, 0, 0, 346, 0, 347, 716,
	715, 348, 349, 351, 760, 350, 839, 352, 353, 355,
	354, 711, 0, 840, 744, 785, 356, 814, 357, 358,
	0, 769, 770, 706, 0, 361, 362, 0, 0, 363,
	248, 841, 364, 842, 815, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 816, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 817, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 843, 395, 396, 397, 398, 720, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 761, 762, 763, 764, 410, 413, 414, 780, 415,
	400, 401, 416, 844, 417, 818, 765, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 819, 423, 0, 424,
	820, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 759, 436, 0, 821, 822, 823, 0, 0, 437,
	438, 824, 825, 742, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 781, 447, 0, 766, 448, 449,
	450, 268, 826, 0, 0, 451, 270, 0, 0, 0,
	0, 452, 453, 271, 454, 455, 456, 712, 0, 0,
	0, 0, 0, 0, 0, 710, 0, 0, 0, 0,
	708, 709, 748, 736, 737, 734, 735, 725, 0, 721,
	0, 0, 0, 0, 0, 724, 0, 0, 272, 273,
	274, 275, 0, 276, 0, 0, 0, 0, 783, 728,
	0, 0, 0, 277, 278, 279, 209, 790, 768, 791,
	756, 792, 793, 0, 281, 758, 757, 282, 283, 284,
	731, 782, 794, 795, 219, 0, 285, 787, 0, 773,
	0, 286, 287, 288, 289, 290, 0, 292, 293, 294,
	291, 0, 295, 0, 296, 297, 0, 829, 298, 299,
	300, 776, 774, 775, 779, 0, 777, 778, 301, 302,
	474, 303, 796, 304, 797, 798, 714, 305, 0, 306,
	0, 307, 0, 0, 789, 309, 0, 310, 0, 0,
	0, 719, 311, 312, 314, 315, 313, 316, 799, 800,
	743, 830, 0, 0, 0, 0, 0, 317, 318, 801,
	802, 803, 0, 319, 0, 320, 0, 0, 831, 321,
	0, 322, 804, 0, 231, 0, 323, 324, 325, 326,
	327, 328, 784, 786, 833, 0, 767, 0, 0, 0,
	332, 0, 329, 0, 832, 330, 805, 771, 806, 807,
	808, 809, 810, 0, 772, 0, 333, 834, 835, 334,
	335, 336, 836, 811, 812, 0, 0, 337, 338, 339,
	0, 341, 340, 0, 813, 837, 342, 343, 838, 0,
	344, 345, 0, 0, 346, 0, 347, 716, 715, 348,
	349, 351, 760, 350, 839, 352, 353, 355, 354, 711,
	0, 840, 744, 785, 356, 814, 357, 358, 0, 769,
	770, 0, 0, 361, 362, 0, 0, 363, 248, 841,
	364, 842, 815, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 816, 373, 251, 374, 0, 375, 376, 377,
	378, 379, 817, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 843, 395, 396, 397, 398, 720, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 411, 412, 761,
	762, 763, 764, 410, 413, 414, 780, 415, 400, 401,
	416, 844, 417, 818, 765, 418, 0, 426, 419, 420,
	421, 402, 422, 425, 819, 423, 0, 424, 820, 0,
	427, 428, 0, 429, 430, 431, 432, 433, 434, 759,
	436, 0, 821, 822, 823, 0, 0, 437, 438, 824,
	825, 742, 439, 440, 441, 442, 0, 0, 443, 444,
	445, 446, 781, 447, 0, 766, 448, 449, 450, 268,
	826, 0, 0, 451, 270, 0, 0, 0, 0, 452,
	453, 271, 454, 455, 456, 712, 0, 0, 0, 0,
	0, 0, 0, 710, 0, 0, 0, 0, 708, 709,
	1370, 748, 736, 737, 734, 735, 725, 721, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 0, 0, 0, 783, 728, 0,
	0, 0, 277, 278, 279, 209, 790, 768, 791, 756,
	792, 793, 0, 281, 758, 757, 282, 283, 284, 731,
	782, 794, 795, 219, 0, 285, 787, 0, 773, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 829, 298, 299, 300,
	776, 774, 775, 779, 0, 777, 778, 301, 302, 474,
	303, 796, 304, 797, 798, 714, 305, 0, 306, 0,
	307, 0, 0, 789, 309, 0, 310, 0, 0, 0,
	719, 311, 312, 314, 315, 313, 316, 799, 800, 743,
	830, 0, 0, 0, 0, 0, 317, 318, 801, 802,
	803, 0, 319, 0, 320, 0, 1840, 831, 321, 0,
	322, 804, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 784, 786, 833, 0, 767, 0, 0, 0, 332,
	0, 329, 0, 832, 330, 805, 771, 806, 807, 808,
	809, 810, 0, 772, 0, 333, 834, 835, 334, 335,
	336, 836, 811, 812, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 813, 837, 342, 343, 838, 0, 344,
	345, 0, 0, 346, 0, 347, 716, 715, 348, 349,
	351, 760, 350, 839, 352, 353, 355, 354, 711, 0,
	840, 744, 785, 356, 814, 357, 358, 0, 769, 770,
	0, 0, 361, 362, 0, 0, 363, 248, 841, 364,
	842, 815, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 816, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 817, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	843, 395, 396, 397, 398, 720, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 411, 412, 761, 762,
	763, 764, 410, 413, 414, 780, 415, 400, 401, 416,
	844, 417, 818, 765, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 819, 423, 0, 424, 820, 0, 427,
	428, 0, 429, 430, 431, 432, 433, 434, 759, 436,
	0, 821, 822, 823, 0, 0, 437, 438, 824, 825,
	742, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 781, 447, 0, 766, 448, 449, 450, 268, 826,
	0, 0, 451, 270, 0, 0, 0, 0, 452, 453,
	271, 454, 455, 456, 712, 0, 0, 0, 0, 0,
	0, 0, 710, 0, 0, 0, 0, 708, 709, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 1874, 724, 748, 736, 737, 734, 735, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	273, 274, 275, 0, 276, 0, 0, 0, 0, 783,
	728, 0, 0, 0, 277, 278, 279, 209, 790, 768,
	791, 756, 792, 793, 0, 281, 758, 757, 282, 283,
	284, 731, 782, 794, 795, 219, 0, 285, 787, 0,
	773, 0, 286, 287, 288, 289, 290, 0, 292, 293,
	294, 291, 0, 295, 0, 296, 297, 0, 829, 298,
	299, 300, 776, 774, 775, 779, 0, 777, 778, 301,
	302, 474, 303, 796, 304, 797, 798, 714, 305, 0,
	306, 0, 307, 0, 0, 789, 309, 0, 310, 0,
	0, 0, 719, 311, 312, 314, 315, 313, 316, 799,
	800, 743, 830, 0, 0, 0, 0, 0, 317, 318,
	801, 802, 803, 0, 319, 0, 320, 0, 0, 831,
	321, 0, 322, 804, 0, 231, 0, 323, 324, 325,
	326, 327, 328, 784, 786, 833, 0, 767, 0, 0,
	0, 332, 0, 329, 0, 832, 330, 805, 771, 806,
	807, 808, 809, 810, 0, 772, 0, 333, 834, 835,
	334, 335, 336, 836, 811, 812, 0, 0, 337, 338,
	339, 0, 341, 340, 0, 813, 837, 342, 343, 838,
	0, 344, 345, 0, 0, 346, 0, 347, 716, 715,
	348, 349, 351, 760, 350, 839, 352, 353, 355, 354,
	711, 0, 840, 744, 785, 356, 814, 357, 358, 0,
	769, 770, 0, 0, 361, 362, 0, 0, 363, 248,
	841, 364, 842, 815, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 816, 373, 251, 374, 0, 375, 376,
	377, 378, 379, 817, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 843, 395, 396, 397, 398, 720, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 411, 412,
	761, 762, 763, 764, 410, 413, 414, 780, 415, 400,
	401, 416, 844, 417, 818, 765, 418, 0, 426, 419,
	420, 421, 402, 422, 425, 819, 423, 0, 424, 820,
	0, 427, 428, 0, 429, 430, 431, 432, 433, 434,
	759, 436, 0, 821, 822, 823, 0, 0, 437, 438,
	824, 825, 742, 439, 440, 441, 442, 0, 0, 443,
	444, 445, 446, 781, 447, 0, 766, 448, 449, 450,
	268, 826, 0, 0, 451, 270, 0, 0, 0, 0,
	452, 453, 271, 454, 455, 456, 712, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 0, 0, 708,
	709, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 1828, 724, 748, 736, 737, 734, 735,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 783, 728, 0, 0, 0, 277, 278, 279, 209,
	790, 768, 791, 756, 792, 793, 0, 281, 758, 757,
	282, 283, 284, 731, 782, 794, 795, 219, 0, 285,
	787, 0, 773, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 776, 774, 775, 779, 0, 777,
	778, 301, 302, 474, 303, 796, 304, 797, 798, 714,
	305, 0, 306, 0, 307, 0, 0, 789, 309, 0,
	310, 0, 0, 0, 719, 311, 312, 314, 315, 313,
	316, 799, 800, 743, 830, 0, 0, 0, 0, 0,
	317, 318, 801, 802, 803, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 804, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 784, 786, 833, 0, 767,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 805,
	771, 806, 807, 808, 809, 810, 0, 772, 0, 333,
	834, 835, 334, 335, 336, 836, 811, 812, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 813, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	716, 715, 348, 349, 351, 760, 350, 839, 352, 353,
	355, 354, 711, 0, 840, 744, 785, 356, 814, 357,
	358, 0, 769, 770, 0, 0, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 815, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 816, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 817, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 720,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 761, 762, 763, 764, 410, 413, 414, 780,
	415, 400, 401, 416, 844, 417, 818, 765, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 819, 423, 0,
	424, 820, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 759, 436, 0, 821, 822, 823, 0, 0,
	437, 438, 824, 825, 742, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 781, 447, 0, 766, 448,
	449, 450, 268, 826, 0, 0, 451, 270, 0, 0,
	0, 0, 452, 453, 271, 454, 455, 456, 712, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 708, 709, 0, 0, 0, 0, 0, 0, 0,
	721, 0, 0, 0, 0, 1816, 724, 748, 736, 737,
	734, 735, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 273, 274, 275, 0, 276, 0,
	0, 0, 0, 783, 728, 0, 0, 0, 277, 278,
	279, 209, 790, 768, 791, 756, 792, 793, 0, 281,
	758, 757, 282, 283, 284, 731, 782, 794, 795, 219,
	0, 285, 787, 0, 773, 0, 286, 287, 288, 289,
	290, 0, 292, 293, 294, 291, 0, 295, 0, 296,
	297, 0, 829, 298, 299, 300, 776, 774, 775, 779,
	0, 777, 778, 301, 302, 474, 303, 796, 304, 797,
	798, 714, 305, 0, 306, 0, 307, 0, 0, 789,
	309, 0, 310, 0, 0, 0, 719, 311, 312, 314,
	315, 313, 316, 799, 800, 743, 830, 0, 0, 0,
	0, 0, 317, 318, 801, 802, 803, 0, 319, 0,
	320, 0, 0, 831, 321, 0, 322, 804, 0, 231,
	0, 323, 324, 325, 326, 327, 328, 784, 786, 833,
	0, 767, 0, 0, 0, 332, 0, 329, 0, 832,
	330, 805, 771, 806, 807, 808, 809, 810, 0, 772,
	0, 333, 834, 835, 334, 335, 336, 836, 811, 812,
	0, 0, 337, 338, 339, 0, 341, 340, 0, 813,
	837, 342, 343, 838, 0, 344, 345, 0, 0, 346,
	0, 347, 716, 715, 348, 349, 351, 760, 350, 839,
	352, 353, 355, 354, 711, 0, 840, 744, 785, 356,
	814, 357, 358, 0, 769, 770, 0, 0, 361, 362,
	0, 0, 363, 248, 841, 364, 842, 815, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 816, 373, 251,
	374, 0, 375, 376, 377, 378, 379, 817, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 843, 395, 396, 397,
	398, 720, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 411, 412, 761, 762, 763, 764, 410, 413,
	414, 780, 415, 400, 401, 416, 844, 417, 818, 765,
	418, 0, 426, 419, 420, 421, 402, 422, 425, 819,
	423, 0, 424, 820, 0, 427, 428, 0, 429, 430,
	431, 432, 433, 434, 759, 436, 0, 821, 822, 823,
	0, 0, 437, 438, 824, 825, 742, 439, 440, 441,
	442, 0, 0, 443, 444, 445, 446, 781, 447, 0,
	766, 448, 449, 450, 268, 826, 0, 0, 451, 270,
	0, 0, 0, 0, 452, 453, 271, 454, 455, 456,
	712, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	0, 0, 0, 708, 709, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 0, 1814, 724, 748,
	736, 737, 734, 735, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 783, 728, 0, 0, 0,
	277, 278, 279, 209, 790, 768, 791, 756, 792, 793,
	0, 281, 758, 757, 282, 283, 284, 731, 782, 794,
	795, 219, 0, 285, 787, 0, 773, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 829, 298, 299, 300, 776, 774,
	775, 779, 0, 777, 778, 301, 302, 474, 303, 796,
	304, 797, 798, 714, 305, 0, 306, 0, 307, 0,
	0, 789, 309, 0, 310, 0, 0, 0, 719, 311,
	312, 314, 315, 313, 316, 799, 800, 743, 830, 0,
	0, 0, 0, 0, 317, 318, 801, 802, 803, 0,
	319, 0, 320, 0, 0, 831, 321, 0, 322, 804,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 784,
	786, 833, 0, 767, 0, 0, 0, 332, 0, 329,
	0, 832, 330, 805, 771, 806, 807, 808, 809, 810,
	0, 772, 0, 333, 834, 835, 334, 335, 336, 836,
	811, 812, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 813, 837, 342, 343, 838, 0, 344, 345, 0,
	0, 346, 0, 347, 716, 715, 348, 349, 351, 760,
	350, 839, 352, 353, 355, 354, 711, 0, 840, 744,
	785, 356, 814, 357, 358, 0, 769, 770, 0, 0,
	361, 362, 0, 0, 363, 248, 841, 364, 842, 815,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 816,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 817,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 843, 395,
	396, 397, 398, 720, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 761, 762, 763, 764,
	410, 413, 414, 780, 415, 400, 401, 416, 844, 417,
	818, 765, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 819, 423, 0, 424, 820, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 759, 436, 0, 821,
	822, 823, 0, 0, 437, 438, 824, 825, 742, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 781,
	447, 0, 766, 448, 449, 450, 268, 826, 0, 0,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 712, 0, 0, 0, 0, 0, 0, 0,
	710, 0, 0, 0, 0, 708, 709, 0, 0, 0,
	0, 0, 0, 0, 721, 0, 0, 0, 0, 1812,
	724, 748, 736, 737, 734, 735, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 0, 0, 0, 783, 728, 0,
	0, 0, 277, 278, 279, 209, 790, 768, 791, 756,
	792, 793, 0, 281, 758, 757, 282, 283, 284, 731,
	782, 794, 795, 219, 0, 285, 787, 0, 773, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 829, 298, 299, 300,
	776, 774, 775, 779, 0, 777, 778, 301, 302, 474,
	303, 796, 304, 797, 798, 714, 305, 0, 306, 0,
	307, 0, 0, 789, 309, 0, 310, 0, 0, 0,
	719, 311, 312, 314, 315, 313, 316, 799, 800, 743,
	830, 0, 0, 0, 0, 0, 317, 318, 801, 802,
	803, 0, 319, 0, 320, 0, 0, 831, 321, 0,
	322, 804, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 784, 786, 833, 0, 767, 0, 0, 0, 332,
	0, 329, 0, 832, 330, 805, 771, 806, 807, 808,
	809, 810, 0, 772, 0, 333, 834, 835, 334, 335,
	336, 836, 811, 812, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 813, 837, 342, 343, 838, 0, 344,
	345, 0, 0, 346, 0, 347, 716, 715, 348, 349,
	351, 760, 350, 839, 352, 353, 355, 354, 711, 0,
	840, 744, 785, 356, 814, 357, 358, 0, 769, 770,
	0, 0, 361, 362, 0, 0, 363, 248, 841, 364,
	842, 815, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 816, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 817, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	843, 395, 396, 397, 398, 720, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 411, 412, 761, 762,
	763, 764, 410, 413, 414, 780, 415, 400, 401, 416,
	844, 417, 818, 765, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 819, 423, 0, 424, 820, 0, 427,
	428, 0, 429, 430, 431, 432, 433, 434, 759, 436,
	0, 821, 822, 823, 0, 0, 437, 438, 824, 825,
	742, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 781, 447, 0, 766, 448, 449, 450, 268, 826,
	0, 0, 451, 270, 0, 0, 0, 0, 452, 453,
	271, 454, 455, 456, 712, 0, 0, 0, 0, 0,
	0, 0, 710, 0, 0, 0, 0, 708, 709, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 1809, 724, 1801, 736, 737, 734, 735, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	273, 274, 275, 0, 276, 0, 0, 0, 0, 783,
	728, 0, 0, 0, 277, 278, 279, 209, 790, 768,
	791, 756, 792, 793, 0, 281, 758, 757, 282, 283,
	284, 731, 782, 794, 795, 219, 0, 285, 787, 0,
	773, 0, 286, 287, 288, 289, 290, 0, 292, 293,
	294, 291, 0, 295, 0, 296, 297, 0, 829, 298,
	299, 300, 776, 774, 775, 779, 0, 777, 778, 301,
	302, 474, 303, 796, 1804, 797, 798, 714, 305, 0,
	306, 0, 307, 0, 0, 789, 309, 0, 310, 0,
	0, 0, 719, 311, 312, 314, 315, 313, 316, 799,
	800, 743, 830, 0, 0, 0, 0, 0, 317, 318,
	801, 802, 803, 0, 319, 0, 320, 0, 0, 831,
	321, 0, 322, 804, 0, 231, 0, 323, 324, 1805,
	326, 327, 328, 784, 786, 833, 0, 767, 0, 0,
	0, 332, 0, 329, 0, 832, 330, 805, 771, 806,
	807, 808, 809, 810, 0, 772, 0, 333, 834, 835,
	334, 335, 336, 836, 811, 812, 0, 0, 337, 338,
	339, 0, 341, 340, 0, 813, 837, 342, 343, 838,
	0, 344, 345, 0, 0, 346, 0, 347, 716, 715,
	1806, 1803, 351, 760, 350, 839, 352, 353, 355, 354,
	711, 0, 840, 744, 785, 356, 814, 357, 358, 0,
	769, 770, 0, 0, 361, 362, 0, 0, 363, 248,
	841, 364, 842, 815, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 816, 373, 251, 374, 0, 375, 376,
	377, 378, 379, 817, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 843, 395, 396, 397, 398, 720, 399, 0,
	403, 404, 405, 406, 407, 408, 1807, 0, 411, 412,
	761, 762, 763, 764, 410, 413, 414, 780, 415, 400,
	401, 416, 844, 417, 818, 765, 418, 0, 426, 419,
	420, 421, 402, 422, 425, 819, 423, 0, 424, 820,
	0, 427, 428, 0, 429, 430, 431, 432, 433, 434,
	759, 436, 0, 821, 822, 823, 0, 0, 437, 438,
	824, 825, 742, 439, 440, 441, 442, 0, 0, 443,
	444, 445, 446, 781, 447, 0, 766, 448, 449, 450,
	268, 826, 0, 0, 451, 270, 0, 0, 0, 0,
	452, 453, 271, 454, 1802, 456, 712, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 0, 0, 708,
	709, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 1798, 724, 1801, 736, 737, 734, 735,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 783, 728, 0, 0, 0, 277, 278, 279, 209,
	790, 768, 791, 756, 792, 793, 0, 281, 758, 757,
	282, 283, 284, 731, 782, 794, 795, 219, 0, 285,
	787, 0, 773, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 776, 774, 775, 779, 0, 777,
	778, 301, 302, 474, 303, 796, 1804, 797, 798, 714,
	305, 0, 306, 0, 307, 0, 0, 789, 309, 0,
	310, 0, 0, 0, 719, 311, 312, 314, 315, 313,
	316, 799, 800, 743, 830, 0, 0, 0, 0, 0,
	317, 318, 801, 802, 803, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 804, 0, 231, 0, 323,
	324, 1805, 326, 327, 328, 784, 786, 833, 0, 767,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 805,
	771, 806, 807, 808, 809, 810, 0, 772, 0, 333,
	834, 835, 334, 335, 336, 836, 811, 812, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 813, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	716, 715, 1806, 1803, 351, 760, 350, 839, 352, 353,
	355, 354, 711, 0, 840, 744, 785, 356, 814, 357,
	358, 0, 769, 770, 0, 0, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 815, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 816, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 817, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 720,
	399, 0, 403, 404, 405, 406, 407, 408, 1807, 0,
	411, 412, 761, 762, 763, 764, 410, 413, 414, 780,
	415, 400, 401, 416, 844, 417, 818, 765, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 819, 423, 0,
	424, 820, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 759, 436, 0, 821, 822, 823, 0, 0,
	437, 438, 824, 825, 742, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 781, 447, 0, 766, 448,
	449, 450, 268, 826, 0, 0, 451, 270, 0, 0,
	0, 0, 452, 453, 271, 454, 1802, 456, 712, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 708, 709, 748, 736, 737, 734, 735, 725, 0,
	721, 0, 0, 0, 0, 0, 724, 0, 0, 272,
	273, 274, 275, 0, 276, 0, 0, 0, 0, 783,
	728, 0, 0, 0, 277, 278, 279, 209, 790, 768,
	791, 756, 792, 793, 0, 281, 758, 757, 282, 283,
	284, 731, 782, 794, 795, 219, 0, 285, 787, 0,
	773, 0, 286, 287, 288, 289, 290, 0, 292, 293,
	294, 291, 0, 295, 0, 296, 297, 0, 829, 298,
	299, 300, 776, 774, 775, 779, 0, 777, 778, 301,
	302, 474, 303, 796, 304, 797, 798, 714, 305, 0,
	306, 0, 307, 0, 0, 789, 309, 0, 310, 0,
	0, 0, 719, 311, 312, 314, 315, 313, 316, 799,
	800, 743, 830, 0, 0, 0, 0, 0, 317, 318,
	801, 802, 803, 0, 319, 0, 320, 0, 0, 831,
	321, 0, 322, 804, 0, 231, 0, 323, 324, 325,
	326, 327, 328, 784, 786, 833, 0, 767, 0, 0,
	0, 332, 0, 329, 0, 832, 330, 805, 771, 806,
	807, 808, 809, 810, 0, 772, 0, 333, 834, 835,
	334, 335, 336, 836, 811, 812, 0, 0, 337, 338,
	339, 0, 341, 340, 0, 813, 837, 342, 343, 838,
	0, 344, 345, 0, 0, 346, 0, 347, 716, 715,
	348, 349, 351, 760, 350, 839, 352, 353, 355, 354,
	711, 0, 840, 744, 785, 356, 814, 357, 358, 0,
	769, 770, 0, 0, 361, 362, 0, 0, 363, 248,
	841, 364, 842, 815, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 816, 373, 251, 374, 0, 375, 376,
	377, 378, 379, 817, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 843, 395, 396, 397, 398, 720, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 411, 412,
	761, 762, 763, 764, 410, 413, 414, 780, 415, 400,
	401, 416, 844, 417, 818, 765, 418, 0, 426, 419,
	420, 421, 402, 422, 425, 819, 423, 0, 424, 820,
	0, 427, 428, 0, 429, 430, 431, 432, 433, 434,
	759, 436, 0, 821, 822, 823, 0, 0, 437, 438,
	824, 825, 742, 439, 440, 441, 442, 0, 0, 443,
	444, 445, 446, 781, 447, 0, 766, 448, 449, 450,
	268, 826, 0, 0, 451, 270, 0, 0, 0, 0,
	452, 453, 271, 454, 455, 456, 712, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 0, 0, 708,
	709, 0, 0, 0, 0, 0, 1314, 0, 721, 0,
	0, 0, 0, 0, 724, 748, 736, 737, 734, 735,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 1653, 276, 0, 0, 0,
	0, 783, 728, 0, 0, 0, 277, 278, 279, 209,
	790, 768, 791, 756, 792, 793, 0, 281, 758, 757,
	282, 283, 284, 731, 782, 794, 795, 219, 0, 285,
	787, 0, 773, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 776, 774, 775, 779, 0, 777,
	778, 301, 302, 474, 303, 796, 304, 797, 798, 714,
	305, 0, 306, 0, 307, 0, 0, 789, 309, 0,
	310, 0, 0, 0, 719, 311, 312, 314, 315, 313,
	316, 799, 800, 743, 830, 0, 0, 0, 0, 0,
	317, 318, 801, 802, 803, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 804, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 784, 786, 833, 0, 767,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 805,
	771, 806, 807, 808, 809, 810, 0, 772, 0, 333,
	834, 835, 334, 335, 336, 836, 811, 812, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 813, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	716, 715, 348, 349, 351, 760, 350, 839, 352, 353,
	355, 354, 711, 0, 840, 744, 785, 356, 814, 357,
	358, 0, 769, 770, 0, 0, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 815, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 816, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 817, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 720,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 761, 762, 763, 764, 410, 413, 414, 780,
	415, 400, 401, 416, 844, 417, 818, 765, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 819, 423, 0,
	424, 820, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 759, 436, 0, 821, 822, 823, 0, 0,
	437, 438, 824, 825, 742, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 781, 447, 0, 766, 448,
	449, 450, 268, 826, 0, 0, 451, 270, 0, 0,
	0, 0, 452, 453, 271, 454, 455, 456, 712, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 708, 709, 0, 0, 0, 0, 0, 0, 0,
	721, 0, 0, 0, 0, 1032, 724, 748, 736, 737,
	734, 735, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 273, 274, 275, 0, 276, 0,
	0, 0, 0, 783, 728, 0, 0, 0, 277, 278,
	279, 209, 790, 768, 791, 756, 792, 793, 0, 281,
	758, 757, 282, 283, 284, 731, 782, 794, 795, 219,
	0, 285, 787, 0, 773, 0, 286, 287, 288, 289,
	290, 0, 292, 293, 294, 291, 0, 295, 0, 296,
	297, 0, 829, 298, 299, 300, 776, 774, 775, 779,
	0, 777, 778, 301, 302, 474, 303, 796, 304, 797,
	798, 714, 305, 0, 306, 0, 307, 0, 0, 789,
	309, 0, 310, 0, 0, 0, 719, 311, 312, 314,
	315, 313, 316, 799, 800, 743, 830, 0, 0, 0,
	0, 0, 317, 318, 801, 802, 803, 0, 319, 0,
	320, 0, 0, 831, 321, 0, 322, 804, 0, 231,
	0, 323, 324, 325, 326, 327, 328, 784, 786, 833,
	0, 767, 0, 0, 0, 332, 0, 329, 0, 832,
	330, 805, 771, 806, 807, 808, 809, 810, 0, 772,
	0, 333, 834, 835, 334, 335, 336, 836, 811, 812,
	0, 0, 337, 338, 339, 0, 341, 340, 0, 813,
	837, 342, 343, 838, 0, 344, 345, 0, 0, 346,
	0, 347, 716, 715, 348, 349, 351, 760, 350, 839,
	352, 353, 355, 354, 711, 0, 840, 744, 785, 356,
	814, 357, 358, 0, 769, 770, 0, 0, 361, 362,
	0, 0, 363, 248, 841, 364, 842, 815, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 816, 373, 251,
	374, 0, 375, 376, 377, 378, 379, 817, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 843, 395, 396, 397,
	398, 720, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 411, 412, 761, 762, 763, 764, 410, 413,
	414, 780, 415, 400, 401, 416, 844, 417, 818, 765,
	418, 0, 426, 419, 420, 421, 402, 422, 425, 819,
	423, 0, 424, 820, 0, 427, 428, 0, 429, 430,
	431, 432, 433, 434, 759, 436, 0, 821, 822, 823,
	0, 0, 437, 438, 824, 825, 742, 439, 440, 441,
	442, 0, 0, 443, 444, 445, 446, 781, 447, 0,
	766, 448, 449, 450, 268, 826, 0, 0, 451, 270,
	0, 0, 0, 0, 452, 453, 271, 454, 455, 456,
	712, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	0, 0, 0, 708, 709, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 0, 1030, 724, 748,
	736, 737, 734, 735, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 783, 728, 0, 0, 0,
	277, 278, 279, 209, 790, 768, 791, 756, 792, 793,
	0, 281, 758, 757, 282, 283, 284, 731, 782, 794,
	795, 219, 0, 285, 787, 0, 773, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 829, 298, 299, 300, 776, 774,
	775, 779, 0, 777, 778, 301, 302, 474, 303, 796,
	304, 797, 798, 714, 305, 0, 306, 0, 307, 0,
	0, 789, 309, 0, 310, 0, 0, 0, 719, 311,
	312, 314, 315, 313, 316, 799, 800, 743, 830, 0,
	0, 0, 0, 0, 317, 318, 801, 802, 803, 0,
	319, 0, 320, 0, 0, 831, 321, 0, 322, 804,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 784,
	786, 833, 0, 767, 0, 0, 0, 332, 0, 329,
	0, 832, 330, 805, 771, 806, 807, 808, 809, 810,
	0, 772, 0, 333, 834, 835, 334, 335, 336, 836,
	811, 812, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 813, 837, 342, 343, 838, 0, 344, 345, 0,
	0, 346, 0, 347, 716, 715, 348, 349, 351, 760,
	350, 839, 352, 353, 355, 354, 711, 0, 840, 744,
	785, 356, 814, 357, 358, 0, 769, 770, 0, 0,
	361, 362, 0, 0, 363, 248, 841, 364, 842, 815,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 816,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 817,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 843, 395,
	396, 397, 398, 720, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 761, 762, 763, 764,
	410, 413, 414, 780, 415, 400, 401, 416, 844, 417,
	818, 765, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 819, 423, 0, 424, 820, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 759, 436, 0, 821,
	822, 823, 0, 0, 437, 438, 824, 825, 742, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 781,
	447, 0, 766, 448, 449, 450, 268, 826, 0, 0,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 712, 0, 0, 0, 0, 0, 0, 0,
	710, 0, 0, 0, 0, 708, 709, 748, 736, 737,
	734, 735, 725, 0, 721, 0, 0, 0, 0, 0,
	724, 0, 0, 272, 273, 274, 275, 0, 276, 0,
	0, 0, 0, 783, 728, 0, 0, 0, 277, 278,
	279, 209, 790, 768, 791, 756, 792, 793, 0, 281,
	758, 757, 282, 283, 284, 731, 782, 794, 795, 219,
	0, 285, 787, 0, 773, 0, 286, 287, 288, 289,
	290, 0, 292, 293, 294, 291, 0, 295, 0, 296,
	297, 0, 829, 298, 299, 300, 776, 774, 775, 779,
	0, 777, 778, 301, 302, 474, 303, 796, 304, 797,
	798, 714, 305, 0, 306, 0, 307, 0, 0, 789,
	309, 0, 310, 0, 0, 0, 719, 311, 312, 314,
	315, 313, 316, 799, 800, 743, 830, 0, 0, 0,
	0, 0, 317, 318, 801, 802, 803, 0, 319, 0,
	320, 0, 0, 831, 321, 0, 322, 804, 0, 231,
	0, 323, 324, 325, 326, 327, 328, 784, 786, 833,
	0, 767, 0, 0, 0, 332, 0, 329, 0, 832,
	330, 805, 771, 806, 807, 808, 809, 810, 0, 772,
	0, 333, 834, 835, 334, 335, 336, 836, 811, 812,
	0, 0, 337, 338, 339, 0, 341, 340, 0, 813,
	837, 342, 343, 838, 0, 344, 345, 0, 0, 346,
	0, 347, 716, 715, 348, 349, 351, 760, 350, 839,
	352, 353, 355, 354, 711, 0, 840, 744, 785, 356,
	814, 357, 358, 0, 769, 770, 0, 0, 361, 362,
	0, 0, 363, 248, 841, 364, 842, 815, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 816, 373, 251,
	374, 0, 375, 376, 377, 378, 379, 817, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 843, 395, 396, 397,
	398, 720, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 411, 412, 761, 762, 763, 764, 410, 413,
	414, 780, 415, 400, 401, 416, 844, 417, 818, 765,
	418, 0, 426, 419, 420, 421, 402, 422, 425, 819,
	423, 0, 424, 820, 0, 427, 428, 0, 429, 430,
	431, 432, 433, 434, 759, 436, 0, 821, 822, 823,
	0, 0, 437, 438, 824, 825, 742, 439, 440, 441,
	442, 0, 0, 443, 444, 445, 446, 781, 447, 0,
	766, 448, 449, 450, 268, 826, 0, 0, 451, 270,
	0, 0, 0, 0, 452, 453, 271, 454, 455, 456,
	712, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	0, 0, 0, 708, 709, 748, 736, 737, 734, 735,
	725, 0, 721, 0, 0, 0, 0, 0, 724, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 783, 728, 0, 0, 0, 277, 278, 279, 209,
	790, 768, 791, 756, 792, 793, 0, 281, 758, 757,
	282, 283, 284, 731, 782, 794, 795, 219, 0, 285,
	787, 0, 773, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 2954, 776, 774, 775, 779, 0, 777,
	778, 301, 302, 474, 303, 796, 304, 797, 798, 714,
	305, 0, 306, 0, 307, 0, 0, 789, 309, 0,
	310, 0, 0, 0, 719, 311, 312, 314, 315, 313,
	316, 799, 800, 743, 830, 0, 0, 0, 0, 0,
	317, 318, 801, 802, 803, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 804, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 784, 786, 833, 0, 767,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 805,
	771, 806, 807, 808, 809, 810, 0, 772, 0, 333,
	834, 835, 334, 335, 336, 836, 811, 812, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 813, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	716, 715, 348, 349, 351, 760, 350, 839, 352, 353,
	355, 354, 711, 0, 840, 744, 785, 356, 814, 357,
	358, 0, 769, 770, 0, 0, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 815, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 816, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 817, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 720,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 761, 762, 763, 764, 410, 413, 414, 780,
	415, 400, 401, 416, 844, 417, 818, 765, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 819, 423, 0,
	424, 820, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 759, 436, 0, 821, 822, 823, 0, 0,
	437, 438, 824, 825, 742, 439, 440, 2953, 442, 0,
	0, 443, 444, 445, 446, 781, 447, 0, 766, 448,
	449, 450, 268, 826, 0, 0, 451, 270, 0, 0,
	0, 0, 452, 453, 271, 454, 455, 456, 712, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 708, 709, 748, 736, 737, 734, 735, 725, 0,
	721, 0, 0, 0, 0, 0, 724, 0, 0, 272,
	273, 274, 275, 0, 276, 0, 0, 0, 0, 783,
	728, 0, 0, 0, 277, 278, 279, 2952, 790, 768,
	791, 756, 792, 793, 0, 281, 758, 757, 282, 283,
	284, 731, 782, 794, 795, 219, 0, 285, 787, 0,
	773, 0, 286, 287, 288, 289, 290, 0, 292, 293,
	294, 291, 0, 295, 0, 296, 297, 0, 829, 298,
	299, 2954, 776, 774, 775, 779, 0, 777, 778, 301,
	302, 474, 303, 796, 304, 797, 798, 714, 305, 0,
	306, 0, 307, 0, 0, 789, 309, 0, 310, 0,
	0, 0, 719, 311, 312, 314, 315, 313, 316, 799,
	800, 743, 830, 0, 0, 0, 0, 0, 317, 318,
	801, 802, 803, 0, 319, 0, 320, 0, 0, 831,
	321, 0, 322, 804, 0, 231, 0, 323, 324, 325,
	326, 327, 328, 784, 786, 833, 0, 767, 0, 0,
	0, 332, 0, 329, 0, 832, 330, 805, 771, 806,
	807, 808, 809, 810, 0, 772, 0, 333, 834, 835,
	334, 335, 336, 836, 811, 812, 0, 0, 337, 338,
	339, 0, 341, 340, 0, 813, 837, 342, 343, 838,
	0, 344, 345, 0, 0, 346, 0, 347, 716, 715,
	348, 349, 351, 760, 350, 839, 352, 353, 355, 354,
	711, 0, 840, 744, 785, 356, 814, 357, 358, 0,
	769, 770, 0, 0, 361, 362, 0, 0, 363, 248,
	841, 364, 842, 815, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 816, 373, 251, 374, 0, 375, 376,
	377, 378, 379, 817, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 843, 395, 396, 397, 398, 720, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 411, 412,
	761, 762, 763, 764, 410, 413, 414, 780, 415, 400,
	401, 416, 844, 417, 818, 765, 418, 0, 426, 419,
	420, 421, 402, 422, 425, 819, 423, 0, 424, 820,
	0, 427, 428, 0, 429, 430, 431, 432, 433, 434,
	759, 436, 0, 821, 822, 823, 0, 0, 437, 438,
	824, 825, 742, 439, 440, 2953, 442, 0, 0, 443,
	444, 445, 446, 781, 447, 0, 766, 448, 449, 450,
	268, 826, 0, 0, 451, 270, 0, 0, 0, 0,
	452, 453, 271, 454, 455, 456, 712, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 0, 0, 708,
	709, 748, 736, 737, 734, 735, 725, 0, 721, 0,
	0, 0, 0, 0, 724, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 0, 0, 0, 783, 728, 0,
	0, 0, 277, 278, 279, 209, 790, 768, 791, 756,
	792, 793, 0, 281, 758, 757, 282, 283, 284, 731,
	782, 794, 795, 219, 0, 285, 787, 0, 773, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 829, 298, 299, 300,
	776, 774, 775, 779, 0, 777, 778, 301, 302, 474,
	303, 796, 304, 797, 798, 0, 305, 0, 306, 0,
	307, 0, 0, 789, 309, 0, 310, 0, 0, 0,
	719, 311, 312, 314, 315, 313, 316, 799, 800, 743,
	830, 0, 0, 0, 0, 0, 317, 318, 801, 802,
	803, 0, 319, 0, 320, 0, 0, 831, 321, 0,
	322, 804, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 784, 786, 833, 0, 767, 0, 0, 0, 332,
	0, 329, 0, 832, 330, 805, 771, 806, 807, 808,
	809, 810, 0, 772, 0, 333, 834, 835, 334, 335,
	336, 836, 811, 812, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 813, 837, 342, 343, 838, 0, 344,
	345, 0, 0, 346, 0, 347, 898, 897, 348, 349,
	351, 760, 350, 839, 352, 353, 355, 354, 0, 0,
	840, 744, 785, 356, 814, 357, 358, 0, 769, 770,
	0, 0, 361, 362, 0, 0, 363, 248, 841, 364,
	842, 815, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 816, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 817, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	843, 395, 396, 397, 398, 1826, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 411, 412, 761, 762,
	763, 764, 410, 413, 414, 780, 415, 400, 401, 416,
	844, 417, 818, 765, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 819, 423, 0, 424, 820, 0, 427,
	428, 0, 429, 430, 431, 432, 433, 434, 759, 436,
	0, 821, 822, 823, 0, 0, 437, 438, 824, 825,
	742, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 781, 447, 0, 766, 448, 449, 450, 268, 826,
	0, 0, 451, 270, 0, 0, 0, 0, 452, 453,
	271, 454, 455, 456, 748, 736, 737, 734, 735, 725,
	0, 0, 1824, 0, 0, 0, 0, 1822, 1823, 0,
	272, 273, 274, 275, 0, 276, 1825, 0, 0, 0,
	783, 728, 724, 0, 0, 277, 278, 279, 0, 790,
	768, 791, 756, 792, 793, 0, 281, 758, 757, 282,
	283, 284, 731, 782, 794, 795, 219, 0, 285, 787,
	0, 773, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 829,
	298, 299, 2954, 776, 774, 775, 779, 0, 777, 778,
	301, 302, 474, 303, 796, 304, 797, 798, 714, 305,
	0, 306, 0, 307, 0, 0, 789, 309, 0, 310,
	0, 0, 0, 719, 311, 312, 314, 315, 313, 316,
	799, 800, 743, 830, 0, 0, 0, 0, 0, 317,
	318, 801, 802, 803, 0, 319, 0, 320, 0, 0,
	831, 321, 0, 322, 804, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 784, 786, 0, 0, 767, 0,
	0, 0, 332, 0, 329, 0, 832, 330, 805, 771,
	806, 807, 808, 809, 810, 0, 772, 0, 333, 0,
	0, 334, 335, 336, 836, 811, 812, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 813, 837, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 716,
	715, 348, 349, 351, 760, 350, 839, 352, 353, 355,
	354, 711, 0, 0, 744, 785, 356, 814, 357, 358,
	0, 769, 770, 0, 0, 361, 362, 0, 0, 363,
	248, 841, 364, 842, 815, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 816, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 817, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 843, 395, 396, 397, 398, 720, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 761, 762, 763, 764, 410, 413, 414, 780, 415,
	400, 401, 416, 0, 417, 818, 765, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 819, 423, 0, 424,
	820, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 759, 436, 0, 821, 822, 823, 0, 0, 437,
	438, 824, 825, 742, 439, 440, 2953, 442, 0, 0,
	443, 444, 445, 446, 781, 447, 0, 766, 448, 449,
	450, 268, 826, 0, 0, 451, 270, 0, 0, 0,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 696, 0, 894, 0, 0, 0, 0,
	708, 709, 0, 0, 0, 0, 0, 0, 0, 721,
	0, 272, 273, 274, 275, 724, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 896, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 0, 890, 891, 0, 0, 892,
	893, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 799, 800, 0, 830, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 804, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 833, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	834, 835, 334, 335, 336, 836, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 813, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	898, 897, 348, 349, 351, 245, 350, 839, 352, 353,
	355, 354, 0, 0, 840, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 888, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 815, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 816, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 166,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 844, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 820, 0, 427, 428, 168, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 824, 825, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 1103, 269, 0, 0, 451, 270, 0, 0,
	894, 160, 452, 453, 271, 454, 455, 456, 0, 161,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 880, 0,
	1394, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 896, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 829, 298, 299, 300, 0,
	890, 891, 0, 0, 892, 893, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 799, 800, 0, 830,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 831, 321, 0, 322,
	804, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 833, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 832, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 834, 835, 334, 335, 336,
	836, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 813, 837, 342, 343, 838, 0, 344, 345,
	0, 0, 346, 0, 347, 898, 897, 348, 349, 351,
	245, 350, 839, 352, 353, 355, 354, 0, 0, 840,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	888, 361, 362, 0, 0, 363, 248, 841, 364, 842,
	815, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	816, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 843,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 166, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 844,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 820, 0, 427, 428,
	168, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 824, 825, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 1103, 269, 0,
	0, 451, 270, 0, 0, 894, 160, 452, 453, 271,
	454, 455, 456, 0, 161, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 783, 0, 880, 0, 1394, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 782, 217, 218, 219, 0, 285,
	787, 0, 773, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 776, 774, 775, 779, 0, 777,
	778, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 799, 800, 0, 830, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 804, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 784, 786, 833, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	834, 835, 334, 335, 336, 836, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 813, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	898, 897, 348, 349, 351, 245, 350, 839, 352, 353,
	355, 354, 0, 0, 840, 0, 785, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 815, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 816, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 780,
	415, 400, 401, 416, 844, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 820, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 824, 825, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 781, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 2198, 0,
	894, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	2507, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 896, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 829, 298, 299, 300, 0,
	890, 891, 0, 0, 892, 893, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 799, 800, 0, 830,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 831, 321, 0, 322,
	804, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 833, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 832, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 834, 835, 334, 335, 336,
	836, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 813, 837, 342, 343, 838, 0, 344, 345,
	0, 0, 346, 0, 347, 898, 897, 348, 349, 351,
	245, 350, 839, 352, 353, 355, 354, 0, 0, 840,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	888, 361, 362, 0, 0, 363, 248, 841, 364, 842,
	815, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	816, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 843,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 844,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 820, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 824, 825, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 879, 0, 894, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 880, 0, 886, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 896, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 0, 890, 891, 0, 0, 892,
	893, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 799, 800, 0, 830, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 804, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 833, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	834, 835, 334, 335, 336, 836, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 813, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	898, 897, 348, 349, 351, 245, 350, 839, 352, 353,
	355, 354, 0, 0, 840, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 888, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 815, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 816, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 844, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 820, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 824, 825, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 0, 0,
	894, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 880, 0,
	886, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 896, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 829, 298, 299, 300, 0,
	890, 891, 0, 0, 892, 893, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 799, 800, 0, 830,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 831, 321, 0, 322,
	804, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 833, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 832, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 834, 835, 334, 335, 336,
	836, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 813, 837, 342, 343, 838, 0, 344, 345,
	0, 0, 346, 0, 347, 898, 897, 348, 349, 351,
	245, 350, 839, 352, 353, 355, 354, 0, 0, 840,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	888, 361, 362, 0, 0, 363, 248, 841, 364, 842,
	815, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	816, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 843,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 844,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 820, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 824, 825, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 1100, 0, 919, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 880, 0, 886, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 896, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 830, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 833, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	834, 835, 334, 335, 336, 836, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	898, 897, 348, 349, 351, 245, 350, 839, 352, 353,
	355, 354, 0, 0, 840, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 166,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 844, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 168, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 1103, 269, 0, 0, 451, 270, 696, 0,
	471, 160, 452, 453, 271, 454, 455, 456, 0, 161,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	133, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 166, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	168, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 1103, 269, 0,
	0, 451, 270, 0, 0, 0, 160, 452, 453, 271,
	454, 455, 456, 0, 161, 748, 736, 737, 734, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 133, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	790, 768, 791, 756, 792, 793, 0, 281, 758, 757,
	282, 283, 284, 0, 0, 794, 795, 219, 0, 285,
	220, 0, 896, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	829, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 796, 304, 797, 798, 0,
	305, 0, 306, 0, 307, 0, 0, 789, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 743, 830, 0, 0, 0, 0, 0,
	317, 318, 801, 802, 803, 0, 319, 0, 320, 0,
	0, 831, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 833, 0, 767,
	0, 0, 0, 332, 0, 329, 0, 832, 330, 805,
	771, 806, 807, 808, 809, 810, 0, 772, 0, 333,
	834, 835, 334, 335, 336, 836, 811, 812, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 837, 342,
	343, 838, 0, 344, 345, 0, 0, 346, 0, 347,
	898, 897, 348, 349, 351, 760, 350, 839, 352, 353,
	355, 354, 0, 0, 840, 744, 246, 356, 814, 357,
	358, 0, 769, 770, 0, 0, 361, 362, 0, 0,
	363, 248, 841, 364, 842, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 817, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 843, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 761, 762, 763, 764, 410, 413, 414, 0,
	415, 400, 401, 416, 844, 417, 818, 765, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 819, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 759, 436, 0, 821, 822, 823, 0, 0,
	437, 438, 265, 266, 742, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 766, 448,
	449, 450, 268, 826, 471, 0, 451, 270, 0, 0,
	0, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 232, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 350, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 0, 0, 471,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 1999,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 232,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 0, 0, 471, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 2421, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 232, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 350, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 0, 0, 0,
	0, 452, 453, 271, 454, 455, 456, 1171, 0, 919,
	918, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 1398,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 896, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 829, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 830, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 831, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 232,
	233, 833, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 832, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 834, 835, 334, 335, 336, 836,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 837, 342, 343, 838, 0, 344, 345, 0,
	0, 346, 0, 347, 898, 897, 348, 349, 351, 245,
	350, 839, 352, 353, 355, 354, 0, 0, 840, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 841, 364, 842, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 843, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 844, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 1096, 0, 919, 918, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 896, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 829,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 830, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	831, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 1095, 233, 833, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 832, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 834,
	835, 334, 335, 336, 836, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 837, 342, 343,
	838, 0, 344, 345, 0, 0, 346, 0, 347, 898,
	897, 348, 349, 351, 245, 350, 839, 352, 353, 355,
	354, 0, 0, 840, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 841, 364, 842, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 843, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 844, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 0, 0, 0,
	0, 452, 453, 271, 454, 455, 456, 1092, 0, 919,
	918, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 896, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 829, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 830, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 831, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 1091,
	233, 833, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 832, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 834, 835, 334, 335, 336, 836,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 837, 342, 343, 838, 0, 344, 345, 0,
	0, 346, 0, 347, 898, 897, 348, 349, 351, 245,
	350, 839, 352, 353, 355, 354, 0, 0, 840, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 841, 364, 842, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 843, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 844, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 1053, 0, 919, 918, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 896, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 829,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 830, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	831, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 1052, 233, 833, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 832, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 834,
	835, 334, 335, 336, 836, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 837, 342, 343,
	838, 0, 344, 345, 0, 0, 346, 0, 347, 898,
	897, 348, 349, 351, 245, 350, 839, 352, 353, 355,
	354, 0, 0, 840, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 841, 364, 842, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 843, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 844, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 0, 0, 0,
	0, 452, 453, 271, 454, 455, 456, 1050, 0, 919,
	918, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 896, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 829, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 830, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 831, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 1049,
	233, 833, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 832, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 834, 835, 334, 335, 336, 836,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 837, 342, 343, 838, 0, 344, 345, 0,
	0, 346, 0, 347, 898, 897, 348, 349, 351, 245,
	350, 839, 352, 353, 355, 354, 0, 0, 840, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 841, 364, 842, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 843, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 844, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 912, 0, 919, 918, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 896, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 829,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 830, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	831, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 914, 233, 833, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 832, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 834,
	835, 334, 335, 336, 836, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 837, 342, 343,
	838, 0, 344, 345, 0, 0, 346, 0, 347, 898,
	897, 348, 349, 351, 245, 350, 839, 352, 353, 355,
	354, 0, 0, 840, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 841, 364, 842, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 843, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 844, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 919, 918, 451, 270, 0, 916, 0,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 272,
	273, 274, 275, 0, 276, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 277, 278, 279, 209, 210, 211,
	212, 280, 213, 214, 0, 281, 215, 216, 282, 283,
	284, 0, 0, 217, 218, 219, 0, 285, 220, 0,
	896, 0, 286, 287, 288, 289, 290, 0, 292, 293,
	294, 291, 0, 295, 0, 296, 297, 0, 829, 298,
	299, 300, 0, 0, 0, 0, 0, 0, 0, 301,
	302, 474, 303, 221, 304, 222, 223, 0, 305, 0,
	306, 0, 307, 0, 0, 308, 309, 0, 310, 0,
	0, 0, 224, 311, 312, 314, 315, 313, 316, 225,
	226, 0, 830, 0, 0, 0, 0, 0, 317, 318,
	227, 228, 229, 0, 319, 0, 320, 0, 0, 831,
	321, 0, 322, 230, 0, 231, 0, 323, 324, 325,
	326, 327, 328, 232, 233, 833, 0, 234, 0, 0,
	0, 332, 0, 329, 0, 832, 330, 235, 331, 236,
	237, 238, 239, 240, 0, 241, 0, 333, 834, 835,
	334, 335, 336, 836, 242, 243, 0, 0, 337, 338,
	339, 0, 341, 340, 0, 244, 837, 342, 343, 838,
	0, 344, 345, 0, 0, 346, 0, 347, 898, 897,
	348, 349, 351, 245, 350, 839, 352, 353, 355, 354,
	0, 0, 840, 0, 246, 356, 247, 357, 358, 0,
	359, 360, 0, 0, 361, 362, 0, 0, 363, 248,
	841, 364, 842, 249, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 250, 373, 251, 374, 0, 375, 376,
	377, 378, 379, 252, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 843, 395, 396, 397, 398, 253, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 411, 412,
	254, 255, 256, 257, 410, 413, 414, 0, 415, 400,
	401, 416, 844, 417, 258, 259, 418, 0, 426, 419,
	420, 421, 402, 422, 425, 260, 423, 0, 424, 261,
	0, 427, 428, 0, 429, 430, 431, 432, 433, 434,
	435, 436, 0, 262, 263, 264, 0, 0, 437, 438,
	265, 266, 0, 439, 440, 441, 442, 0, 0, 443,
	444, 445, 446, 0, 447, 0, 267, 448, 449, 450,
	268, 269, 919, 918, 451, 270, 0, 0, 0, 0,
	452, 453, 271, 454, 455, 456, 0, 0, 272, 273,
	274, 275, 0, 276, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 277, 278, 279, 209, 210, 211, 212,
	280, 213, 214, 0, 281, 215, 216, 282, 283, 284,
	0, 0, 217, 218, 219, 0, 285, 220, 0, 896,
	0, 286, 287, 288, 289, 290, 0, 292, 293, 294,
	291, 0, 295, 0, 296, 297, 0, 829, 298, 299,
	300, 0, 0, 0, 0, 0, 0, 0, 301, 302,
	474, 303, 221, 304, 222, 223, 0, 305, 0, 306,
	0, 307, 0, 0, 308, 309, 0, 310, 0, 0,
	0, 224, 311, 312, 314, 315, 313, 316, 225, 226,
	0, 830, 0, 0, 0, 0, 0, 317, 318, 227,
	228, 229, 0, 319, 0, 320, 0, 0, 831, 321,
	0, 322, 230, 0, 231, 0, 323, 324, 325, 326,
	327, 328, 232, 233, 833, 0, 234, 0, 0, 0,
	332, 0, 329, 0, 832, 330, 235, 331, 236, 237,
	238, 239, 240, 0, 241, 0, 333, 834, 835, 334,
	335, 336, 836, 242, 243, 0, 0, 337, 338, 339,
	0, 341, 340, 0, 244, 837, 342, 343, 838, 0,
	344, 345, 0, 0, 346, 0, 347, 898, 897, 348,
	349, 351, 245, 350, 839, 352, 353, 355, 354, 0,
	0, 840, 0, 246, 356, 247, 357, 358, 0, 359,
	360, 0, 0, 361, 362, 0, 0, 363, 248, 841,
	364, 842, 249, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 250, 373, 251, 374, 0, 375, 376, 377,
	378, 379, 252, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 843, 395, 396, 397, 398, 253, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 411, 412, 254,
	255, 256, 257, 410, 413, 414, 0, 415, 400, 401,
	416, 844, 417, 258, 259, 418, 0, 426, 419, 420,
	421, 402, 422, 425, 260, 423, 0, 424, 261, 0,
	427, 428, 0, 429, 430, 431, 432, 433, 434, 435,
	436, 0, 262, 263, 264, 0, 0, 437, 438, 265,
	266, 0, 439, 440, 441, 442, 0, 0, 443, 444,
	445, 446, 0, 447, 0, 267, 448, 449, 450, 268,
	269, 919, 0, 451, 270, 0, 0, 0, 0, 452,
	453, 271, 454, 455, 456, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 277, 278, 279, 209, 210, 211, 212, 280,
	213, 214, 0, 281, 215, 216, 282, 283, 284, 0,
	0, 217, 218, 219, 0, 285, 220, 0, 896, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 829, 298, 299, 300,
	0, 0, 0, 0, 0, 0, 0, 301, 302, 474,
	303, 221, 304, 222, 223, 0, 305, 0, 306, 0,
	307, 0, 0, 308, 309, 0, 310, 0, 0, 0,
	224, 311, 312, 314, 315, 313, 316, 225, 226, 0,
	830, 0, 0, 0, 0, 0, 317, 318, 227, 228,
	229, 0, 319, 0, 320, 0, 0, 831, 321, 0,
	322, 230, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 232, 233, 833, 0, 234, 0, 0, 0, 332,
	0, 329, 0, 832, 330, 235, 331, 236, 237, 238,
	239, 240, 0, 241, 0, 333, 834, 835, 334, 335,
	336, 836, 242, 243, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 244, 837, 342, 343, 838, 0, 344,
	345, 0, 0, 346, 0, 347, 898, 897, 348, 349,
	351, 245, 350, 839, 352, 353, 355, 354, 0, 0,
	840, 0, 246, 356, 247, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 248, 841, 364,
	842, 249, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 250, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 252, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	843, 395, 396, 397, 398, 253, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 411, 412, 254, 255,
	256, 257, 410, 413, 414, 0, 415, 400, 401, 416,
	844, 417, 258, 259, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 260, 423, 0, 424, 261, 0, 427,
	428, 0, 429, 430, 431, 432, 433, 434, 435, 436,
	0, 262, 263, 264, 0, 0, 437, 438, 265, 266,
	0, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 0, 447, 0, 267, 448, 449, 450, 268, 269,
	0, 0, 451, 270, 568, 0, 201, 0, 452, 453,
	271, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 272, 273, 274, 275, 0, 276, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 277, 278, 279,
	209, 210, 211, 212, 280, 213, 214, 0, 281, 215,
	216, 282, 283, 284, 0, 0, 217, 218, 219, 0,
	285, 220, 0, 0, 0, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 0, 295, 0, 296, 297,
	0, 0, 298, 299, 300, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 207, 303, 221, 304, 222, 223,
	0, 305, 0, 306, 0, 307, 0, 0, 308, 309,
	0, 310, 0, 0, 0, 224, 311, 312, 314, 315,
	313, 316, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 227, 228, 229, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 230, 0, 231, 0,
	323, 324, 325, 326, 327, 328, 232, 233, 0, 0,
	234, 0, 0, 0, 332, 0, 329, 0, 0, 330,
	235, 331, 236, 237, 238, 239, 240, 0, 241, 0,
	333, 0, 0, 334, 335, 336, 0, 242, 243, 0,
	0, 337, 338, 339, 0, 341, 340, 0, 244, 0,
	342, 343, 0, 0, 344, 345, 0, 0, 346, 0,
	347, 0, 0, 348, 349, 351, 245, 350, 0, 352,
	353, 355, 354, 0, 0, 0, 0, 246, 356, 247,
	357, 358, 0, 359, 360, 0, 0, 361, 362, 0,
	0, 363, 248, 0, 364, 0, 249, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 250, 373, 251, 374,
	0, 375, 376, 377, 378, 379, 252, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	253, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	0, 411, 412, 254, 255, 256, 257, 410, 413, 414,
	0, 415, 400, 401, 416, 0, 417, 258, 259, 418,
	0, 426, 419, 420, 421, 402, 422, 425, 260, 423,
	0, 424, 261, 0, 427, 428, 206, 429, 430, 431,
	432, 433, 434, 435, 436, 0, 262, 263, 264, 0,
	0, 437, 438, 265, 266, 0, 439, 440, 441, 442,
	0, 0, 443, 444, 445, 446, 0, 447, 0, 267,
	448, 449, 450, 268, 269, 0, 0, 451, 270, 200,
	0, 201, 0, 452, 453, 271, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 459, 0, 0, 208, 0, 0,
	0, 0, 277, 278, 279, 209, 210, 211, 212, 280,
	213, 214, 0, 281, 215, 216, 282, 283, 284, 0,
	0, 217, 218, 219, 0, 285, 220, 0, 0, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 0, 298, 299, 300,
	0, 0, 0, 0, 0, 0, 0, 301, 302, 207,
	303, 221, 304, 222, 223, 0, 305, 0, 306, 0,
	307, 0, 0, 308, 309, 0, 310, 0, 0, 0,
	224, 311, 312, 314, 315, 313, 316, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 227, 228,
	229, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 230, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 232, 233, 0, 0, 234, 0, 0, 0, 332,
	0, 329, 0, 0, 330, 235, 331, 236, 237, 238,
	239, 240, 0, 241, 0, 333, 0, 0, 334, 335,
	336, 0, 242, 243, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 244, 0, 342, 343, 0, 0, 344,
	345, 0, 0, 346, 0, 347, 0, 0, 348, 349,
	351, 245, 350, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 246, 356, 247, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 248, 0, 364,
	0, 249, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 250, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 252, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 253, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 411, 412, 254, 255,
	256, 257, 410, 413, 414, 0, 415, 400, 401, 416,
	0, 417, 258, 259, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 260, 423, 0, 424, 261, 0, 427,
	428, 206, 429, 430, 431, 432, 433, 434, 435, 436,
	0, 262, 263, 264, 0, 0, 437, 438, 265, 266,
	0, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 0, 447, 0, 267, 448, 449, 450, 268, 269,
	201, 0, 451, 270, 0, 0, 0, 0, 452, 453,
	271, 454, 455, 456, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 459,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 207, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	1622, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	206, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 201,
	0, 451, 270, 0, 0, 0, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 459, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 207, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 232,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 206,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 471, 0,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 272, 273, 274, 275, 0, 276,
	0, 0, 0, 0, 208, 0, 0, 459, 0, 277,
	278, 279, 209, 210, 211, 212, 280, 213, 214, 0,
	281, 215, 216, 282, 283, 284, 0, 0, 217, 218,
	219, 0, 285, 220, 0, 0, 0, 286, 287, 288,
	289, 290, 0, 292, 293, 294, 291, 0, 295, 0,
	296, 297, 0, 0, 298, 299, 300, 0, 0, 0,
	0, 0, 0, 0, 301, 302, 474, 303, 221, 304,
	222, 223, 0, 305, 0, 306, 0, 307, 0, 0,
	308, 309, 0, 310, 0, 0, 0, 224, 311, 312,
	314, 315, 313, 316, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 227, 228, 229, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 230, 0,
	231, 0, 323, 324, 325, 326, 327, 328, 232, 233,
	0, 0, 234, 0, 0, 0, 332, 0, 329, 0,
	0, 330, 235, 331, 236, 237, 238, 239, 240, 0,
	241, 0, 333, 0, 0, 334, 335, 336, 0, 242,
	243, 0, 0, 337, 338, 339, 0, 341, 340, 0,
	244, 0, 342, 343, 0, 0, 344, 345, 0, 0,
	346, 0, 347, 0, 0, 348, 349, 351, 245, 350,
	0, 352, 353, 355, 354, 0, 0, 0, 0, 246,
	356, 247, 357, 358, 0, 359, 360, 0, 0, 361,
	362, 0, 0, 363, 248, 0, 364, 0, 249, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 250, 373,
	251, 374, 0, 375, 376, 377, 378, 379, 252, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 253, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 0, 411, 412, 254, 255, 256, 257, 410,
	413, 414, 0, 415, 400, 401, 416, 0, 417, 258,
	259, 418, 0, 426, 419, 420, 421, 402, 422, 425,
	260, 423, 0, 424, 261, 0, 427, 428, 0, 429,
	430, 431, 432, 433, 434, 435, 436, 0, 262, 263,
	264, 0, 0, 437, 438, 265, 266, 0, 439, 440,
	441, 442, 0, 0, 443, 444, 445, 446, 0, 447,
	0, 267, 448, 449, 450, 268, 269, 471, 0, 451,
	270, 0, 0, 0, 0, 452, 453, 271, 454, 455,
	456, 0, 0, 272, 273, 274, 275, 0, 276, 0,
	0, 0, 0, 208, 0, 0, 459, 0, 277, 278,
	279, 209, 210, 211, 212, 280, 213, 214, 0, 281,
	215, 216, 282, 283, 284, 0, 0, 217, 218, 219,
	1897, 285, 220, 0, 0, 0, 286, 287, 288, 289,
	290, 0, 292, 293, 294, 291, 1894, 295, 0, 296,
	297, 0, 0, 298, 299, 300, 0, 0, 0, 0,
	0, 0, 0, 301, 302, 474, 303, 221, 304, 222,
	223, 0, 305, 0, 306, 0, 307, 0, 0, 308,
	309, 0, 310, 0, 0, 0, 224, 311, 312, 314,
	315, 313, 316, 225, 226, 0, 1970, 0, 0, 0,
	0, 0, 317, 318, 227, 228, 229, 0, 319, 0,
	320, 1900, 0, 0, 321, 0, 322, 230, 0, 231,
	0, 323, 324, 325, 326, 327, 328, 232, 233, 0,
	0, 234, 0, 0, 0, 332, 1968, 329, 0, 0,
	330, 235, 331, 236, 237, 238, 239, 240, 0, 241,
	0, 1967, 0, 0, 334, 335, 336, 0, 242, 243,
	0, 0, 337, 338, 339, 0, 341, 340, 0, 244,
	0, 342, 343, 0, 0, 344, 345, 0, 0, 346,
	0, 347, 0, 0, 348, 349, 351, 245, 350, 0,
	352, 353, 355, 354, 0, 0, 0, 0, 246, 356,
	247, 357, 358, 0, 359, 360, 0, 0, 361, 362,
	0, 0, 363, 248, 0, 364, 0, 249, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 250, 373, 251,
	374, 1899, 375, 376, 377, 378, 379, 252, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 253, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 411, 412, 254, 255, 256, 257, 410, 413,
	414, 0, 415, 400, 401, 416, 0, 417, 258, 259,
	418, 0, 426, 419, 420, 421, 402, 422, 425, 260,
	423, 0, 424, 261, 0, 427, 428, 0, 429, 430,
	431, 432, 433, 434, 435, 436, 0, 262, 263, 264,
	0, 0, 437, 438, 265, 266, 0, 439, 440, 441,
	442, 0, 1969, 443, 444, 445, 446, 0, 447, 0,
	267, 448, 449, 450, 268, 269, 471, 0, 451, 270,
	0, 0, 0, 0, 452, 453, 271, 454, 455, 456,
	0, 0, 272, 273, 274, 275, 0, 276, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 277, 278, 279,
	209, 210, 211, 212, 280, 213, 214, 0, 281, 215,
	216, 282, 283, 284, 0, 0, 217, 218, 219, 1897,
	285, 220, 0, 0, 1891, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 1894, 295, 0, 296, 297,
	0, 0, 298, 299, 300, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 474, 303, 221, 304, 222, 223,
	0, 305, 0, 306, 0, 307, 0, 0, 308, 309,
	0, 310, 0, 0, 0, 224, 311, 312, 314, 315,
	313, 316, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 227, 228, 229, 0, 319, 0, 320,
	1900, 0, 0, 321, 0, 322, 230, 0, 231, 0,
	323, 324, 325, 326, 327, 328, 1890, 233, 0, 0,
	234, 0, 0, 0, 332, 0, 329, 0, 0, 330,
	235, 331, 236, 237, 238, 239, 240, 0, 241, 0,
	333, 0, 0, 334, 335, 336, 0, 242, 243, 0,
	0, 337, 338, 339, 0, 341, 340, 0, 244, 0,
	342, 343, 0, 0, 344, 345, 0, 0, 346, 0,
	347, 0, 0, 348, 349, 351, 245, 350, 0, 352,
	353, 355, 354, 0, 0, 0, 0, 246, 356, 247,
	357, 358, 0, 359, 360, 0, 0, 361, 362, 0,
	0, 363, 248, 0, 364, 0, 249, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 250, 373, 251, 374,
	1899, 375, 376, 377, 378, 379, 252, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	253, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	0, 411, 412, 254, 255, 256, 257, 410, 413, 414,
	0, 415, 400, 401, 416, 0, 417, 258, 259, 418,
	0, 426, 419, 420, 421, 402, 422, 425, 260, 423,
	0, 424, 261, 0, 427, 428, 0, 429, 430, 431,
	432, 433, 434, 435, 436, 0, 262, 263, 264, 0,
	0, 437, 438, 265, 266, 0, 439, 440, 441, 442,
	0, 1898, 443, 444, 445, 446, 0, 447, 0, 267,
	448, 449, 450, 268, 269, 0, 0, 451, 270, 574,
	0, 471, 0, 452, 453, 271, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 273, 274,
	573, 555, 276, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 277, 278, 279, 209, 210, 211, 212, 280,
	213, 214, 0, 281, 215, 216, 282, 283, 284, 0,
	0, 217, 218, 219, 0, 285, 220, 0, 0, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 558, 0, 298, 299, 300,
	0, 0, 0, 0, 0, 0, 0, 301, 302, 474,
	303, 221, 304, 222, 223, 0, 305, 0, 306, 0,
	307, 0, 0, 308, 309, 0, 310, 0, 0, 0,
	224, 311, 312, 314, 315, 313, 316, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 227, 228,
	229, 0, 319, 0, 320, 0, 0, 0, 321, 559,
	322, 230, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 232, 233, 0, 0, 234, 0, 0, 0, 332,
	0, 329, 0, 0, 330, 235, 331, 236, 237, 238,
	239, 240, 0, 241, 0, 333, 0, 0, 334, 335,
	336, 0, 242, 243, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 244, 0, 342, 343, 0, 0, 344,
	345, 0, 0, 346, 0, 347, 0, 0, 348, 349,
	351, 245, 350, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 246, 356, 247, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 248, 0, 364,
	0, 249, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 250, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 252, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 253, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 560, 411, 412, 254, 255,
	256, 257, 410, 413, 414, 0, 415, 400, 401, 416,
	0, 417, 258, 259, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 260, 423, 0, 424, 261, 0, 427,
	428, 0, 429, 430, 431, 432, 433, 434, 435, 436,
	0, 262, 263, 264, 0, 0, 437, 438, 265, 266,
	0, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 0, 447, 0, 267, 448, 449, 450, 268, 269,
	0, 0, 451, 270, 554, 0, 471, 0, 452, 453,
	271, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 272, 273, 274, 275, 555, 276, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 277, 278, 279,
	209, 210, 211, 212, 280, 213, 214, 0, 281, 215,
	216, 282, 283, 284, 0, 0, 217, 218, 219, 0,
	285, 220, 0, 0, 0, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 0, 295, 0, 296, 297,
	558, 0, 298, 299, 300, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 474, 303, 221, 304, 222, 223,
	0, 305, 0, 306, 0, 307, 0, 0, 308, 309,
	0, 310, 0, 0, 0, 224, 311, 312, 314, 315,
	313, 316, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 227, 228, 229, 0, 319, 0, 320,
	0, 0, 0, 321, 559, 322, 230, 0, 231, 0,
	323, 324, 325, 326, 327, 328, 232, 233, 0, 0,
	234, 0, 0, 0, 332, 0, 329, 0, 0, 330,
	235, 331, 236, 237, 238, 239, 240, 0, 241, 0,
	333, 0, 0, 334, 335, 336, 0, 242, 243, 0,
	0, 337, 338, 339, 0, 341, 340, 0, 244, 0,
	342, 343, 0, 0, 344, 345, 0, 0, 346, 0,
	347, 0, 0, 348, 349, 351, 245, 350, 0, 352,
	353, 355, 354, 0, 0, 0, 0, 246, 356, 247,
	357, 358, 0, 359, 360, 0, 0, 361, 362, 0,
	0, 363, 248, 0, 364, 0, 249, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 250, 373, 251, 374,
	0, 375, 376, 377, 378, 379, 252, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	253, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	560, 411, 412, 254, 255, 256, 257, 410, 413, 414,
	0, 415, 400, 401, 416, 0, 417, 258, 259, 418,
	0, 426, 419, 420, 421, 402, 422, 425, 260, 423,
	0, 424, 261, 0, 427, 428, 0, 429, 430, 431,
	432, 433, 434, 435, 436, 0, 262, 263, 264, 0,
	0, 437, 438, 265, 266, 0, 439, 440, 441, 442,
	0, 0, 443, 444, 445, 446, 0, 447, 0, 267,
	448, 449, 450, 268, 269, 471, 0, 451, 270, 0,
	0, 0, 0, 452, 453, 271, 454, 455, 456, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 558,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 559, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 350, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 560,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 1071, 0,
	471, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	888, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 907, 0, 471, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 909, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 350, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 888, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 904, 0,
	471, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	906, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	888, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 900, 0, 471, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 902, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 350, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 888, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 493, 0,
	471, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	492, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 491, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 471,
	0, 451, 270, 0, 0, 0, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 1877, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 232,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 471, 2358,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 272, 273, 274, 275, 0, 276,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 277,
	278, 279, 209, 210, 211, 212, 280, 213, 214, 0,
	281, 215, 216, 282, 283, 284, 0, 0, 217, 218,
	219, 0, 285, 220, 0, 0, 0, 286, 287, 288,
	289, 290, 0, 292, 293, 294, 291, 0, 295, 0,
	296, 297, 0, 0, 298, 299, 300, 0, 0, 0,
	0, 0, 0, 0, 301, 302, 474, 303, 221, 304,
	222, 223, 0, 305, 0, 306, 0, 307, 0, 0,
	308, 309, 0, 310, 0, 0, 0, 224, 311, 312,
	314, 315, 313, 316, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 227, 228, 229, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 230, 0,
	231, 0, 323, 324, 325, 326, 327, 328, 232, 233,
	0, 0, 234, 0, 0, 0, 332, 0, 329, 0,
	0, 330, 235, 331, 236, 237, 238, 239, 240, 0,
	241, 0, 333, 0, 0, 334, 335, 336, 0, 242,
	243, 0, 0, 337, 338, 339, 0, 341, 340, 0,
	244, 0, 342, 343, 0, 0, 344, 345, 0, 0,
	346, 0, 347, 0, 0, 348, 349, 351, 245, 350,
	0, 352, 353, 355, 354, 0, 0, 0, 0, 246,
	356, 247, 357, 358, 0, 359, 360, 0, 0, 361,
	362, 0, 0, 363, 248, 0, 364, 0, 249, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 250, 373,
	251, 374, 0, 375, 376, 377, 378, 379, 252, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 253, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 0, 411, 412, 254, 255, 256, 257, 410,
	413, 414, 0, 415, 400, 401, 416, 0, 417, 258,
	259, 418, 0, 426, 419, 420, 421, 402, 422, 425,
	260, 423, 0, 424, 261, 0, 427, 428, 0, 429,
	430, 431, 432, 433, 434, 435, 436, 0, 262, 263,
	264, 0, 0, 437, 438, 265, 266, 0, 439, 440,
	441, 442, 0, 0, 443, 444, 445, 446, 0, 447,
	0, 267, 448, 449, 450, 268, 269, 471, 2358, 451,
	270, 0, 0, 0, 0, 452, 453, 271, 454, 455,
	456, 0, 0, 272, 273, 274, 275, 0, 276, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 277, 278,
	279, 209, 210, 211, 212, 280, 213, 214, 0, 281,
	215, 216, 282, 283, 284, 0, 0, 217, 218, 219,
	0, 285, 220, 0, 0, 0, 286, 287, 288, 289,
	290, 0, 292, 293, 294, 291, 0, 295, 0, 296,
	297, 0, 0, 298, 299, 300, 0, 0, 0, 0,
	0, 0, 0, 301, 302, 474, 303, 221, 304, 222,
	223, 0, 305, 0, 306, 0, 307, 0, 0, 308,
	309, 0, 310, 0, 0, 0, 224, 311, 312, 314,
	315, 313, 316, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 227, 228, 229, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 230, 0, 231,
	0, 323, 324, 325, 326, 327, 328, 232, 233, 0,
	0, 234, 0, 0, 0, 332, 0, 329, 0, 0,
	330, 235, 331, 236, 237, 238, 239, 240, 0, 241,
	0, 333, 0, 0, 334, 335, 336, 0, 242, 243,
	0, 0, 337, 338, 339, 0, 341, 340, 0, 244,
	0, 342, 343, 0, 0, 344, 345, 0, 0, 346,
	0, 347, 0, 0, 348, 349, 351, 245, 350, 0,
	352, 353, 355, 354, 0, 0, 0, 0, 246, 356,
	247, 357, 358, 0, 359, 360, 0, 0, 361, 2355,
	0, 0, 363, 248, 0, 364, 0, 249, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 250, 373, 251,
	374, 0, 375, 376, 377, 378, 379, 252, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 253, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 411, 412, 254, 255, 256, 257, 410, 413,
	414, 0, 415, 400, 401, 416, 0, 417, 258, 259,
	418, 0, 426, 419, 420, 421, 402, 422, 425, 260,
	423, 0, 424, 261, 0, 427, 428, 0, 429, 430,
	431, 432, 433, 434, 435, 436, 0, 262, 263, 264,
	0, 0, 437, 438, 265, 266, 0, 439, 440, 441,
	442, 0, 0, 443, 444, 445, 446, 0, 447, 0,
	267, 448, 449, 450, 268, 269, 471, 0, 451, 270,
	0, 0, 0, 0, 452, 453, 271, 454, 455, 456,
	0, 0, 272, 273, 274, 275, 0, 276, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 277, 278, 279,
	209, 210, 211, 212, 280, 213, 214, 0, 281, 215,
	216, 282, 283, 284, 0, 0, 217, 218, 219, 0,
	285, 220, 0, 0, 0, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 0, 295, 0, 296, 297,
	0, 0, 298, 299, 300, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 474, 303, 221, 304, 222, 223,
	0, 305, 0, 306, 0, 307, 0, 0, 308, 309,
	0, 310, 0, 0, 0, 224, 311, 312, 314, 315,
	313, 316, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 227, 228, 229, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 230, 0, 231, 0,
	323, 324, 325, 326, 327, 328, 232, 233, 0, 0,
	234, 0, 0, 0, 332, 0, 329, 0, 0, 330,
	235, 331, 236, 237, 238, 239, 240, 0, 241, 0,
	333, 0, 0, 334, 335, 336, 0, 242, 243, 0,
	0, 337, 338, 339, 0, 341, 340, 0, 244, 0,
	342, 343, 0, 0, 344, 345, 0, 0, 346, 0,
	347, 0, 0, 348, 349, 351, 245, 350, 0, 352,
	353, 355, 354, 0, 0, 0, 0, 246, 356, 247,
	357, 358, 0, 359, 360, 0, 888, 361, 362, 0,
	0, 363, 248, 0, 364, 0, 249, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 250, 373, 251, 374,
	0, 375, 376, 377, 378, 379, 252, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	253, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	0, 411, 412, 254, 255, 256, 257, 410, 413, 414,
	0, 415, 400, 401, 416, 0, 417, 258, 259, 418,
	0, 426, 419, 420, 421, 402, 422, 425, 260, 423,
	0, 424, 261, 0, 427, 428, 0, 429, 430, 431,
	432, 433, 434, 435, 436, 0, 262, 263, 264, 0,
	0, 437, 438, 265, 266, 0, 439, 440, 441, 442,
	0, 0, 443, 444, 445, 446, 0, 447, 0, 267,
	448, 449, 450, 268, 269, 0, 0, 451, 270, 1642,
	0, 471, 0, 452, 453, 271, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 277, 278, 279, 209, 210, 211, 212, 280,
	213, 214, 0, 281, 215, 216, 282, 283, 284, 0,
	0, 217, 218, 219, 0, 285, 220, 0, 0, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 0, 298, 299, 300,
	0, 0, 0, 0, 0, 0, 0, 301, 302, 474,
	303, 221, 304, 222, 223, 0, 305, 0, 306, 0,
	307, 0, 0, 308, 309, 0, 310, 0, 0, 0,
	224, 311, 312, 314, 315, 313, 316, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 227, 228,
	229, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 230, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 232, 233, 0, 0, 234, 0, 0, 0, 332,
	0, 329, 0, 0, 330, 235, 331, 236, 237, 238,
	239, 240, 0, 241, 0, 333, 0, 0, 334, 335,
	336, 0, 242, 243, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 244, 0, 342, 343, 0, 0, 344,
	345, 0, 0, 346, 0, 347, 0, 0, 348, 349,
	351, 245, 350, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 246, 356, 247, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 248, 0, 364,
	0, 249, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 250, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 252, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 253, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 411, 412, 254, 255,
	256, 257, 410, 413, 414, 0, 415, 400, 401, 416,
	0, 417, 258, 259, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 260, 423, 0, 424, 261, 0, 427,
	428, 0, 429, 430, 431, 432, 433, 434, 435, 436,
	0, 262, 263, 264, 0, 0, 437, 438, 265, 266,
	0, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 0, 447, 0, 267, 448, 449, 450, 268, 269,
	0, 0, 451, 270, 1640, 0, 471, 0, 452, 453,
	271, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 272, 273, 274, 275, 0, 276, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 277, 278, 279,
	209, 210, 211, 212, 280, 213, 214, 0, 281, 215,
	216, 282, 283, 284, 0, 0, 217, 218, 219, 0,
	285, 220, 0, 0, 0, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 0, 295, 0, 296, 297,
	0, 0, 298, 299, 300, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 474, 303, 221, 304, 222, 223,
	0, 305, 0, 306, 0, 307, 0, 0, 308, 309,
	0, 310, 0, 0, 0, 224, 311, 312, 314, 315,
	313, 316, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 227, 228, 229, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 230, 0, 231, 0,
	323, 324, 325, 326, 327, 328, 232, 233, 0, 0,
	234, 0, 0, 0, 332, 0, 329, 0, 0, 330,
	235, 331, 236, 237, 238, 239, 240, 0, 241, 0,
	333, 0, 0, 334, 335, 336, 0, 242, 243, 0,
	0, 337, 338, 339, 0, 341, 340, 0, 244, 0,
	342, 343, 0, 0, 344, 345, 0, 0, 346, 0,
	347, 0, 0, 348, 349, 351, 245, 350, 0, 352,
	353, 355, 354, 0, 0, 0, 0, 246, 356, 247,
	357, 358, 0, 359, 360, 0, 0, 361, 362, 0,
	0, 363, 248, 0, 364, 0, 249, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 250, 373, 251, 374,
	0, 375, 376, 377, 378, 379, 252, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	253, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	0, 411, 412, 254, 255, 256, 257, 410, 413, 414,
	0, 415, 400, 401, 416, 0, 417, 258, 259, 418,
	0, 426, 419, 420, 421, 402, 422, 425, 260, 423,
	0, 424, 261, 0, 427, 428, 0, 429, 430, 431,
	432, 433, 434, 435, 436, 0, 262, 263, 264, 0,
	0, 437, 438, 265, 266, 0, 439, 440, 441, 442,
	0, 0, 443, 444, 445, 446, 0, 447, 0, 267,
	448, 449, 450, 268, 269, 0, 0, 451, 270, 1638,
	0, 471, 0, 452, 453, 271, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 277, 278, 279, 209, 210, 211, 212, 280,
	213, 214, 0, 281, 215, 216, 282, 283, 284, 0,
	0, 217, 218, 219, 0, 285, 220, 0, 0, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 0, 298, 299, 300,
	0, 0, 0, 0, 0, 0, 0, 301, 302, 474,
	303, 221, 304, 222, 223, 0, 305, 0, 306, 0,
	307, 0, 0, 308, 309, 0, 310, 0, 0, 0,
	224, 311, 312, 314, 315, 313, 316, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 227, 228,
	229, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 230, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 232, 233, 0, 0, 234, 0, 0, 0, 332,
	0, 329, 0, 0, 330, 235, 331, 236, 237, 238,
	239, 240, 0, 241, 0, 333, 0, 0, 334, 335,
	336, 0, 242, 243, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 244, 0, 342, 343, 0, 0, 344,
	345, 0, 0, 346, 0, 347, 0, 0, 348, 349,
	351, 245, 350, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 246, 356, 247, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 248, 0, 364,
	0, 249, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 250, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 252, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 253, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 411, 412, 254, 255,
	256, 257, 410, 413, 414, 0, 415, 400, 401, 416,
	0, 417, 258, 259, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 260, 423, 0, 424, 261, 0, 427,
	428, 0, 429, 430, 431, 432, 433, 434, 435, 436,
	0, 262, 263, 264, 0, 0, 437, 438, 265, 266,
	0, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 0, 447, 0, 267, 448, 449, 450, 268, 269,
	471, 0, 451, 270, 0, 0, 0, 0, 452, 453,
	271, 454, 455, 456, 0, 0, 272, 273, 274, 275,
	1615, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 1576, 0, 471, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 350, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 1574, 0,
	471, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 600, 0, 471, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 1145, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 601, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 597, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 596, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 1474, 0,
	471, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	1473, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 600, 0, 471, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 1145, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 601, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 597, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 596, 263, 264, 0, 0,
	437, 1146, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 600, 0,
	471, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 590, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	232, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 601, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 597,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 1121, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	596, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 1089, 0, 471, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 1088, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 350, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 1085, 0,
	471, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	1084, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 1082, 0, 471, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 1081, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 350, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 1079, 0,
	471, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	1078, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 0,
	0, 451, 270, 1075, 0, 471, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 1074, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 350, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 378, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	399, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 471, 0, 451, 270, 0, 0,
	0, 0, 452, 453, 271, 454, 455, 456, 0, 0,
	272, 273, 274, 275, 1063, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 232, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 350, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 1061, 0, 471,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 1060,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 1055, 0, 471, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 232, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 350, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 1046, 0, 471,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 1045,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 1042, 0, 471, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 232, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 350, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 1038, 0, 471,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 1040,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 926, 0, 471, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 928, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 350, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 923, 0, 471,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 232,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 600, 0, 471, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 590, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 232, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 589, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 601, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 591, 399,
	0, 403, 404, 597, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 592, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 596, 263, 264, 0, 0, 437,
	594, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 580, 0, 471,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 232,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 581, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 576, 0, 471, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 232, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 350, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 0, 0, 451, 270, 566, 0, 471,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 232,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 403, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 0, 0,
	451, 270, 515, 0, 471, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 274, 275, 0, 276, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 277, 278, 279, 209, 210,
	211, 212, 280, 213, 214, 0, 281, 215, 216, 282,
	283, 284, 0, 0, 217, 218, 219, 0, 285, 220,
	0, 0, 0, 286, 287, 288, 289, 290, 0, 292,
	293, 294, 291, 0, 295, 0, 296, 297, 0, 0,
	298, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	301, 302, 474, 303, 221, 304, 222, 223, 0, 305,
	0, 306, 0, 307, 0, 0, 308, 309, 0, 310,
	0, 0, 0, 224, 311, 312, 314, 315, 313, 316,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 227, 228, 229, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 230, 0, 231, 0, 323, 324,
	325, 326, 327, 328, 232, 233, 0, 0, 234, 0,
	0, 0, 332, 0, 329, 0, 0, 330, 235, 331,
	236, 237, 238, 239, 240, 0, 241, 0, 333, 0,
	0, 334, 335, 336, 0, 242, 243, 0, 0, 337,
	338, 339, 0, 341, 340, 0, 244, 0, 342, 343,
	0, 0, 344, 345, 0, 0, 346, 0, 347, 0,
	0, 348, 349, 351, 245, 350, 0, 352, 353, 355,
	354, 0, 0, 0, 0, 246, 356, 247, 357, 358,
	0, 359, 360, 0, 0, 361, 362, 0, 0, 363,
	248, 0, 364, 0, 249, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 250, 373, 251, 374, 0, 375,
	376, 377, 378, 379, 252, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 387, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 253, 399,
	0, 403, 404, 405, 406, 407, 408, 409, 0, 411,
	412, 254, 255, 256, 257, 410, 413, 414, 0, 415,
	400, 401, 416, 0, 417, 258, 259, 418, 0, 426,
	419, 420, 421, 402, 422, 425, 260, 423, 0, 424,
	261, 0, 427, 428, 0, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 262, 263, 264, 0, 0, 437,
	438, 265, 266, 0, 439, 440, 441, 442, 0, 0,
	443, 444, 445, 446, 0, 447, 0, 267, 448, 449,
	450, 268, 269, 471, 0, 451, 270, 0, 0, 0,
	0, 452, 453, 271, 454, 455, 456, 0, 0, 272,
	273, 274, 275, 0, 276, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 277, 278, 279, 209, 210, 211,
	212, 280, 213, 214, 0, 281, 215, 216, 282, 283,
	284, 0, 0, 217, 218, 219, 0, 285, 220, 0,
	0, 0, 286, 287, 288, 289, 290, 0, 292, 293,
	294, 291, 0, 295, 0, 296, 297, 0, 0, 298,
	299, 300, 0, 0, 0, 0, 0, 0, 0, 301,
	302, 474, 303, 221, 304, 222, 223, 0, 305, 0,
	306, 0, 307, 0, 0, 308, 309, 0, 310, 0,
	0, 0, 224, 311, 312, 314, 315, 313, 316, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 317, 318,
	227, 228, 229, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 230, 0, 231, 0, 323, 324, 325,
	326, 327, 328, 232, 233, 0, 0, 234, 0, 0,
	0, 332, 0, 329, 0, 0, 330, 235, 331, 236,
	237, 238, 239, 240, 0, 241, 0, 333, 0, 0,
	334, 335, 336, 0, 242, 243, 0, 0, 337, 338,
	339, 0, 341, 340, 0, 244, 0, 342, 343, 0,
	0, 344, 345, 0, 0, 346, 0, 347, 0, 0,
	348, 349, 351, 245, 350, 0, 352, 353, 355, 354,
	0, 0, 0, 0, 246, 356, 247, 357, 358, 0,
	359, 360, 0, 0, 361, 362, 0, 0, 363, 248,
	0, 364, 0, 249, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 250, 373, 251, 374, 0, 375, 376,
	377, 378, 379, 252, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 387, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 253, 399, 0,
	403, 404, 405, 406, 407, 408, 409, 0, 411, 412,
	254, 255, 256, 257, 410, 413, 414, 0, 415, 400,
	401, 416, 0, 417, 258, 259, 418, 0, 426, 419,
	420, 421, 402, 422, 425, 260, 423, 0, 424, 261,
	0, 427, 428, 0, 429, 430, 431, 432, 433, 434,
	435, 436, 0, 262, 263, 264, 0, 0, 437, 438,
	265, 266, 0, 439, 440, 441, 442, 0, 0, 443,
	444, 445, 446, 0, 447, 0, 267, 448, 449, 450,
	268, 269, 471, 0, 451, 270, 0, 0, 0, 0,
	452, 453, 271, 454, 455, 456, 0, 0, 272, 273,
	274, 275, 0, 276, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 277, 278, 279, 209, 210, 211, 212,
	280, 213, 214, 0, 281, 215, 216, 282, 283, 284,
	0, 0, 217, 218, 219, 0, 285, 220, 0, 0,
	0, 286, 287, 288, 289, 290, 0, 292, 293, 294,
	291, 0, 295, 0, 296, 297, 0, 0, 298, 299,
	300, 0, 0, 0, 0, 0, 0, 0, 301, 302,
	474, 303, 221, 304, 222, 223, 0, 305, 0, 306,
	0, 307, 0, 0, 308, 309, 0, 310, 0, 0,
	0, 224, 311, 312, 314, 315, 313, 316, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 227,
	228, 229, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 230, 0, 231, 0, 323, 324, 325, 326,
	327, 328, 2250, 233, 0, 0, 234, 0, 0, 0,
	332, 0, 329, 0, 0, 330, 235, 331, 236, 237,
	238, 239, 240, 0, 241, 0, 333, 0, 0, 334,
	335, 336, 0, 242, 243, 0, 0, 337, 338, 339,
	0, 341, 340, 0, 244, 0, 342, 343, 0, 0,
	344, 345, 0, 0, 346, 0, 347, 0, 0, 348,
	349, 351, 245, 350, 0, 352, 353, 355, 354, 0,
	0, 0, 0, 246, 356, 247, 357, 358, 0, 359,
	360, 0, 0, 361, 362, 0, 0, 363, 248, 0,
	364, 0, 249, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 250, 373, 251, 374, 0, 375, 376, 377,
	378, 379, 252, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 387, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 253, 399, 0, 403,
	404, 405, 406, 407, 408, 409, 0, 411, 412, 254,
	255, 256, 257, 410, 413, 414, 0, 415, 400, 401,
	416, 0, 417, 258, 259, 418, 0, 426, 419, 420,
	421, 402, 422, 425, 260, 423, 0, 424, 261, 0,
	427, 428, 0, 429, 430, 431, 432, 433, 434, 435,
	436, 0, 262, 263, 264, 0, 0, 437, 438, 265,
	266, 0, 439, 440, 441, 442, 0, 0, 443, 444,
	445, 446, 0, 447, 0, 267, 448, 449, 450, 268,
	269, 471, 0, 451, 270, 0, 0, 0, 0, 452,
	453, 271, 454, 455, 456, 0, 0, 272, 273, 274,
	275, 0, 276, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 277, 278, 279, 209, 210, 211, 212, 280,
	213, 214, 0, 281, 215, 216, 282, 283, 284, 0,
	0, 217, 218, 219, 0, 285, 220, 0, 0, 0,
	286, 287, 288, 289, 290, 0, 292, 293, 294, 291,
	0, 295, 0, 296, 297, 0, 0, 298, 299, 300,
	0, 0, 0, 0, 0, 0, 0, 301, 302, 474,
	303, 221, 304, 222, 223, 0, 305, 0, 306, 0,
	307, 0, 0, 308, 309, 0, 310, 0, 0, 0,
	224, 311, 312, 314, 315, 313, 316, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 227, 228,
	229, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 230, 0, 231, 0, 323, 324, 325, 326, 327,
	328, 2248, 233, 0, 0, 234, 0, 0, 0, 332,
	0, 329, 0, 0, 330, 235, 331, 236, 237, 238,
	239, 240, 0, 241, 0, 333, 0, 0, 334, 335,
	336, 0, 242, 243, 0, 0, 337, 338, 339, 0,
	341, 340, 0, 244, 0, 342, 343, 0, 0, 344,
	345, 0, 0, 346, 0, 347, 0, 0, 348, 349,
	351, 245, 350, 0, 352, 353, 355, 354, 0, 0,
	0, 0, 246, 356, 247, 357, 358, 0, 359, 360,
	0, 0, 361, 362, 0, 0, 363, 248, 0, 364,
	0, 249, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 250, 373, 251, 374, 0, 375, 376, 377, 378,
	379, 252, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 387, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 253, 399, 0, 403, 404,
	405, 406, 407, 408, 409, 0, 411, 412, 254, 255,
	256, 257, 410, 413, 414, 0, 415, 400, 401, 416,
	0, 417, 258, 259, 418, 0, 426, 419, 420, 421,
	402, 422, 425, 260, 423, 0, 424, 261, 0, 427,
	428, 0, 429, 430, 431, 432, 433, 434, 435, 436,
	0, 262, 263, 264, 0, 0, 437, 438, 265, 266,
	0, 439, 440, 441, 442, 0, 0, 443, 444, 445,
	446, 0, 447, 0, 267, 448, 449, 450, 268, 269,
	471, 0, 451, 270, 0, 0, 0, 0, 452, 453,
	271, 454, 455, 456, 0, 0, 272, 273, 274, 275,
	0, 276, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 277, 278, 279, 209, 210, 211, 212, 280, 213,
	214, 0, 281, 215, 216, 282, 283, 284, 0, 0,
	217, 218, 219, 0, 285, 220, 0, 0, 0, 286,
	287, 288, 289, 290, 0, 292, 293, 294, 291, 0,
	295, 0, 296, 297, 0, 0, 298, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 474, 303,
	221, 304, 222, 223, 0, 305, 0, 306, 0, 307,
	0, 0, 308, 309, 0, 310, 0, 0, 0, 224,
	311, 312, 314, 315, 313, 316, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 227, 228, 229,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	230, 0, 231, 0, 323, 324, 325, 326, 327, 328,
	2237, 233, 0, 0, 234, 0, 0, 0, 332, 0,
	329, 0, 0, 330, 235, 331, 236, 237, 238, 239,
	240, 0, 241, 0, 333, 0, 0, 334, 335, 336,
	0, 242, 243, 0, 0, 337, 338, 339, 0, 341,
	340, 0, 244, 0, 342, 343, 0, 0, 344, 345,
	0, 0, 346, 0, 347, 0, 0, 348, 349, 351,
	245, 350, 0, 352, 353, 355, 354, 0, 0, 0,
	0, 246, 356, 247, 357, 358, 0, 359, 360, 0,
	0, 361, 362, 0, 0, 363, 248, 0, 364, 0,
	249, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	250, 373, 251, 374, 0, 375, 376, 377, 378, 379,
	252, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 387, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 253, 399, 0, 403, 404, 405,
	406, 407, 408, 409, 0, 411, 412, 254, 255, 256,
	257, 410, 413, 414, 0, 415, 400, 401, 416, 0,
	417, 258, 259, 418, 0, 426, 419, 420, 421, 402,
	422, 425, 260, 423, 0, 424, 261, 0, 427, 428,
	0, 429, 430, 431, 432, 433, 434, 435, 436, 0,
	262, 263, 264, 0, 0, 437, 438, 265, 266, 0,
	439, 440, 441, 442, 0, 0, 443, 444, 445, 446,
	0, 447, 0, 267, 448, 449, 450, 268, 269, 471,
	0, 451, 270, 0, 0, 0, 0, 452, 453, 271,
	454, 455, 456, 0, 0, 272, 273, 274, 275, 0,
	276, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	277, 278, 279, 209, 210, 211, 212, 280, 213, 214,
	0, 281, 215, 216, 282, 283, 284, 0, 0, 217,
	218, 219, 0, 285, 220, 0, 0, 0, 286, 287,
	288, 289, 290, 0, 292, 293, 294, 291, 0, 295,
	0, 296, 297, 0, 0, 298, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 301, 302, 474, 303, 221,
	304, 222, 223, 0, 305, 0, 306, 0, 307, 0,
	0, 308, 309, 0, 310, 0, 0, 0, 224, 311,
	312, 314, 315, 313, 316, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 227, 228, 229, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 230,
	0, 231, 0, 323, 324, 325, 326, 327, 328, 232,
	233, 0, 0, 234, 0, 0, 0, 332, 0, 329,
	0, 0, 330, 235, 331, 236, 237, 238, 239, 240,
	0, 241, 0, 333, 0, 0, 334, 335, 336, 0,
	242, 243, 0, 0, 337, 338, 339, 0, 341, 340,
	0, 244, 0, 342, 343, 0, 0, 344, 345, 0,
	0, 346, 0, 347, 0, 0, 348, 349, 351, 245,
	350, 0, 352, 353, 355, 354, 0, 0, 0, 0,
	246, 356, 247, 357, 358, 0, 359, 360, 0, 0,
	361, 362, 0, 0, 363, 248, 0, 364, 0, 249,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 250,
	373, 251, 374, 0, 375, 376, 377, 378, 379, 252,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 387, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 253, 399, 0, 581, 404, 405, 406,
	407, 408, 409, 0, 411, 412, 254, 255, 256, 257,
	410, 413, 414, 0, 415, 400, 401, 416, 0, 417,
	258, 259, 418, 0, 426, 419, 420, 421, 402, 422,
	425, 260, 423, 0, 424, 261, 0, 427, 428, 0,
	429, 430, 431, 432, 433, 434, 435, 436, 0, 262,
	263, 264, 0, 0, 437, 438, 265, 266, 0, 439,
	440, 441, 442, 0, 0, 443, 444, 445, 446, 0,
	447, 0, 267, 448, 449, 450, 268, 269, 471, 0,
	451, 270, 0, 0, 0, 0, 452, 453, 271, 454,
	455, 456, 0, 0, 272, 273, 274, 275, 0, 276,
	0, 0, 0, 0, 208, 0, 1487, 0, 0, 277,
	278, 279, 209, 210, 211, 212, 280, 213, 214, 0,
	281, 215, 216, 282, 283, 284, 0, 0, 217, 218,
	219, 0, 285, 220, 0, 0, 0, 286, 287, 288,
	289, 290, 0, 292, 293, 294, 291, 0, 295, 0,
	296, 297, 0, 0, 298, 299, 300, 0, 0, 0,
	0, 0, 0, 0, 301, 302, 474, 303, 221, 304,
	222, 223, 0, 305, 0, 306, 0, 307, 0, 0,
	308, 309, 0, 310, 0, 0, 0, 224, 311, 312,
	314, 315, 313, 316, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 227, 228, 229, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 230, 0,
	231, 0, 323, 324, 325, 326, 327, 328, 232, 233,
	0, 0, 234, 0, 0, 0, 332, 0, 329, 0,
	0, 330, 235, 331, 236, 237, 238, 239, 240, 0,
	241, 0, 333, 0, 0, 334, 335, 336, 0, 242,
	243, 0, 0, 337, 338, 339, 0, 341, 340, 0,
	244, 0, 342, 343, 0, 0, 344, 345, 0, 0,
	346, 0, 347, 0, 0, 348, 349, 351, 245, 350,
	0, 352, 353, 355, 354, 0, 0, 0, 0, 246,
	356, 247, 357, 358, 0, 359, 360, 0, 0, 361,
	362, 0, 0, 363, 248, 0, 364, 0, 249, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 250, 373,
	251, 374, 0, 375, 376, 377, 378, 379, 252, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	387, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 253, 399, 0, 403, 404, 405, 406, 407,
	408, 409, 0, 411, 412, 254, 255, 256, 257, 410,
	413, 414, 0, 0, 400, 401, 416, 0, 417, 258,
	259, 418, 0, 426, 419, 420, 421, 402, 422, 425,
	260, 423, 0, 424, 261, 0, 427, 428, 0, 429,
	430, 431, 432, 433, 434, 435, 436, 0, 262, 263,
	264, 0, 0, 437, 438, 265, 266, 0, 439, 440,
	441, 442, 0, 0, 443, 444, 445, 446, 0, 447,
	0, 267, 448, 449, 450, 268, 269, 471, 0, 451,
	270, 0, 0, 0, 0, 452, 453, 271, 454, 455,
	456, 0, 0, 272, 273, 274, 275, 0, 276, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 277, 278,
	279, 209, 210, 211, 212, 280, 213, 214, 0, 281,
	215, 216, 282, 283, 284, 0, 0, 217, 218, 219,
	0, 285, 220, 0, 0, 0, 286, 287, 288, 289,
	290, 0, 292, 293, 294, 291, 0, 295, 0, 296,
	297, 0, 0, 298, 299, 300, 0, 0, 0, 0,
	0, 0, 0, 301, 302, 474, 303, 221, 304, 222,
	223, 0, 305, 0, 306, 0, 307, 0, 0, 308,
	309, 0, 310, 0, 0, 0, 224, 311, 312, 314,
	315, 313, 316, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 227, 228, 229, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 230, 0, 231,
	0, 323, 324, 325, 326, 327, 328, 1478, 233, 0,
	0, 234, 0, 0, 0, 332, 0, 329, 0, 0,
	330, 235, 331, 236, 237, 238, 239, 240, 0, 241,
	0, 333, 0, 0, 334, 335, 336, 0, 242, 243,
	0, 0, 337, 338, 339, 0, 341, 340, 0, 244,
	0, 342, 343, 0, 0, 344, 345, 0, 0, 346,
	0, 347, 0, 0, 348, 349, 351, 245, 350, 0,
	352, 353, 355, 354, 0, 0, 0, 0, 246, 356,
	247, 357, 358, 0, 359, 360, 0, 0, 361, 362,
	0, 0, 363, 248, 0, 364, 0, 249, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 250, 373, 251,
	374, 0, 375, 376, 377, 378, 379, 252, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 387,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 253, 399, 0, 403, 404, 405, 406, 407, 408,
	409, 0, 411, 412, 254, 255, 256, 257, 410, 413,
	414, 0, 415, 400, 401, 416, 0, 417, 258, 259,
	418, 0, 426, 419, 420, 421, 402, 422, 425, 260,
	423, 0, 424, 261, 0, 427, 428, 0, 429, 430,
	431, 432, 433, 434, 435, 436, 0, 262, 263, 264,
	0, 0, 437, 438, 265, 266, 0, 439, 440, 441,
	442, 0, 0, 443, 444, 445, 446, 0, 447, 0,
	267, 448, 449, 450, 268, 269, 471, 0, 451, 270,
	0, 0, 0, 0, 452, 453, 271, 454, 455, 456,
	0, 0, 272, 273, 274, 275, 0, 276, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 277, 278, 279,
	209, 210, 211, 212, 280, 213, 214, 0, 281, 215,
	216, 282, 283, 284, 0, 0, 217, 218, 219, 0,
	285, 220, 0, 0, 0, 286, 287, 288, 289, 290,
	0, 292, 293, 294, 291, 0, 295, 0, 296, 297,
	0, 0, 298, 299, 300, 0, 0, 0, 0, 0,
	0, 0, 301, 302, 474, 303, 221, 304, 222, 223,
	0, 305, 0, 306, 0, 307, 0, 0, 308, 309,
	0, 310, 0, 0, 0, 224, 311, 312, 314, 315,
	313, 316, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 227, 228, 229, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 230, 0, 231, 0,
	323, 324, 325, 326, 327, 328, 232, 233, 0, 0,
	234, 0, 0, 0, 332, 0, 329, 0, 0, 330,
	235, 331, 236, 237, 238, 239, 240, 0, 241, 0,
	333, 0, 0, 334, 335, 336, 0, 242, 243, 0,
	0, 337, 338, 339, 0, 341, 340, 0, 244, 0,
	342, 343, 0, 0, 344, 345, 0, 0, 346, 0,
	347, 0, 0, 348, 349, 351, 245, 350, 0, 352,
	353, 355, 354, 0, 0, 0, 0, 246, 356, 247,
	357, 358, 0, 359, 360, 0, 0, 361, 362, 0,
	0, 363, 248, 0, 364, 0, 249, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 250, 373, 251, 374,
	0, 375, 376, 377, 378, 379, 252, 862, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 387, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	253, 399, 0, 403, 404, 405, 406, 407, 408, 409,
	0, 411, 412, 254, 255, 256, 257, 410, 413, 414,
	0, 415, 400, 401, 416, 0, 417, 258, 259, 418,
	0, 426, 419, 420, 421, 402, 422, 425, 260, 423,
	0, 424, 261, 0, 427, 428, 0, 429, 430, 431,
	432, 433, 434, 435, 436, 0, 262, 263, 264, 0,
	0, 437, 438, 265, 266, 0, 439, 440, 441, 442,
	0, 0, 443, 444, 445, 446, 0, 447, 0, 267,
	448, 449, 450, 268, 269, 471, 0, 451, 270, 0,
	0, 0, 0, 452, 453, 271, 454, 455, 456, 0,
	0, 272, 273, 274, 275, 0, 276, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 277, 278, 279, 209,
	210, 211, 212, 280, 213, 214, 0, 281, 215, 216,
	282, 283, 284, 0, 0, 217, 218, 219, 0, 285,
	220, 0, 0, 0, 286, 287, 288, 289, 290, 0,
	292, 293, 294, 291, 0, 295, 0, 296, 297, 0,
	0, 298, 299, 300, 0, 0, 0, 0, 0, 0,
	0, 301, 302, 474, 303, 221, 304, 222, 223, 0,
	305, 0, 306, 0, 307, 0, 0, 308, 309, 0,
	310, 0, 0, 0, 224, 311, 312, 314, 315, 313,
	316, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 227, 228, 229, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 230, 0, 231, 0, 323,
	324, 325, 326, 327, 328, 232, 233, 0, 0, 234,
	0, 0, 0, 332, 0, 329, 0, 0, 330, 235,
	331, 236, 237, 238, 239, 240, 0, 241, 0, 333,
	0, 0, 334, 335, 336, 0, 242, 243, 0, 0,
	337, 338, 339, 0, 341, 340, 0, 244, 0, 342,
	343, 0, 0, 344, 345, 0, 0, 346, 0, 347,
	0, 0, 348, 349, 351, 245, 350, 0, 352, 353,
	355, 354, 0, 0, 0, 0, 246, 356, 247, 357,
	358, 0, 359, 360, 0, 0, 361, 362, 0, 0,
	363, 248, 0, 364, 0, 249, 365, 366, 367, 0,
	369, 370, 371, 0, 372, 250, 373, 251, 374, 0,
	375, 376, 377, 0, 379, 252, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 387, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 253,
	0, 0, 403, 404, 405, 406, 407, 408, 409, 0,
	411, 412, 254, 255, 256, 257, 410, 413, 414, 0,
	415, 400, 401, 416, 0, 417, 258, 259, 418, 0,
	426, 419, 420, 421, 402, 422, 425, 260, 423, 0,
	424, 261, 0, 427, 428, 0, 429, 430, 431, 432,
	433, 434, 435, 436, 0, 262, 263, 264, 0, 0,
	437, 438, 265, 266, 0, 439, 440, 441, 442, 0,
	0, 443, 444, 445, 446, 0, 447, 0, 267, 448,
	449, 450, 268, 269, 0, 0, 451, 270, 0, 0,
	0, 0, 452, 453, 271, 454, 455, 456, 1241, 1242,
	0, 1274, 1275, 1276, 1284, 1285, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 1244, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1241, 1242, 0, 1274,
	1275, 1276, 1284, 1285, 1286, 0, 0, 0, 1243, 0,
	0, 0, 0, 0, 1277, 0, 1263, 0, 0, 0,
	0, 1244, 0, 1260, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1243, 0, 0, 0,
	0, 0, 0, 0, 1263, 0, 0, 0, 0, 0,
	0, 1260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1266, 1267, 1268, 1269, 0, 0, 0,
	0, 0, 1249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 1291, 0, 1271, 1272, 1273,
	0, 1266, 1267, 1268, 1269, 0, 0, 0, 0, 0,
	1249, 0, 0, 0, 0, 0, 0, 1287, 1288, 0,
	0, 0, 0, 0, 0, 1258, 1259, 0, 0, 0,
	0, 0, 1281, 1291, 0, 1271, 1272, 1273, 1279, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 1288, 0, 0, 0,
	0, 1289, 0, 1258, 1259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 1279, 0, 0, 0,
	0, 0, 0, 1264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 0, 1278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1270,
	0, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1265, 0, 0, 1241,
	1242, 0, 1274, 1275, 1276, 1284, 1285, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 1282,
	0, 0, 0, 0, 1244, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1243,
	0, 0, 0, 0, 0, 1280, 0, 1263, 1255, 1256,
	1262, 1261, 1257, 1283, 1260, 1254, 1252, 1253, 1245, 1246,
	1247, 1248, 1250, 1251, 0, 0, 0, 0, 0, 0,
	0, 0, 2135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1280, 0, 0, 1255, 1256, 1262, 1261,
	1257, 1283, 0, 1254, 1252, 1253, 1245, 1246, 1247, 1248,
	1250, 1251, 0, 0, 1266, 1267, 1268, 1269, 0, 0,
	2134, 0, 0, 1249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1241, 1242, 0, 1274, 1275, 1276,
	1284, 1285, 1286, 0, 0, 1281, 1291, 0, 1271, 1272,
	1273, 0, 1277, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 1290, 0, 0, 0, 0, 0, 1287, 1288,
	0, 0, 0, 0, 0, 0, 1258, 1259, 0, 0,
	0, 0, 0, 0, 1243, 0, 0, 0, 0, 1279,
	0, 0, 1263, 0, 0, 0, 1264, 0, 0, 1260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	1267, 1268, 1269, 0, 0, 0, 0, 0, 1249, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	1281, 1291, 0, 1271, 1272, 1273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1282, 1287, 1288, 0, 0, 0, 0, 0,
	0, 1258, 1259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1280, 0, 0, 1255,
	1256, 1262, 1261, 1257, 1283, 0, 1254, 1252, 1253, 1245,
	1246, 1247, 1248, 1250, 1251, 0, 0, 1270, 0, 0,
	0, 0, 0, 2133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 1241, 1242, 0, 1274, 1275,
	1276, 1284, 1285, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 1282, 0, 0,
	1244, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1243, 0, 0, 0, 0,
	0, 0, 0, 1263, 0, 0, 0, 0, 0, 0,
	1260, 0, 0, 0, 0, 1241, 1242, 0, 1274, 1275,
	1276, 1284, 1285, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	1244, 1280, 0, 1290, 1255, 1256, 1262, 1261, 1257, 1283,
	0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251,
	1266, 1267, 1268, 1269, 2913, 1243, 0, 0, 0, 1249,
	0, 0, 0, 1263, 0, 0, 0, 0, 0, 0,
	1260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1291, 0, 1271, 1272, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 1288, 0, 0, 0, 0,
	0, 0, 1258, 1259, 0, 0, 0, 0, 0, 0,
	1266, 1267, 1268, 1269, 0, 1279, 0, 0, 0, 1249,
	0, 0, 1264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1289, 0,
	0, 1281, 1291, 0, 1271, 1272, 1273, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 1288, 0, 0, 0, 0,
	0, 0, 1258, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 1270, 0,
	0, 0, 1264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1265, 0, 0, 1289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1265, 1241, 1242, 0, 1274,
	1275, 1276, 1284, 1285, 1286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 0, 1282, 0,
	0, 1244, 1280, 0, 1290, 1255, 1256, 1262, 1261, 1257,
	1283, 0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250,
	1251, 0, 0, 0, 0, 2853, 1243, 0, 0, 0,
	0, 0, 0, 0, 1263, 0, 0, 0, 0, 0,
	0, 1260, 0, 0, 0, 0, 1241, 1242, 0, 1274,
	1275, 1276, 1284, 1285, 1286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 1244, 1280, 0, 1290, 1255, 1256, 1262, 1261, 1257,
	1283, 0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250,
	1251, 1266, 1267, 1268, 1269, 2802, 1243, 0, 0, 0,
	1249, 0, 0, 0, 1263, 0, 0, 0, 0, 0,
	0, 1260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 1291, 0, 1271, 1272, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 1288, 0, 0, 0,
	0, 0, 0, 1258, 1259, 0, 0, 0, 0, 0,
	0, 1266, 1267, 1268, 1269, 0, 1279, 0, 0, 0,
	1249, 0, 0, 1264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	0, 0, 1281, 1291, 0, 1271, 1272, 1273, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 1288, 0, 0, 0,
	0, 0, 0, 1258, 1259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 0, 0, 1270,
	0, 0, 0, 1264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1265, 0, 0, 1289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 1282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1265, 1241, 1242, 0,
	1274, 1275, 1276, 1284, 1285, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1277, 0, 0, 0, 1282,
	0, 0, 1244, 1280, 0, 1290, 1255, 1256, 1262, 1261,
	1257, 1283, 0, 1254, 1252, 1253, 1245, 1246, 1247, 1248,
	1250, 1251, 0, 0, 0, 0, 2770, 1243, 0, 0,
	0, 0, 0, 0, 0, 1263, 0, 0, 0, 0,
	0, 0, 1260, 0, 0, 0, 0, 1241, 1242, 0,
	1274, 1275, 1276, 1284, 1285, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1277, 0, 0, 0, 0,
	0, 0, 1244, 1280, 0, 1290, 1255, 1256, 1262, 1261,
	1257, 1283, 0, 1254, 1252, 1253, 1245, 1246, 1247, 1248,
	1250, 1251, 1266, 1267, 1268, 1269, 2764, 1243, 0, 0,
	0, 1249, 0, 0, 0, 1263, 0, 0, 0, 0,
	0, 0, 1260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1281, 1291, 0, 1271, 1272, 1273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 1288, 0, 0,
	0, 0, 0, 0, 1258, 1259, 0, 0, 0, 0,
	0, 0, 1266, 1267, 1268, 1269, 0, 1279, 0, 0,
	0, 1249, 0, 0, 1264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1289, 0, 0, 1281, 1291, 0, 1271, 1272, 1273, 0,
	0, 0, 0, 0, 1278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 1288, 0, 0,
	0, 0, 0, 0, 1258, 1259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	1270, 0, 0, 0, 1264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	1289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 1241, 1242,
	0, 1274, 1275, 1276, 1284, 1285, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 0, 0, 0,
	1282, 0, 0, 1244, 1280, 0, 1290, 1255, 1256, 1262,
	1261, 1257, 1283, 0, 1254, 1252, 1253, 1245, 1246, 1247,
	1248, 1250, 1251, 0, 0, 0, 0, 2758, 1243, 0,
	0, 0, 0, 0, 0, 0, 1263, 0, 0, 0,
	0, 0, 0, 1260, 0, 0, 0, 0, 1241, 1242,
	0, 1274, 1275, 1276, 1284, 1285, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 1244, 1280, 0, 1290, 1255, 1256, 1262,
	1261, 1257, 1283, 0, 1254, 1252, 1253, 1245, 1246, 1247,
	1248, 1250, 1251, 1266, 1267, 1268, 1269, 2675, 1243, 0,
	0, 0, 1249, 0, 0, 0, 1263, 0, 0, 0,
	0, 0, 0, 1260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 1291, 0, 1271, 1272, 1273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 1288, 0,
	0, 0, 0, 0, 0, 1258, 1259, 0, 0, 0,
	0, 0, 0, 1266, 1267, 1268, 1269, 0, 1279, 0,
	0, 0, 1249, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1289, 0, 0, 1281, 1291, 0, 1271, 1272, 1273,
	0, 0, 0, 0, 0, 1278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 1288, 0,
	0, 0, 0, 0, 0, 1258, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 1270, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 0,
	0, 1289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 0, 0,
	0, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 1241,
	1242, 0, 1274, 1275, 1276, 1284, 1285, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 1282, 0, 0, 1244, 1280, 0, 1290, 1255, 1256,
	1262, 1261, 1257, 1283, 0, 1254, 1252, 1253, 1245, 1246,
	1247, 1248, 1250, 1251, 0, 0, 0, 0, 2632, 1243,
	0, 0, 0, 0, 0, 0, 0, 1263, 0, 0,
	0, 0, 0, 0, 1260, 0, 0, 0, 0, 1241,
	1242, 0, 1274, 1275, 1276, 1284, 1285, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 1244, 1280, 0, 1290, 1255, 1256,
	1262, 1261, 1257, 1283, 0, 1254, 1252, 1253, 1245, 1246,
	1247, 1248, 1250, 1251, 1266, 1267, 1268, 1269, 2631, 1243,
	0, 0, 0, 1249, 0, 0, 0, 1263, 0, 0,
	0, 0, 0, 0, 1260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 1291, 0, 1271, 1272,
	1273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 1288,
	0, 0, 0, 0, 0, 0, 1258, 1259, 0, 0,
	0, 0, 0, 0, 1266, 1267, 1268, 1269, 0, 1279,
	0, 0, 0, 1249, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1289, 0, 0, 1281, 1291, 0, 1271, 1272,
	1273, 0, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 1288,
	0, 0, 0, 0, 0, 0, 1258, 1259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 1270, 0, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	0, 0, 1289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	1241, 1242, 0, 1274, 1275, 1276, 1284, 1285, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 1282, 0, 0, 1244, 1280, 0, 1290, 1255,
	1256, 1262, 1261, 1257, 1283, 0, 1254, 1252, 1253, 1245,
	1246, 1247, 1248, 1250, 1251, 0, 0, 0, 0, 2603,
	1243, 0, 0, 0, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 1260, 0, 0, 0, 0,
	1241, 1242, 0, 1274, 1275, 1276, 1284, 1285, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 1244, 1280, 0, 1290, 1255,
	1256, 1262, 1261, 1257, 1283, 0, 1254, 1252, 1253, 1245,
	1246, 1247, 1248, 1250, 1251, 1266, 1267, 1268, 1269, 2425,
	1243, 0, 0, 0, 1249, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 1260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 1291, 0, 1271,
	1272, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	1288, 0, 0, 0, 0, 0, 0, 1258, 1259, 0,
	0, 0, 0, 0, 0, 1266, 1267, 1268, 1269, 0,
	1279, 0, 0, 0, 1249, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1289, 0, 0, 1281, 1291, 0, 1271,
	1272, 1273, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	1288, 0, 0, 0, 0, 0, 0, 1258, 1259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 1270, 0, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1265, 0, 0, 1289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1265, 1241, 1242, 0, 1274, 1275, 1276, 1284, 1285, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 1282, 0, 0, 1244, 1280, 0, 1290,
	1255, 1256, 1262, 1261, 1257, 1283, 0, 1254, 1252, 1253,
	1245, 1246, 1247, 1248, 1250, 1251, 0, 0, 0, 0,
	2398, 1243, 0, 0, 0, 0, 0, 0, 0, 1263,
	0, 0, 0, 0, 0, 0, 1260, 0, 0, 0,
	0, 1241, 1242, 0, 1274, 1275, 1276, 1284, 1285, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 1244, 1280, 0, 1290,
	1255, 1256, 1262, 1261, 1257, 1283, 0, 1254, 1252, 1253,
	1245, 1246, 1247, 1248, 1250, 1251, 1266, 1267, 1268, 1269,
	1752, 1243, 0, 0, 0, 1249, 0, 0, 0, 1263,
	0, 0, 0, 0, 0, 0, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 1291, 0,
	1271, 1272, 1273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1288, 0, 0, 0, 0, 0, 0, 1258, 1259,
	0, 0, 0, 0, 0, 0, 1266, 1267, 1268, 1269,
	0, 1279, 0, 0, 0, 1249, 2995, 0, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1289, 0, 0, 1281, 1291, 0,
	1271, 1272, 1273, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1288, 0, 0, 0, 0, 0, 0, 1258, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1270, 0, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 1282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2994, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 1241, 1242, 0, 1274, 1275, 1276, 1284, 1285,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 1282, 0, 0, 1244, 1280, 0,
	1290, 1255, 1256, 1262, 1261, 1257, 1283, 0, 1254, 1252,
	1253, 1245, 1246, 1247, 1248, 1250, 1251, 0, 0, 2102,
	0, 0, 1243, 0, 0, 0, 0, 0, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 1260, 0, 0,
	0, 1241, 1242, 0, 1274, 1275, 1276, 1284, 1285, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 2075, 0, 1244, 0, 1280, 1290,
	0, 1255, 1256, 1262, 1261, 1257, 1283, 0, 1254, 1252,
	1253, 1245, 1246, 1247, 1248, 1250, 1251, 1266, 1267, 1268,
	1269, 1243, 0, 0, 0, 0, 1249, 0, 2182, 1263,
	0, 2181, 0, 0, 0, 0, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 1291,
	0, 1271, 1272, 1273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2076, 0, 0, 0, 0, 0, 0,
	0, 1287, 1288, 0, 0, 0, 0, 0, 0, 1258,
	1259, 0, 0, 0, 0, 0, 1266, 1267, 1268, 1269,
	0, 0, 1279, 0, 0, 1249, 0, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1289, 0, 1281, 1291, 0,
	1271, 1272, 1273, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1288, 0, 0, 0, 0, 0, 0, 1258, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 0, 1270, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 1282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1850, 0, 0,
	0, 1265, 0, 1241, 1242, 0, 1274, 1275, 1276, 1284,
	1285, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 1282, 1849, 0, 0, 1244, 1280,
	0, 1290, 1255, 1256, 1262, 1261, 1257, 1283, 0, 1254,
	1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251, 0, 0,
	0, 0, 0, 1243, 0, 0, 0, 0, 0, 0,
	0, 1263, 0, 0, 0, 0, 0, 0, 1260, 0,
	0, 0, 1241, 1242, 0, 1274, 1275, 1276, 1284, 1285,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 1244, 1280, 0,
	1290, 1255, 1256, 1262, 1261, 1257, 1283, 0, 1254, 1252,
	1253, 1245, 1246, 1247, 1248, 1250, 1251, 0, 1266, 1267,
	1268, 1269, 1243, 0, 0, 0, 0, 1249, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 1260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	1291, 0, 1271, 1272, 1273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 1288, 0, 0, 0, 0, 0, 0,
	1258, 1259, 0, 0, 0, 0, 0, 1266, 1267, 1268,
	1269, 0, 0, 1279, 0, 0, 1249, 0, 0, 0,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1289, 0, 1281, 1291,
	0, 1271, 1272, 1273, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 1288, 0, 0, 0, 0, 0, 0, 1258,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 0, 0, 0, 1270, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1265, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	693, 0, 0, 0, 0, 0, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 1241, 1242, 0, 1274, 1275, 1276, 1284,
	1285, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 1282, 0, 0, 1244, 0,
	1280, 1290, 0, 1255, 1256, 1262, 1261, 1257, 1283, 0,
	1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251, 0,
	0, 0, 0, 1243, 0, 0, 0, 0, 0, 0,
	0, 1263, 0, 0, 0, 0, 0, 0, 1260, 0,
	0, 0, 1241, 1242, 0, 1274, 1275, 1276, 1284, 1285,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 1244, 0, 1280,
	1290, 0, 1255, 1256, 1262, 1261, 1257, 1283, 0, 1254,
	1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251, 1266, 1267,
	1268, 1269, 1243, 0, 0, 0, 0, 1249, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 1260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	1291, 0, 1271, 1272, 1273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 1288, 0, 0, 0, 0, 0, 0,
	1258, 1259, 0, 0, 0, 0, 0, 1266, 1267, 1268,
	1269, 0, 0, 1279, 0, 0, 1249, 0, 0, 0,
	1264, 2191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1289, 0, 1281, 1291,
	0, 1271, 1272, 1273, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 1288, 0, 0, 0, 0, 0, 0, 1258,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 0, 0, 0, 1270, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1265, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 0, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1270, 2402, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 0, 1241, 1242, 0, 1274, 1275, 1276,
	1284, 1285, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 0, 0, 1282, 2186, 0, 0, 1244,
	1280, 0, 1290, 1255, 1256, 1262, 1261, 1257, 1283, 0,
	1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251, 0,
	0, 0, 0, 0, 1243, 0, 0, 0, 0, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 1260,
	0, 0, 0, 1241, 1242, 0, 1274, 1275, 1276, 1284,
	1285, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 1244, 1280,
	0, 1290, 1255, 1256, 1262, 1261, 1257, 1283, 0, 1254,
	1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251, 0, 1266,
	1267, 1268, 1269, 1243, 0, 0, 0, 0, 1249, 0,
	0, 1263, 0, 0, 0, 0, 0, 0, 1260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1281, 1291, 0, 1271, 1272, 1273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 1288, 0, 0, 0, 0, 0,
	0, 1258, 1259, 0, 0, 0, 0, 0, 1266, 1267,
	1268, 1269, 0, 0, 1279, 0, 0, 1249, 0, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1289, 0, 1281,
	1291, 0, 1271, 1272, 1273, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 1288, 0, 0, 0, 0, 0, 0,
	1258, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 0, 1270, 0, 0,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 0, 1289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 1282, 0, 0,
	0, 0, 0, 0, 0, 2148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1265, 0, 1241, 1242, 0, 1274, 1275,
	1276, 1284, 1285, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 1282, 2132, 0, 0,
	1244, 1280, 0, 1290, 1255, 1256, 1262, 1261, 1257, 1283,
	0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251,
	0, 0, 0, 0, 0, 1243, 0, 0, 0, 0,
	0, 0, 0, 1263, 0, 0, 0, 0, 0, 0,
	1260, 0, 0, 0, 1241, 1242, 0, 1274, 1275, 1276,
	1284, 1285, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 1244,
	1280, 0, 1290, 1255, 1256, 1262, 1261, 1257, 1283, 0,
	1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251, 0,
	1266, 1267, 1268, 1269, 1243, 0, 0, 0, 0, 1249,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 1260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1291, 0, 1271, 1272, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 1288, 0, 0, 0, 0,
	0, 0, 1258, 1259, 0, 0, 0, 0, 0, 1266,
	1267, 1268, 1269, 0, 0, 1279, 0, 0, 1249, 0,
	0, 0, 1264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1289, 0,
	1281, 1291, 0, 1271, 1272, 1273, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 1288, 0, 0, 0, 0, 0,
	0, 1258, 1259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 1270, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1265, 0, 1289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1241,
	1242, 1278, 1274, 1275, 1276, 1284, 1285, 1286, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1244, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1243,
	0, 0, 0, 0, 1265, 1241, 1242, 1263, 1274, 1275,
	1276, 1284, 1285, 1286, 1260, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 1282, 0, 0,
	1244, 0, 1280, 1290, 0, 1255, 1256, 1262, 1261, 1257,
	1283, 0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250,
	1251, 0, 0, 0, 0, 1243, 0, 0, 0, 0,
	0, 0, 0, 1263, 1266, 1267, 1268, 1269, 0, 0,
	1260, 0, 0, 1249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 1291, 0, 1271, 1272,
	1273, 1280, 0, 0, 1255, 1256, 1262, 1261, 1257, 1283,
	0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250, 1251,
	1266, 1267, 1268, 1269, 0, 0, 1258, 1259, 0, 1249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 0, 0, 1264, 0, 0, 0,
	0, 1281, 1291, 0, 1271, 1272, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 1288, 141, 0, 0, 0,
	0, 38, 1258, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 136, 0, 1279, 0, 0, 0, 0,
	0, 0, 1264, 0, 0, 0, 42, 0, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 1289, 0,
	44, 138, 0, 0, 0, 0, 0, 0, 0, 1265,
	0, 0, 43, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1282, 0, 0, 50, 0, 0, 0, 52,
	0, 0, 0, 56, 0, 0, 139, 0, 1270, 0,
	57, 69, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1280, 0, 0, 1255,
	1256, 1262, 1261, 1257, 1283, 0, 1254, 1252, 1253, 1245,
	1246, 1247, 1248, 1250, 1251, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1280, 0, 0, 1255, 1256, 1262, 1261, 1257,
	1283, 0, 1254, 1252, 1253, 1245, 1246, 1247, 1248, 1250,
	1251, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 134, 63, 0, 64, 0, 65, 0,
	0, 0, 140, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 1548, 1533,
	1538, 1521, 1558, 1557, 0, 80, 1523, 1522, 106, 0,
	0, 0, 0, 1566, 1565, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 1559, 0, 1555, 1554, 0, 0, 135,
	0, 0, 0, 0, 0, 1553, 0, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 0, 0, 0,
	1552, 1550, 1551, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 4, 0,
	0, 0, 1537, 0, 0, 0, 0, 1532, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1541, 1536, 1542,
	1543, 1544, 1545, 1546, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 1563, 1564, 0, 1548, 1533, 1538,
	1521, 1558, 1557, 0, 0, 1523, 1522, 0, 0, 0,
	0, 0, 1566, 1565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1556, 0, 0, 0,
	1534, 1535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1559, 0, 1555, 1554, 0, 0, 0, 0,
	0, 0, 0, 0, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 1549, 0, 0, 0, 1673, 1671, 1672,
	1675, 1674, 0, 0, 0, 0, 0, 0, 0, 1552,
	1550, 1551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1526, 1527, 1528, 1529, 0, 0, 1532, 0, 0, 0,
	0, 0, 0, 0, 1547, 1530, 1541, 1536, 1542, 1543,
	1544, 1545, 1546, 0, 1540, 1568, 626, 0, 657, 0,
	0, 0, 0, 1563, 1564, 0, 0, 0, 0, 0,
	1524, 0, 0, 1560, 1561, 1562, 0, 0, 633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	631, 0, 1525, 0, 0, 0, 1531, 0, 0, 0,
	0, 1567, 0, 0, 0, 1556, 0, 0, 0, 1534,
	1535, 0, 632, 0, 0, 0, 0, 634, 0, 0,
	0, 662, 0, 0, 0, 0, 0, 640, 641, 0,
	0, 0, 652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1549, 0, 0, 0, 658, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 646, 0, 0, 0, 0, 0, 0, 0, 1526,
	1527, 1528, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1547, 1530, 0, 0, 636, 0, 0,
	0, 0, 0, 630, 1568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 637, 638, 1524,
	0, 0, 1560, 1561, 1562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 639, 1531, 0, 0, 0, 0,
	1567, 0, 0, 0, 0, 0, 0, 643, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 642, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 649, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 647, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 650, 0, 0, 648,
	0, 0, 0, 655, 0, 0, 0, 0, 661, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 653,
}
var sqlPact = [...]int{

	54496, -1000, -17, -1000, -1000, -1000, 193, -1000, -1000, -1000,
	-1000, 192, 190, 188, -1000, 187, 186, 185, 180, 179,
	178, 177, 166, 165, 164, 163, -1000, -1000, 159, -1000,
	-1000, -1000, -1000, 158, 157, 156, -1000, 155, 1578, 28887,
	154, 153, 1677, 46059, 1465, 147, 146, -1000, 144, 1508,
	33726, 1010, 1261, -1000, 131, 129, 1584, 45690, 4568, 31482,
	1255, 1832, 45315, 28512, 1799, 31107, 44940, -1000, -1000, 978,
	-1000, -1000, 44565, 128, 127, 126, 125, 124, -1000, 122,
	44190, 121, 118, 115, 114, 113, 109, 107, 106, 105,
	104, 103, 95, 93, 91, 84, 81, 79, 78, 76,
	68, -1000, 65, 62, 61, -1000, 55084, 60, 59, 58,
	-1000, 1253, 57, 55, 54, 52, 51, -1000, -1000, 49,
	48, 46, 42, 41, 40, 123, 37, 36, 35, 27,
	24, -1000, 1087, 372, 2123, 12114, 1205, 1201, 1157, 1148,
	1127, 712, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48642, 46059, 23, -43, 21, -1000, 2348, 675, 22091, 54496,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 33351, 32976, 32601, 27030, 43815, 43440, 9724, 9724, 888,
	-1000, -1000, -1000, -1000, -1000, -19, 29994, 46059, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 230, -1000,
	-1000, -1000, -1000, -1000, 18225, 17813, 341, -1000, -1000, -1000,
	229, -1000, -1000, -1000, -1000, 1204, -1000, -1000, -1000, -1000,
	43065, 42690, 42315, 26645, 26260, 41940, 1676, 1675, 41565, -1000,
	-1000, 41190, -1000, -1000, 2210, 1829, 1827, 32226, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40821, 40446, 40071,
	39696, 39321, 25875, 25490, 538, -1000, -1000, -1000, -1000, 22841,
	-1000, -1000, -1000, -1000, -1000, 19, -1000, 18, 17, -1000,
	16, 15, 14, 8, 4, 3, 2, -1, -1000, -2,
	-4, -1000, -5, -6, -1000, -8, -9, 1097, 1490, 1489,
	38946, 962, 1462, 20, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 46059, -1000, 18623, -1000, 537, -1000, 1789, -1000, 18623,
	-1000, 1460, 222, 1343, -1000, -1000, -1000, 1329, 971, -1000,
	-1000, 46059, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2476,
	1284, 533, 38571, -1000, 1744, -1000, 669, 12910, -1000, 840,
	-1000, 12910, 219, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1823, 1964,
	2437, 25105, 1399, 2230, 2200, 2475, 1613, 2169, 2143, 2119,
	2099, 2088, 2474, 1052, 2473, 953, 786, 2471, 1942, 1892,
	2457, 1422, 797, 2470, 2469, 1787, 1785, -1000, -1000, -1000,
	-1000, 1011, -1000, -1000, -1000, -1000, 35202, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1087, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1576,
	2174, 2174, 2174, 2270, 328, 325, -1000, 123, -1000, 1492,
	-1000, 1280, -1000, -1000, -1000, 54054, -1000, -1000, 18623, 18623,
	18623, 18623, 18623, 1225, -1000, -1000, -1000, 560, -1000, 532,
	531, 10507, -1000, -1000, 2407, -1000, -1000, -1000, 339, -1000,
	-1000, 18623, -1000, 217, -1000, -1000, -1000, -1000, 530, 2463,
	-1000, 732, -1000, -1000, -1000, 636, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1834, 487, 483, -1000, 482, 481, -1000,
	-1000, -1000, 529, 528, 527, 525, 519, 517, -1000, 1113,
	-1000, 713, -1000, -1000, 713, 713, -1000, 470, 470, 516,
	515, 471, -1000, -1000, 512, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 511, 470, 500, 499, -1000, -1000, -1000,
	497, 681, 628, -1000, 496, 495, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1286, -1000, -1000, 1286, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 887, 47535, -1000, -1000,
	-1000, -21, 46059, -1000, 341, -21, -1000, -1000, 494, -1000,
	13308, 13308, 13308, -1000, -1000, 1456, 18623, -1000, 2277, -1000,
	3127, -201, 493, 606, 606, -1000, 20966, 567, 24720, -1000,
	487, 483, 482, 481, -1000, 212, -1000, -1000, -1000, -1000,
	-1000, 1986, 2064, 876, -1000, 1063, 2062, -1000, 2949, 2061,
	1061, -1000, -1000, 698, 2059, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1333, -1000, -1000, 1468, 2052, -63,
	1877, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1484,
	-1000, 27399, 29994, -22, -1000, -1000, -41, -1000, 9341, 54054,
	-1000, 54054, -1000, 1784, 46059, 9724, 46059, 46059, -1000, 479,
	1543, 1455, -1000, -1000, 2949, 1541, -1000, -1000, 686, 1540,
	-1000, -1000, 1530, -1000, 341, -1000, -1000, 38196, 48273, 686,
	1529, -1000, -1000, -1000, 35202, -1000, 46059, -1000, 46059, -1000,
	997, -1000, 47904, 133, 2049, -1000, -1000, 133, 2036, -1000,
	133, 2033, -1000, 130, 2030, -1000, -1000, 1298, 2019, -1000,
	-42, 2017, -1000, -1000, -42, 2015, -1000, -1000, 18623, -51,
	-1000, -1000, -1000, 675, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 37821, 29625, 46059, 31851, 667, 54054, 2365, 54908, 27399,
	54054, 29625, 46059, 1831, -1000, 37446, 37071, 2276, 668, -1000,
	-1000, 46059, -1000, 18623, -1000, 2362, 1638, -33, -1000, -1000,
	-1000, -1000, -1000, 1583, 1579, 838, 973, -1000, 12910, 12910,
	2132, -1000, 210, 9724, -1000, -1000, 930, -1000, -1000, -1000,
	-1000, -1000, 36696, -1000, -1000, -1000, 1274, 46059, -1000, -1000,
	1819, -1000, 29256, 46059, -1000, 46059, -1000, 46059, -1000, 46059,
	-1000, 46059, -1000, -1000, -1000, -1000, -1000, 1955, 1136, 1813,
	-1000, 46059, -1000, 46059, -1000, -1000, -1000, 1577, -1000, -1000,
	-1000, 36327, 35952, 35577, -1000, -1000, 1104, 927, -1000, -1000,
	134, -1000, -1000, 1576, -1000, 1402, 1648, 17401, 1653, 18623,
	123, -1000, -1000, 123, 123, 11702, -1000, -1000, -1000, 46059,
	-1000, 54759, 54908, 9724, 898, 18623, 18623, 18623, 18623, 18623,
	18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623,
	18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623,
	18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623, 18623,
	1618, 18623, 886, 18623, 18623, 18623, 18623, 1106, -1000, -1000,
	1245, 364, 1299, -1000, 2413, 2413, 2413, 4581, 4581, 453,
	560, -1000, 18623, -1000, 88, 18623, 325, 51950, -20, 10109,
	-1000, -1000, -1000, -1000, 16989, 705, 54054, 8958, 6501, -1000,
	2451, 1096, 1845, 1731, 478, 631, 624, 623, 543, 18623,
	18623, 18623, 18623, 18623, 18623, -1000, -1000, -1000, -1000, -1000,
	-1000, 2407, -1000, 16591, 16179, -1000, 2450, 15767, 15355, -1000,
	14943, 19817, 14531, 894, 892, 885, 18623, 10905, -1000, -33,
	-1000, 47535, -1000, 46059, -21, 2355, 18623, 221, -1000, 52933,
	-1000, 221, 221, 476, -57, 54054, 1644, 1636, 22466, 1843,
	1260, 1260, 1260, -1000, 475, 555, 606, 7024, 14119, 34095,
	1239, 34095, 232, 323, 20591, 2277, -1000, -1000, 46059, 9724,
	-30, 1132, -1000, 30732, 2183, 2180, 2175, 987, -1000, 2267,
	35202, 2292, 88, 2203, 1783, 884, 35202, 2949, -1000, 54908,
	-1000, 1700, 2260, 1007, 986, 1007, 1007, 967, 35202, 879,
	1197, 27399, 2191, 878, -31, 2286, 88, 2190, 1781, 871,
	-1000, -1000, 46059, 9724, 2188, 922, 601, -22, 29994, 46059,
	208, -1000, 946, -59, 207, 1643, 1642, 168, -1000, 30363,
	2352, 2010, 46059, -1000, 2949, 1975, -1000, 1163, -1000, 1972,
	1956, 2341, 1440, 1527, -1000, -1000, -1000, 1429, 1523, 908,
	1943, 702, 303, 2339, 303, 23970, -1000, 46059, -1000, 46059,
	-1000, -1000, 46059, -1000, 46059, -1000, 46059, -1000, 46059, 46059,
	-1000, 46059, 27399, 27399, 27399, -65, 5835, 28137, 870, -34,
	-1000, 736, 30363, 621, -66, -1000, 939, -1000, -1000, -1000,
	267, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 713, 472,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 471, 1113, 470, 470, 470, -1000, -1000, -1000,
	681, 628, -1000, -1000, -1000, 713, 713, -1000, -1000, -179,
	1774, -41, 31851, 601, -1000, 601, -1000, 1804, -1000, 2201,
	660, -67, 778, -33, -1000, 1286, -1000, 1417, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2460, -1000, 2426, -1000, -1000, 2447, -23, -1000, -23,
	-1000, 9724, -1000, 46059, -1000, -1000, -1000, -1000, -1000, -1000,
	46059, -1000, 46059, -1000, -1000, -1000, -1000, -1000, -1000, 588,
	-1000, 1794, -1000, 5835, 206, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 46059, 46059, 46059, -1000, 35202, -1000, -1000,
	-1000, -1000, 54054, -1000, 439, -1000, -1000, 54054, 1033, 1657,
	-1000, 1657, -24, -1000, 52651, 1609, 46059, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 665,
	440, 440, 872, 872, 872, 872, 2370, 2937, 3773, 940,
	3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 645, 365,
	365, 645, 645, 645, 645, 645, 365, 365, 365, 3744,
	3744, 3744, 4581, 54335, 5054, 18623, 18623, 868, 1237, 364,
	5054, 18623, 5054, 5054, 5054, 5054, -1000, 1330, -1000, -1000,
	-1000, -1000, 1769, 469, 19817, 19817, -1000, -1000, -1000, 10507,
	18623, -1000, -1000, -1000, -1000, 467, 18623, -1000, 52231, -242,
	322, -197, -1000, 18623, 552, -73, -1000, 981, -1000, 18623,
	205, -1000, -1000, -35, 18623, 18623, 18623, 315, -1000, 314,
	-1000, 861, -1000, 853, 851, 846, -1000, 463, 1228, 461,
	458, 18623, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	53985, 49709, 49426, 49388, 5917, -72, -74, 313, -1000, 1761,
	-197, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 312, -1000,
	311, -77, -1000, -80, -1000, 308, -1000, 53703, -197, 306,
	4872, -1000, 19817, 19817, 19817, 10507, 455, 305, -1000, 52582,
	-1000, 640, 635, 634, 53634, 13707, 13707, 13707, 301, 53352,
	18623, -197, -1000, -1000, 452, -82, 702, 13308, 21716, 9724,
	-1000, 702, 702, 18623, -1000, 18623, 22466, 22466, 2144, 1621,
	22466, -1000, -1000, -1000, -1000, 34095, 425, 606, 34095, -1000,
	2407, 1629, -1000, 299, -1000, -1000, -1000, 46059, 341, -1000,
	-1000, 606, 294, 201, 1291, 46059, 46059, 46059, -1000, -1000,
	1519, 47166, 1518, 54908, 46059, -1000, -1000, 448, 447, 1608,
	1604, 46059, 46059, 46797, 46428, 46059, 1155, 1453, 1894, 88,
	-1000, 633, 446, 46059, 1059, -1000, -1000, -1000, -1000, -1000,
	46059, -1000, -1000, 2446, -1000, 1007, -1000, -1000, -1000, 1007,
	2949, 1055, 46059, 27399, 697, 629, 46059, 1199, 88, -1000,
	613, 445, 9724, 1188, -1000, 612, 46059, 1720, -1000, 1483,
	-1000, -1000, 8575, -1000, -1000, 9724, 1708, 1708, 9724, 291,
	-25, -1000, -1000, -1000, -1000, -1000, -1000, 1670, 46059, 535,
	46059, 88, 46059, 182, 46059, 27399, 27399, 27399, 88, 46059,
	1929, 46059, 1928, 2086, 581, 46059, 1292, 18623, 1152, -1000,
	23216, 721, 46059, 1034, 167, -1000, -1000, -1000, 13, 46059,
	-1000, -1000, 133, 133, 133, -1000, 130, 1298, -1000, -42,
	-42, -1000, -1000, -1000, 46059, 2375, 27399, -83, -1000, 723,
	842, 821, -1000, 54908, -1000, 557, 767, -1000, 2439, 444,
	2407, -1000, 684, 34833, 46059, 92, -1000, 695, 1509, -1000,
	12910, 12910, -1000, 1286, -1000, -1000, 1082, -1000, 1126, -1000,
	-1000, -1000, -1000, 12910, -1000, -1000, -41, -41, -1000, -1000,
	251, -1000, 46059, -1000, -1000, -1000, -1000, 1033, -1000, 18623,
	-1000, -1000, -1000, 11702, -1000, -1000, -1000, 46059, -124, 18623,
	5054, 5054, 18623, 19817, 19817, -1000, 5054, -1000, -1000, -1000,
	-1000, -1000, 1754, 442, 18623, 54908, 4829, 3927, -88, 645,
	18623, -26, -1000, 18623, -1000, 51880, -1000, -1000, 429, 2081,
	-1000, 18623, 53283, 8192, 287, 12512, -1000, 53002, -50, -50,
	-1000, 2459, 1555, 1466, 1098, 983, 2438, -1000, 24345, 703,
	1292, 51599, 54759, 54908, 18623, 18623, 18623, -1000, -1000, 2407,
	-1000, 18623, -1000, -1000, -1000, -1000, -1000, 1752, 18623, -1000,
	54759, 54908, 19817, 19817, 19817, 19817, 19817, 19817, 19817, 19817,
	19817, 19817, 19817, 19817, 19817, 19817, 19817, 19817, 19817, 19817,
	19817, 1616, 19817, 2408, 2408, 2408, -27, 18623, -1000, 1760,
	1752, 18623, 18623, -1000, -1000, -1000, 54908, 286, 284, 283,
	-1000, 18623, -197, 621, -1000, 1730, -1000, -110, -1000, 2277,
	-1000, -1000, 1730, 1730, -95, 54054, -1000, 2144, -1000, 437,
	18623, 22466, -1000, 550, -1000, -96, -1000, 34095, -1000, 549,
	-234, -1000, 597, -1000, 606, 341, -1000, 34095, -1000, 9724,
	-1000, -1000, 833, 832, -1000, 1923, -1000, 1515, -1000, 725,
	-1000, 1337, 18623, 21341, 424, 414, 1357, -1000, 1907, 1298,
	1905, 1298, -1000, -1000, 677, -1000, 407, 406, -1000, -30,
	1081, -1000, 23601, 18623, -1000, 827, -1000, -1000, -1000, 2949,
	818, -1000, -1000, 1142, 23601, -1000, -1000, -1000, 23601, 18623,
	-1000, -31, 815, 23601, 1864, 684, 1751, 935, -1000, -1000,
	-1000, -1000, -1000, -1000, 198, 1695, 30363, 46059, 398, 46059,
	392, -1000, -1000, 391, 46059, 2949, -1000, 686, -1000, -1000,
	731, 9724, 390, 9724, 1592, 581, 27768, -1000, 686, 1648,
	54054, -1000, 1034, 11303, 2178, -97, -1000, 197, -1000, -1000,
	-1000, 702, 23970, 22466, 18623, 2468, -98, -1000, -1000, -1000,
	-1000, -1000, -41, 1328, 2140, 2140, -1000, 2429, -1000, 548,
	282, 2407, 280, -1000, -32, 387, -1000, 596, 595, -41,
	46059, -1000, 1288, 9724, 46059, 46059, 9724, 46059, -1000, -1000,
	-33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1370, 51529,
	-1000, 2224, 9724, 2378, 5054, 3188, 716, 18623, 54908, 54279,
	-103, 18623, 18623, -1000, 279, 18623, 546, 54054, -1000, -1000,
	-1000, 54054, 18623, 183, -1000, 2458, 18623, 278, 275, 274,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 272, -1000,
	-1000, 49011, -1000, 18623, 271, -1000, 269, 265, 427, 51248,
	51178, 263, 54054, 1760, 54054, -1000, -1000, 600, 600, 961,
	961, 961, 961, 2408, 951, 975, 849, 388, 388, 388,
	513, 408, 408, 388, 388, 388, 1750, 1617, 386, 1412,
	18623, 259, -1000, -1000, 54054, 54054, 255, -1000, -1000, -1000,
	-197, 252, 1727, 2248, -1000, 22466, 1727, 1727, -1000, -1000,
	46059, 54054, -1000, -201, -1000, 2407, -1000, -1000, 1629, -1000,
	7421, 34095, -1000, -1000, 135, 46059, 46059, 46059, 1897, -1000,
	3059, -1000, 50897, -111, -1000, 2219, 2219, 18623, 168, -1000,
	-1000, 385, 21341, 46059, -1000, 1631, 1637, 757, 46059, -1000,
	46059, -1000, -1000, 46059, 46059, 46059, 46059, 46059, -1000, 374,
	168, -112, 46059, 46059, 27399, -1000, -1000, -114, 9724, -1000,
	2184, -1000, 27399, 875, 9724, 1199, 1714, -1000, 371, 21341,
	369, 46059, 30363, 2319, -1000, -1000, -1000, 368, 1740, 1425,
	21341, 1398, 1585, 581, 27768, -1000, 908, 1034, -1000, -1000,
	-36, -1000, 428, 88, 46059, 2467, 1292, -1000, -37, 54054,
	-1000, 590, -1000, 2126, -1000, 2125, 544, -1000, -1000, 248,
	-1000, 34464, 34464, 27399, 27399, -41, 1605, -1000, -1000, 1203,
	1475, -1000, -1000, -1000, -1000, 2224, 18623, 18623, 54279, -120,
	-1000, 5054, 5054, -1000, 50827, -1000, 54054, 7809, -1000, 53002,
	-1000, -1000, -1000, -1000, 1207, -1000, 50546, -1000, -1000, -1000,
	18623, -1000, -1000, -1000, -1000, 19817, 1746, 367, 54908, 50476,
	-1000, -1000, -1000, 700, 18623, 18623, 2277, 700, 700, -121,
	606, -1000, -1000, -1000, 2407, -1000, 9724, -1000, -1000, -1000,
	46059, -1000, 46059, -1000, 9724, 46059, 1757, 1502, -1000, -1000,
	1602, 366, 19817, 46059, 661, -1000, 1215, 21341, 2224, 9724,
	2224, 50195, 6501, -122, -128, 1501, -1000, 1495, 18623, -1000,
	54908, 1298, 1298, -129, -130, -1000, 814, 808, 18623, 805,
	-1000, -1000, -1000, 799, -1000, 610, -42, 23601, 135, -1000,
	-1000, 1219, 21341, -136, 21341, -137, 241, 88, 21341, -1000,
	46059, -139, 46059, -1000, 581, 27768, -1000, 2086, -1000, 2092,
	46059, 2167, -1000, -1000, -1000, 1648, 364, 362, 355, -1000,
	-1000, -1000, -142, -1000, -1000, -46, -1000, 648, 644, -1000,
	-1000, -1000, 9724, 889, -1000, 5054, 5054, -1000, -1000, -1000,
	-1000, 239, 1292, 2246, -1000, 50125, 3622, 19817, 54908, -144,
	-1000, -1000, 46059, 54054, -197, -1000, -1000, -1000, 34095, 441,
	-1000, 1384, -1000, -1000, -1000, 46059, 1511, -1000, -1000, 18623,
	1412, 354, 18623, -1000, 1695, 352, -1000, -1000, -1000, -1000,
	-1000, -1000, 2219, -35, -1000, 1093, -1000, -1000, 54054, 2216,
	-1000, -1000, 350, 349, 46059, 46059, -50, 348, 347, 23601,
	-1000, 46059, -147, 1215, -149, -1000, 1695, -1000, -150, 731,
	-1000, 346, 27768, -1000, 1592, 882, -152, 46059, 1034, -1000,
	27399, 27399, -1000, 1605, -1000, 46059, -1000, 46059, -1000, 46059,
	-1000, 1025, 18623, -1000, 3622, -157, -1000, -176, -1000, 2304,
	-1000, -1000, -1000, -1000, 1886, 49844, 1522, 46059, 5371, 1199,
	46059, 2224, 238, 46059, 728, 9724, 1203, 1203, -1000, -1000,
	234, 18623, 18623, -1000, 345, -1000, 1695, 1215, 1199, 1215,
	344, 21341, -1000, 1585, 980, -1000, 702, -1000, -1000, -158,
	-159, -1000, -164, -165, -1000, 233, 19419, 19419, -197, -1000,
	46059, 342, 1849, -1000, 1331, 1435, 94, 758, -1000, -171,
	-1000, -1000, 341, -1000, 18623, -1000, -174, -1000, 720, -177,
	-1000, 719, 2458, -182, -184, 46059, 1199, 1695, -1000, 1695,
	21341, -187, -1000, 23970, -1000, 684, 684, -1000, -1000, -1000,
	-1000, -1000, 20200, 1439, 1023, 52301, -1000, -1000, -1000, 46059,
	-1000, 1391, 1385, 1002, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1522, 54054, -1000, 1203, 1705, -1000, 1203, 1745, -1000,
	-1000, -190, -1000, 1199, 1199, -195, -1000, -192, -1000, -1000,
	2373, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2112, -1000,
	749, 1486, 1486, 1331, -1000, 340, -1000, 338, 1273, -1000,
	-1000, 1215, -1000, 19021, -1000, 2385, -1000, -1000, 1570, -1000,
	-1000, 18623, 18623, -1000, -1000, -1000, 1695, -1000, -1000, -1000,
	-1000, -198, -210, 1199, 1199, 793, -1000, -1000, 333, 18623,
	-223, 1199, -1000,
}
var sqlPgo = [...]int{

	0, 2937, 2934, 1851, 2931, 2342, 2930, 2928, 2923, 2922,
	2919, 2334, 2918, 2917, 2916, 2913, 2912, 2909, 2908, 2907,
	2906, 2903, 2902, 2900, 2898, 2895, 2893, 2890, 2889, 2888,
	2887, 2886, 2318, 2883, 2285, 2882, 2881, 2879, 2878, 2877,
	2873, 2860, 26, 2858, 2855, 2853, 2852, 2280, 2844, 2843,
	2272, 2840, 2839, 2251, 2835, 2831, 2246, 2225, 2828, 2826,
	2221, 2823, 2820, 2200, 2819, 2193, 2817, 2814, 2187, 2812,
	97, 103, 2182, 2809, 2808, 2160, 2139, 2137, 2807, 2119,
	2805, 2804, 2117, 2105, 2801, 74, 2799, 2798, 2793, 2791,
	2098, 2094, 2790, 2789, 2787, 169, 2784, 2029, 2783, 2781,
	2769, 2768, 2765, 2761, 2760, 2759, 2756, 2755, 2751, 2749,
	2741, 2739, 2734, 2733, 2729, 2728, 2727, 2720, 2719, 2717,
	2716, 2715, 2712, 173, 109, 2711, 2709, 1989, 1898, 2702,
	2700, 45, 43, 16, 69, 125, 179, 4306, 171, 2697,
	2692, 2689, 2688, 2683, 2681, 27, 120, 116, 114, 117,
	2679, 79, 2678, 2677, 55, 39, 22, 20, 77, 2675,
	2673, 2671, 1562, 84, 2670, 2669, 168, 167, 2668, 550,
	34, 91, 123, 110, 205, 50, 2667, 104, 17, 2664,
	148, 59, 2660, 68, 35, 25, 3277, 90, 71, 89,
	178, 149, 147, 143, 118, 797, 2656, 170, 72, 138,
	2653, 2651, 2650, 53, 136, 5, 2, 225, 7, 2649,
	9, 2647, 10, 2644, 2643, 2642, 2641, 28, 108, 101,
	32, 2640, 23, 87, 124, 2638, 155, 2634, 62, 174,
	144, 221, 105, 2632, 76, 15, 70, 2628, 2626, 92,
	158, 2619, 30, 119, 80, 88, 182, 140, 93, 156,
	164, 2617, 2616, 2615, 159, 2610, 133, 111, 2608, 2605,
	86, 24, 2603, 42, 157, 41, 2591, 2590, 102, 2589,
	145, 2586, 2583, 175, 113, 128, 6, 49, 82, 8,
	141, 106, 46, 57, 2582, 3279, 1489, 2032, 36, 2581,
	96, 61, 33, 54, 100, 160, 37, 2579, 2578, 154,
	2577, 2576, 2574, 2572, 2571, 121, 2570, 2569, 2567, 94,
	48, 134, 2566, 99, 47, 254, 152, 131, 172, 115,
	2563, 129, 95, 142, 2562, 56, 2561, 1027, 2559, 130,
	2558, 2557, 2555, 2551, 52, 2550, 2549, 2548, 241, 2544,
	98, 2542, 135, 126, 107, 127, 112, 166, 163, 1060,
	2537, 139, 31, 2529, 202, 21, 0, 2974, 3190, 2523,
	137, 83, 2522, 2520, 2518, 2517, 29, 11, 4, 1,
	14, 12, 146, 132, 78, 2516, 2515, 85, 150, 2513,
	177, 153, 2511, 2509, 2508, 65, 2507, 18, 2505, 13,
	2503, 2500, 19, 3, 2499, 2494, 165, 2490, 2489, 2487,
	2303, 2486, 2484, 2483, 2184, 2482, 2480, 38, 122,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 27, 13, 21, 19, 19,
	28, 17, 17, 24, 24, 147, 147, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 401, 401, 149, 149, 148, 144,
	144, 151, 151, 151, 153, 153, 150, 150, 143, 143,
	32, 32, 83, 83, 83, 134, 76, 76, 76, 354,
	354, 355, 355, 130, 130, 131, 131, 131, 131, 132,
	132, 133, 133, 133, 45, 34, 34, 34, 34, 34,
	35, 35, 36, 36, 43, 43, 124, 124, 46, 46,
	46, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 56,
	56, 57, 57, 58, 58, 58, 58, 58, 58, 59,
	59, 59, 59, 59, 59, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 66, 66, 66, 67, 67,
	67, 64, 64, 64, 62, 62, 62, 61, 61, 61,
	65, 65, 65, 63, 63, 63, 230, 230, 68, 68,
	68, 68, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 324, 324, 69, 69,
	297, 297, 72, 72, 255, 255, 73, 73, 73, 73,
	73, 74, 74, 74, 74, 84, 84, 84, 84, 400,
	400, 224, 224, 166, 166, 166, 166, 79, 79, 79,
	79, 80, 80, 80, 81, 81, 129, 129, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 37, 37,
	37, 38, 38, 39, 39, 40, 40, 41, 41, 42,
	42, 42, 42, 42, 91, 91, 91, 93, 90, 90,
	90, 92, 92, 92, 92, 94, 94, 95, 95, 95,
	95, 95, 95, 96, 96, 348, 348, 233, 233, 346,
	346, 347, 347, 201, 201, 201, 201, 201, 202, 202,
	202, 353, 353, 353, 353, 353, 353, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 113, 113, 113, 123,
	123, 123, 123, 123, 123, 123, 115, 115, 107, 107,
	98, 98, 104, 104, 104, 104, 104, 99, 99, 105,
	105, 106, 106, 108, 108, 108, 108, 108, 108, 100,
	100, 100, 100, 110, 110, 110, 110, 109, 109, 119,
	119, 119, 119, 119, 119, 119, 312, 312, 114, 114,
	114, 114, 117, 117, 117, 117, 112, 112, 112, 116,
	116, 120, 120, 120, 120, 101, 101, 102, 102, 103,
	103, 121, 121, 111, 111, 122, 122, 122, 122, 122,
	122, 122, 118, 118, 118, 398, 398, 396, 396, 396,
	396, 396, 396, 396, 397, 397, 399, 399, 77, 77,
	51, 51, 52, 52, 203, 203, 204, 204, 278, 278,
	278, 278, 205, 205, 152, 152, 152, 208, 209, 209,
	206, 206, 207, 207, 207, 211, 211, 210, 213, 213,
	212, 277, 364, 364, 365, 365, 365, 365, 365, 365,
	365, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 362, 362, 362, 363, 360, 360, 361, 361, 361,
	361, 402, 402, 276, 276, 217, 217, 367, 367, 367,
	367, 368, 368, 368, 368, 368, 371, 370, 369, 369,
	369, 369, 369, 308, 308, 308, 55, 55, 55, 244,
	244, 243, 243, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 126, 126, 53, 53,
	53, 158, 158, 50, 50, 50, 54, 54, 49, 49,
	49, 49, 49, 261, 261, 259, 259, 222, 222, 314,
	314, 314, 170, 170, 145, 145, 145, 20, 22, 22,
	16, 16, 16, 16, 16, 16, 29, 29, 30, 30,
	26, 26, 260, 260, 262, 262, 78, 78, 82, 82,
	88, 88, 125, 125, 125, 125, 125, 125, 125, 33,
	33, 33, 33, 44, 44, 44, 44, 86, 405, 405,
	405, 87, 87, 404, 404, 165, 165, 165, 165, 167,
	167, 273, 273, 274, 274, 406, 406, 275, 275, 275,
	160, 159, 161, 161, 48, 48, 48, 154, 154, 155,
	155, 156, 156, 157, 157, 407, 407, 75, 75, 75,
	128, 128, 197, 197, 270, 270, 270, 218, 218, 175,
	175, 272, 272, 271, 271, 271, 242, 242, 242, 127,
	127, 227, 227, 235, 235, 236, 236, 320, 320, 237,
	85, 85, 137, 137, 135, 135, 135, 135, 135, 135,
	136, 136, 136, 138, 138, 138, 138, 138, 138, 138,
	141, 141, 141, 141, 142, 142, 142, 140, 140, 378,
	378, 378, 380, 380, 381, 377, 377, 379, 379, 403,
	403, 246, 246, 246, 215, 216, 214, 214, 220, 220,
	219, 221, 221, 313, 313, 313, 240, 240, 240, 240,
	265, 265, 263, 263, 264, 264, 266, 266, 267, 267,
	267, 268, 268, 269, 269, 239, 239, 293, 293, 139,
	139, 139, 226, 226, 226, 228, 228, 283, 283, 283,
	284, 284, 282, 282, 282, 282, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 394, 394, 394, 395, 395,
	311, 311, 316, 316, 316, 316, 316, 316, 309, 309,
	310, 310, 321, 322, 322, 249, 249, 249, 249, 247,
	247, 248, 248, 317, 317, 317, 317, 241, 241, 318,
	318, 318, 279, 279, 325, 325, 325, 340, 340, 225,
	225, 225, 335, 335, 326, 326, 326, 326, 326, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 329, 329, 329, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 339, 339, 339, 339, 339, 330, 330, 336,
	337, 331, 332, 338, 338, 338, 338, 342, 342, 333,
	333, 333, 333, 333, 333, 333, 334, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 257, 257, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 287, 287, 287, 287, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 372, 372,
	372, 372, 372, 372, 372, 372, 375, 375, 376, 376,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 382, 382, 383, 383, 385, 385, 386, 386,
	387, 388, 388, 388, 389, 390, 390, 384, 384, 391,
	391, 391, 392, 392, 393, 393, 393, 393, 393, 299,
	299, 300, 301, 307, 307, 307, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 168, 168, 168, 168, 168, 232, 232, 231,
	231, 296, 296, 294, 294, 298, 298, 250, 250, 341,
	341, 341, 341, 341, 341, 341, 251, 251, 251, 258,
	252, 252, 253, 253, 253, 253, 253, 290, 291, 254,
	254, 254, 292, 292, 302, 306, 306, 305, 304, 304,
	303, 303, 280, 280, 281, 281, 238, 238, 408, 408,
	234, 234, 319, 319, 319, 319, 199, 199, 229, 229,
	198, 198, 192, 192, 193, 193, 193, 193, 223, 223,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 343, 343, 343, 344, 345, 295, 185, 184, 172,
	173, 183, 182, 181, 171, 174, 178, 179, 180, 176,
	177, 188, 187, 186, 323, 194, 194, 195, 195, 195,
	196, 196, 196, 196, 169, 169, 189, 189, 190, 191,
	191, 162, 162, 162, 163, 163, 164, 164, 352, 352,
	350, 350, 350, 351, 351, 351, 351, 349, 349, 349,
	349, 349, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 5, 7, 7, 7, 10,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 1, 2, 1, 1, 3, 1, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 5, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 6, 6, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 3, 1, 2, 1, 2, 7,
	3, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 3, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 3, 1, 1,
	3, 5, 4, 6, 4, 3, 0, 1, 3, 2,
	4, 2, 4, 1, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 2,
	1, 3, 1, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 5, 3, 3, 3,
	3, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 5,
	4, 6, 4, 5, 6, 5, 1, 0, 2, 3,
	3, 3, 6, 4, 2, 3, 4, 2, 3, 3,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 2, 3, 2, 3, 7, 7, 8, 10, 7,
	4, 5, 5, 5, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 2,
	8, 11, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 4, 7, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 7, 3, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 6, 3, 13, 16,
	9, 12, 4, 2, 0, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	2, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 412, -4, -32, -34, -45, -43,
	-46, -73, -57, -58, -59, -72, -68, -74, -75, -76,
	-77, -69, -83, -82, -84, -88, -37, -85, -78, -79,
	-89, -97, -125, -126, -127, -128, -5, -11, 25, 36,
	-35, -36, 50, 76, 64, -53, -50, -47, -56, 78,
	99, -379, 103, -60, -63, -65, 107, 114, 119, 142,
	151, 250, 257, 278, 280, 282, 291, -39, -38, 115,
	-135, -137, 276, -80, -81, -90, -91, -92, -93, -129,
	309, -98, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, 312, -33, -44, -87,
	-86, 354, -6, -7, -8, -9, -10, -12, -22, -48,
	-49, -51, -52, -54, -55, -378, -61, -62, -64, -66,
	-67, -138, -136, 409, 277, 363, 37, 321, 65, 110,
	286, 20, -14, -15, -18, -17, -19, -16, -23, -25,
	-27, -24, -26, -28, -29, -30, -31, -20, -21, -13,
	380, 388, -141, -139, -140, -142, 298, 371, 334, 413,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	2, 334, 374, 299, 364, 92, 163, 262, 248, -396,
	2, 4, -358, -356, -193, -192, 334, 92, 30, 38,
	39, 40, 41, 43, 44, 47, 48, 54, 55, 56,
	59, 94, 96, 97, 113, 120, 121, 131, 132, 133,
	144, 146, 154, 155, 158, 168, 170, 171, 172, 173,
	174, 176, 185, 186, 196, 214, 225, 227, 240, 244,
	254, 256, 264, 288, 301, 302, 303, 304, 315, 316,
	326, 330, 344, 345, 346, 351, 352, 367, 371, 372,
	376, 383, 20, 21, 22, 23, 25, 35, 36, 37,
	42, 46, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 95, 99, 101, 103, 106, 107,
	109, 114, 115, 118, 116, 117, 119, 129, 130, 135,
	137, 141, 143, 148, 149, 150, 151, 152, 153, 164,
	167, 169, 162, 178, 181, 182, 183, 189, 190, 191,
	194, 193, 198, 199, 202, 203, 206, 208, 211, 212,
	215, 213, 217, 218, 220, 219, 226, 228, 229, 231,
	232, 235, 236, 239, 242, 245, 246, 247, 248, 249,
	250, 251, 253, 255, 257, 259, 260, 261, 262, 263,
	265, 266, 268, 269, 270, 271, 272, 276, 274, 275,
	277, 278, 279, 280, 282, 284, 285, 286, 287, 289,
	310, 311, 323, 291, 292, 293, 294, 295, 296, 297,
	305, 299, 300, 306, 307, 309, 312, 314, 317, 320,
	321, 322, 324, 327, 329, 325, 319, 332, 333, 335,
	336, 337, 338, 339, 340, 341, 342, 349, 350, 354,
	355, 356, 357, 360, 361, 362, 363, 365, 368, 369,
	370, 375, 381, 382, 384, 385, 386, -191, -162, 402,
	-190, 412, 412, 2, 182, 261, -186, -189, -190, -191,
	-162, 4, -356, -358, 92, 233, 412, 412, 412, 2,
	334, 322, 299, 364, 284, 374, -259, 178, 92, 359,
	-162, 257, 24, 2, 101, 167, 362, 361, 24, 253,
	300, 336, 338, 2, 412, 412, 2, 374, 299, 334,
	163, 92, 364, 284, -180, 2, -162, -71, 2, 409,
	-70, -5, -47, -56, -60, -72, -68, -11, -32, -34,
	-53, -50, -57, -63, -65, -76, -75, -77, -79, -83,
	-82, -85, -90, -91, -97, -127, -128, 78, 25, 107,
	309, 115, -400, -224, 2, 24, -166, -162, 78, 142,
	298, 334, 2, 182, 2, -180, 2, -396, 2, 182,
	2, -400, -224, 23, 2, -162, 2, 295, 312, -167,
	2, 291, -162, 412, 412, 412, 412, 412, 412, 203,
	58, 288, 306, -95, 350, -94, 344, 293, -96, -348,
	2, 215, -162, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 2, -123, 306, 322,
	149, 36, 58, 24, 63, 93, 143, 163, 164, 190,
	73, 74, 260, 203, 183, -312, 117, 307, 335, 294,
	332, 350, 78, 365, 285, 339, 116, 4, 92, 215,
	308, 344, 67, 412, 412, 412, -403, 2, 334, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	-136, -138, -137, 412, 412, 412, 412, 412, -219, -220,
	358, 175, 112, 238, -135, -137, 2, -378, -123, 306,
	2, 58, 24, -346, 2, -285, 233, -287, 400, 401,
	395, 221, 387, -299, 98, 210, 209, -289, -302, 113,
	288, 409, -196, -288, 415, 9, -375, -137, 31, -300,
	-301, 52, -194, -162, 7, 8, 5, 6, -169, -327,
	-295, -334, 353, 122, 224, -372, -373, -195, 4, -356,
	-350, -328, -337, -332, -333, -335, 42, 48, 47, 341,
	214, 301, 302, 303, 304, 316, 367, 158, 40, 231,
	232, 169, 176, 61, 84, 85, 83, 88, 89, 86,
	308, 364, 53, 30, 154, 225, 155, 59, -374, 106,
	39, 41, 43, 44, 54, 55, 94, 96, 97, 120,
	121, 131, 132, 133, 144, 168, 170, 171, 172, 173,
	174, 185, 186, 196, 227, 244, 254, 264, 315, 326,
	330, 344, 345, 346, 351, 352, 372, -357, -338, 79,
	123, 140, 166, 156, 179, 180, 184, 197, 200, 216,
	223, 241, 243, 283, 313, -404, 2, 350, 350, 2,
	-404, 2, -404, 2, -165, 2, 350, 347, -405, 350,
	383, -380, 265, -381, -180, -380, 412, 412, 414, 412,
	-214, -215, -216, 2, 24, 104, 409, 2, -315, 2,
	407, -317, -169, -374, -137, -316, 409, -186, 234, -195,
	84, 85, 88, 89, 4, -162, 61, 210, 209, -3,
	2, -317, 154, -186, 2, -317, 154, 2, -187, 154,
	-317, -189, 2, -354, 154, -352, 9, -351, 5, 4,
	-356, -358, -357, 2, -171, -162, 2, -198, 154, -186,
	-183, -349, 4, -356, -358, -357, -359, 24, 26, 27,
	28, 29, 31, 32, 33, 34, 45, 52, 53, 57,
	60, 62, 73, 78, 83, 84, 86, 85, 87, 88,
	89, 98, 100, 102, 104, 105, 108, 110, 112, 122,
	124, 136, 138, 139, 142, 145, 147, 157, 163, 165,
	175, 177, 192, 195, 201, 204, 205, 221, 222, 224,
	230, 233, 234, 237, 238, 252, 258, 267, 281, 298,
	308, 318, 328, 331, 334, 343, 347, 348, 353, 358,
	359, 364, 366, 373, 374, 377, 378, 379, 380, -184,
	-349, 347, 414, -229, -192, -193, -223, -162, 411, -285,
	2, -285, 2, -217, 409, 411, 334, 62, 2, -186,
	154, -176, 2, -162, -187, 154, 2, -189, -354, 154,
	2, -354, 154, 2, -188, 2, -186, 163, 163, -171,
	154, 2, -162, 24, 139, 2, 177, 2, 177, 2,
	-318, 2, -317, -230, 154, 2, -186, -230, 154, 2,
	-230, 154, 2, -199, 154, 2, -198, -171, 154, 2,
	-355, 154, 2, -354, -355, 154, 2, -255, 409, -324,
	2, -323, -351, 371, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 306, 233, 347, 414, -186, -285, -297, 409, 139,
	-285, 233, 139, 235, 2, 92, 334, 386, 24, -162,
	2, 310, 2, 409, -95, 56, 350, -274, 2, -275,
	-159, -160, -161, 181, 259, 263, 386, -346, 347, 392,
	139, -346, -233, 411, -123, 2, 136, 2, 7, 2,
	-354, 2, 310, 2, 260, 307, 58, 139, 2, 2,
	-398, 2, 233, 139, 2, 139, 2, 139, 2, 139,
	2, 139, 2, 2, 260, 307, 2, 349, 191, 349,
	2, 139, 2, 139, 2, 5, 2, 181, 259, 323,
	2, 334, 374, 299, 2, 2, 139, 139, 386, 2,
	-241, -317, -219, -220, -240, -263, -264, 201, 124, 230,
	-246, 24, 104, -246, -246, 46, 410, 410, -123, 310,
	2, 10, 11, 60, 35, 400, 401, 402, 403, 134,
	404, 405, 398, 399, 397, 390, 391, 394, 187, 188,
	75, 393, 392, 68, 207, 290, 125, 126, 127, 128,
	273, 159, 160, 161, 13, 14, 15, 28, 237, 200,
	387, 156, 313, 395, 16, 17, 18, 179, 180, 223,
	38, 157, -168, -200, -285, -285, -285, -285, -285, 243,
	-238, -280, 407, -137, 409, 409, -137, -285, -231, 409,
	-345, 7, -137, -294, 407, -303, -285, 411, 409, 5,
	409, 5, -382, 381, 136, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 409, 256, -342, 375, -342, -342,
	-329, 409, -329, 409, 409, -330, 409, 409, 409, -329,
	409, 409, 409, 382, 382, 388, 409, 409, -273, -274,
	-273, 347, -167, 414, -380, -217, 409, -234, -319, -285,
	402, -234, -234, 233, -231, -285, 79, -249, 184, 216,
	140, 197, 283, 166, -345, -71, -282, 415, 409, -311,
	388, -311, -137, -316, 409, -315, 402, -186, 409, 411,
	-147, 274, -146, 22, 25, 107, 369, 118, -207, 248,
	113, 319, 340, 115, 292, 274, 113, -243, -245, 32,
	90, 218, 245, 49, 152, 209, 210, 321, 113, 274,
	380, 113, 115, 274, -149, 319, 340, 115, 292, 274,
	-148, -207, 113, 415, 115, 228, -354, -229, 414, 414,
	-349, 402, 139, -223, -349, -186, -194, -162, -195, 409,
	-217, 221, 233, -244, -243, 221, -158, -377, 380, 221,
	221, -217, -173, 154, 2, -163, -162, -173, 154, -377,
	221, -318, -197, -186, -197, 309, -180, 32, -151, 414,
	51, 279, 113, -151, 113, -151, 113, -151, 414, 113,
	-151, 113, 414, 113, 113, -231, 410, 414, -396, -223,
	-166, 78, 409, 32, -296, -325, -326, -327, -336, -331,
	-334, 42, 48, 47, 341, 214, 301, 302, 303, 304,
	316, 367, 158, 40, 231, 232, 169, 4, 41, -338,
	176, 168, 170, 171, 172, 173, 174, 315, 39, 264,
	132, 133, 131, 106, 97, 96, 227, 44, 43, 94,
	344, 345, 346, 185, 186, 55, 54, 372, 326, -355,
	-396, -223, 136, -171, 2, -186, 2, 69, 70, 386,
	-348, -231, 32, -274, 2, -406, 414, 199, -202, 206,
	220, 148, 234, 384, -353, 5, 4, -295, -308, 98,
	203, -334, 8, 401, -343, 7, 400, -347, -346, -347,
	82, 411, -349, 334, -348, 24, 311, 2, -186, -399,
	136, -397, 284, -396, -186, -186, -186, -186, -186, 136,
	2, 349, 2, 136, -162, -162, 199, -186, 2, -188,
	2, -187, 2, 334, 163, 334, -151, 414, -240, -264,
	-263, -266, -285, 24, -269, 130, 217, -285, -287, -136,
	-136, -136, -221, -313, -285, 258, 163, -348, -340, -325,
	-339, 269, 270, 268, 272, 271, -325, -185, -349, 344,
	-285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
	-285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
	-285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
	-285, -285, -285, -285, -285, 200, 156, 313, 38, 157,
	-285, 347, -285, -285, -285, -285, 213, 221, 224, 353,
	122, 360, 104, 228, -408, 331, 34, -292, -137, 409,
	-307, 29, 318, 24, -299, 288, 409, -280, -285, -281,
	-232, -231, 410, 414, -232, -298, -294, -306, -305, 377,
	-349, 402, 410, -231, 373, 24, 104, 402, 2, 7,
	-256, 385, 212, 95, 150, 211, -257, 297, -383, 129,
	145, 409, 410, 2, 410, 2, 410, 2, 410, 2,
	-285, -285, -285, -285, -285, -231, -345, -250, 2, -341,
	-231, 4, 385, 212, 95, 150, 211, 297, -250, 2,
	7, -231, 2, -231, 2, -251, 2, -285, -231, -252,
	-286, -287, 400, 401, 395, 409, 288, -253, 2, -285,
	-232, 344, 344, 344, -285, 45, 195, 348, -254, -285,
	139, -231, -167, -381, 32, -231, -226, 414, 139, 32,
	4, -226, -226, 409, 410, 414, 184, 184, -315, -249,
	184, -247, 241, -247, -247, -394, 409, 408, -311, -172,
	407, 416, -349, -232, 2, -310, -309, 32, -180, 239,
	-310, 410, -186, -349, 414, 347, -260, 73, 62, -277,
	154, 62, -360, -174, 73, -361, -162, 57, 359, 258,
	138, -260, 73, -260, 73, 73, 309, 46, -317, 35,
	-85, 71, 139, 347, -317, -245, -325, 90, 209, 210,
	46, -344, -343, 401, -344, 46, -344, -344, -344, 380,
	-187, -317, 347, 249, -354, 71, 347, 414, 35, -85,
	71, 139, 347, -198, -172, 71, 334, -322, -321, 389,
	-192, -162, 411, 324, 410, 411, 179, 179, 411, -203,
	-204, -162, -278, -277, -362, -363, -360, 178, 163, 359,
	123, 32, 113, -223, 113, 249, 113, 113, 32, 233,
	221, 233, 221, -154, 337, 113, -279, 378, -270, -85,
	409, 98, 32, -270, -235, -236, -320, -237, -174, 409,
	-180, -186, -230, -230, -230, -198, -199, -171, -354, -355,
	-355, 410, -71, -323, 347, 380, 366, -204, -70, 25,
	78, 107, 410, 414, -225, 31, 407, -256, 409, -342,
	409, -133, -321, 380, 139, -224, -322, -322, 136, 70,
	392, 347, 410, 350, -275, -201, 263, 317, 275, 305,
	8, 7, 7, 414, -349, -186, -223, -223, 306, -71,
	136, -71, 411, -186, -198, -186, -317, -267, -343, 409,
	-268, 288, 289, 414, -145, 33, 102, 189, -186, 386,
	-285, -285, 347, -408, 331, -292, -285, 213, 224, 353,
	122, 360, 104, 228, 139, 409, -286, -286, -231, -285,
	409, -231, 408, 418, 410, -285, 408, 408, 414, -304,
	-305, 108, -285, 411, -220, 414, -219, -285, -231, -231,
	410, 410, 347, 347, 347, 347, 409, -388, 242, 409,
	409, -285, 32, 414, 414, 414, 414, 410, 410, 414,
	410, 139, 410, 410, 410, 410, 410, -258, 252, 410,
	10, 11, 400, 401, 402, 403, 134, 404, 405, 398,
	399, 397, 390, 391, 392, 68, 207, 290, 13, 14,
	15, 179, 157, -286, -286, -286, -231, 409, 410, -290,
	-291, 139, 136, 386, 386, 386, 32, -254, -254, -254,
	410, 139, -231, 409, 410, -279, -319, -228, 2, -315,
	-182, -349, -279, -279, -231, -285, -315, -315, -248, 366,
	233, 184, -315, -309, 410, -395, -345, -311, -310, -345,
	-284, -283, 137, 219, 410, -180, -217, -311, 410, 411,
	-146, -186, -174, -181, -162, 221, -277, 154, -153, 221,
	-325, -181, 409, 409, 189, 189, -174, -181, 154, -174,
	154, -181, -181, -401, 263, 229, 202, 262, 222, -147,
	274, -85, 386, 409, -188, 274, -194, -344, -344, -243,
	274, -187, -354, 380, 386, -171, -148, -85, 386, 409,
	-172, -149, 274, 386, -186, -130, 153, 228, 402, -349,
	-124, 5, 224, -124, -349, 410, 414, 163, -173, 163,
	-179, -163, -85, -186, 139, -187, -354, -354, -354, -85,
	-186, 113, -186, 113, -155, 109, -407, 392, -171, -220,
	-285, -242, -272, 281, 233, -218, -175, -174, 371, -180,
	-242, -227, 414, 139, 392, 411, -218, -151, -151, -151,
	-151, -151, -223, 23, -354, 410, -325, 407, 408, 7,
	7, 409, -345, -133, -132, 236, -131, -162, 5, -223,
	139, -40, 380, 262, 92, 334, 248, 163, -346, -346,
	-274, 357, 66, 263, -346, 306, -71, -162, -268, -285,
	-313, -186, 415, -285, -285, -286, -286, 139, 409, -285,
	-296, 28, 28, 410, -232, 414, -281, -285, 410, -294,
	110, -285, 343, -349, 402, 410, 373, -220, -220, -220,
	5, 212, 150, 211, -257, 211, -257, -257, 7, -389,
	-177, 409, -162, 378, -219, 410, -340, -325, -285, -285,
	-285, -345, -285, -290, -285, -340, -325, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, 104, 221, 228, -286,
	414, -232, -291, -290, -285, -285, -325, 410, 410, 410,
	-231, -70, -239, 145, -322, 414, -239, -239, 410, -248,
	409, -285, -315, 408, 410, 414, -310, 408, 414, 417,
	392, -311, -217, -309, -349, 347, 347, 113, 221, 368,
	-364, -361, -285, -222, -314, -174, -376, 409, -162, -372,
	-373, -169, 409, 409, -144, 107, 309, -262, 113, -151,
	113, -151, 384, 409, 409, 347, -260, 73, -288, -169,
	-162, -231, 347, 347, 249, -288, -288, -231, 347, -288,
	115, -133, 139, 333, 411, -205, 162, -278, -163, 409,
	-173, 409, 409, -217, -186, -244, -158, -261, 366, -172,
	409, -172, -156, 194, -407, -352, -377, -265, -263, -242,
	-234, 222, 72, 410, 414, 411, -279, -236, -228, -285,
	2, 410, 235, -134, 80, -134, 7, 408, 410, -345,
	410, 414, 409, 392, 392, -223, 236, -183, -171, -186,
	-184, -198, 234, 410, -145, -172, 28, 28, -285, -296,
	410, -285, -285, 410, -285, 408, -285, 411, 5, -285,
	410, 410, 410, 410, -390, -162, -285, 410, 410, 410,
	414, 410, 410, 410, -291, 139, 104, 228, 409, -285,
	410, 410, 410, -293, 147, 46, -315, -293, -293, -223,
	-282, -345, -283, -172, 407, -310, 411, -174, -181, -277,
	113, -365, 73, -366, 60, 123, 78, 221, 224, 359,
	258, 57, 98, 267, 32, 410, 410, 414, -170, 60,
	-170, -285, 409, -222, -223, 221, 98, 221, 98, 91,
	355, -174, -181, -223, -223, -186, -174, -181, 409, 410,
	-188, -187, -354, 410, -172, 71, -355, 344, -349, -206,
	-207, 157, 409, -222, 409, -223, -203, 32, 409, 141,
	233, -222, 233, -157, 193, -407, -352, -154, -242, -271,
	409, 233, -85, -175, 2, -220, 392, 91, 91, 408,
	410, -131, -132, -354, -354, -41, -42, 163, 73, 251,
	-209, -208, 248, 228, -145, -285, -285, 410, 410, -349,
	402, -220, -384, 248, 410, -285, -286, 139, 409, -296,
	410, -385, 379, -285, -231, -385, -385, 410, -311, -345,
	-277, -181, -185, -178, -162, 123, 154, 224, 189, 409,
	-286, -186, 409, 2, -276, -402, 77, 329, -314, -145,
	-185, -145, 410, -231, 410, 410, 224, 224, -285, -325,
	-151, -151, 410, 410, 347, 347, -231, 347, 347, 386,
	-288, 246, -222, 410, -222, 410, 410, -85, -222, -186,
	410, -186, -407, -352, -155, 105, -223, 73, -265, -292,
	409, 409, 410, 414, 24, 409, 24, 409, -184, 334,
	410, -220, 46, 410, -286, -296, 410, -386, -387, -177,
	-310, 408, -366, -178, 221, -285, -164, 409, -285, -205,
	409, -170, -220, 267, -150, 60, 409, 409, -174, -181,
	-220, 409, 409, -288, -186, 410, -276, 410, -205, 410,
	-261, 409, -352, -156, 361, 222, 410, -181, -242, -355,
	-355, -42, -223, -223, -186, -391, 262, 289, -231, 410,
	414, 32, 113, 410, -367, 208, -162, 410, -206, -223,
	-145, 410, -186, -143, 366, -185, -211, -210, -208, -213,
	-212, -208, 410, -231, -231, 409, -205, -276, -206, -276,
	409, -222, -157, 309, -279, 410, 410, 410, 410, 410,
	-392, -393, 38, 356, 82, -285, -392, -387, -389, 123,
	-368, -371, -370, 233, 140, 247, 314, 410, 328, 376,
	410, -217, -285, 410, 414, 371, 410, 414, 371, 410,
	410, -223, -206, -205, -205, -222, 410, -235, -133, -133,
	-393, 255, 135, 288, 255, 135, -178, -370, 233, -371,
	233, 361, 101, -367, -210, 157, -212, 139, 410, -206,
	-206, 410, -279, 28, -369, 218, 279, 51, 309, -369,
	-368, 409, 409, -152, 51, 279, -276, -393, 21, 224,
	98, -231, -231, -205, 410, 410, -206, -206, 347, 409,
	-231, 410, -206,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	175, 177, 0, 0, 0, 188, 190, 192, 193, -2,
	0, 0, 0, 219, 220, 222, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 359, 0,
	820, -2, 0, 337, 339, 348, 350, 352, 354, 355,
	0, 417, 419, 421, 423, 425, 427, 429, 431, 433,
	435, 437, 439, 441, 443, 445, 447, 449, 451, 453,
	455, 457, 458, 460, 462, 464, -2, 732, 734, 736,
	738, -2, 60, 62, 64, 66, 68, 70, 85, 196,
	198, 200, 202, 205, 207, 857, 225, 227, 229, 231,
	233, -2, 869, 0, 0, 0, -2, 0, -2, -2,
	-2, 750, 71, 72, 73, 74, 75, 76, 91, 92,
	93, 94, 95, 96, 78, 80, 81, 87, 88, 90,
	0, 0, 833, 835, 837, 839, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 44, 50, 52, 54, 58,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, -2, -2, -2, -2, 0, 0, 1473, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1691, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
	1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1364, 1418, 1367,
	1362, 176, 178, 179, 0, 0, 636, 1403, 1416, 1417,
	1418, 1421, 1422, 1423, 1473, 0, 189, 191, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	316, 1545, 318, 320, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 218, 221, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 315, 313, 1398, 258, 259, 0,
	298, 299, 300, 301, 302, 303, 305, 262, 264, 266,
	267, 269, 271, 273, 275, 277, 279, 281, 283, 284,
	286, 288, 289, 291, 293, 294, 296, 696, 0, 0,
	0, 0, 0, 330, 324, 329, 331, 333, 334, 335,
	336, 0, 158, 0, 569, 311, 309, 0, 154, 0,
	729, 0, 330, 1445, 328, 730, 731, 0, 0, 726,
	727, 1574, 760, 338, 340, 349, 351, 353, 356, -2,
	-2, 1673, -2, 379, -2, 387, 1682, 1576, 390, 0,
	392, -2, 395, 418, 420, 422, 424, 426, 428, 430,
	432, 434, 436, 438, 440, 442, 444, 446, 448, 450,
	452, 454, 456, 459, 461, 463, 465, 466, 0, 0,
	0, 0, 0, 470, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 469, 471, 472,
	473, 0, 516, 733, 735, 737, 0, 677, 859, 61,
	63, 65, 67, 69, 197, 199, 201, 203, 206, 208,
	-2, 831, 832, 226, 228, 230, 232, 234, -2, 0,
	863, 863, 863, 0, 0, 832, 830, 0, 341, 0,
	343, 0, 470, 346, 347, 399, 400, 1063, 0, 0,
	0, 0, 0, 0, 1141, -2, -2, 1173, 1175, 1644,
	1673, 0, 1177, 1178, 0, 1180, 1182, 1183, 0, 1186,
	1187, 1341, 1410, 1405, 1370, 1371, 1372, 1373, 0, 0,
	1376, 0, 1378, 1379, 1380, 1243, 1197, -2, -2, -2,
	1414, 979, 980, 981, 982, 983, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1692, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 0, 1628, 1652, 1666, 1653, 1640, 1215, 1479,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1645,
	1646, -2, -2, -2, 1650, -2, -2, -2, -2, -2,
	-2, -2, -2, 1664, -2, 1669, 1670, -2, -2, -2,
	1681, -2, -2, -2, 1685, 1686, -2, 1432, 1032, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1705,
	1706, 1707, 1708, 1709, 1710, 762, 740, 753, 762, 742,
	743, 744, 745, 746, 751, 752, 755, 0, 747, 748,
	749, 849, 1551, 852, 636, 850, 834, 836, 0, 838,
	0, 0, 0, 843, 866, 864, 0, 900, 847, 848,
	858, 915, 0, 931, 931, 922, 0, 953, 0, 1415,
	0, 0, 0, 0, -2, 1418, 1692, 1703, 1704, 2,
	77, 0, 1652, 953, 79, 0, 1652, 82, 0, 1652,
	0, -2, 86, 0, 1652, 159, 160, 1428, 1429, 1433,
	1434, 1435, 1436, 89, 0, 1394, 97, 0, 1652, 1361,
	0, 1391, 1437, 1438, 1439, 1440, 1441, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 0,
	1388, 0, 0, 562, 1358, 1363, 563, 1368, 0, 180,
	181, 182, 183, 0, 0, 0, 0, 0, 204, 636,
	1652, 0, 210, 1399, 660, 1652, 658, 1402, -2, 1652,
	680, 683, 1652, 685, 636, 687, 1401, -2, 1425, 856,
	1652, 776, 317, 319, 0, 212, 0, 789, 0, 791,
	0, 810, 959, 143, 1652, 237, 256, 143, 1652, 240,
	143, 1652, 243, 143, 1652, 246, 1356, 143, 1652, 249,
	250, 1652, 252, 161, 253, 1652, 255, 312, 0, 0,
	-2, 306, 1404, -2, 304, 263, 265, 268, 270, 272,
	274, 276, 278, 280, 282, 285, 287, 290, 292, 295,
	297, -2, 0, 0, 0, 0, 568, 0, 0, 0,
	728, 0, 0, 0, 360, 0, 0, 0, 0, 759,
	357, 0, 376, 0, 378, 1639, -2, -2, 382, 763,
	767, 768, 769, 0, 0, 0, 0, 389, 0, 0,
	0, 393, 396, 0, 467, 468, 0, 477, 478, 479,
	480, 481, 0, 484, 505, 520, 0, 0, 488, 490,
	567, 492, 0, 0, 494, 0, 496, 0, 498, 0,
	500, 0, 502, 504, 506, 521, 508, 0, 0, 0,
	519, 0, 525, 0, 528, 529, 530, 0, 532, 533,
	534, 0, 0, 0, 542, 544, 0, 0, 474, 475,
	143, 957, -2, 0, 826, 878, 879, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 822, 823, 342, 0,
	345, 0, 0, 0, 0, 1276, 1277, 1278, 1279, 1280,
	1281, 1284, 1285, 1282, 1283, 1286, 1287, 0, 0, 0,
	0, 0, 1288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1289, 1290, 1291, 0, 0, 1293,
	0, 1295, 0, 0, 0, 0, 0, 0, 1120, 1122,
	1349, 0, 0, 1292, 1068, 1069, 1070, 1105, 1106, 0,
	1174, 1346, 1345, 1176, 0, 1298, -2, 1299, 0, 0,
	1179, 1385, 1184, 1185, 1298, 0, 1340, 0, 0, 1375,
	0, 1060, 1245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1016, 1030, 1037, 1034, 1033,
	1018, 0, 1017, 0, 0, 1015, 0, 0, 0, 1019,
	0, 1321, -2, 0, 0, 0, 0, 0, 739, -2,
	741, 0, 757, 0, 851, 0, 0, 904, 1350, 1354,
	1355, 904, 904, 0, 0, 1299, 0, 0, 0, 0,
	950, 950, 950, 948, 925, 0, 931, 0, -2, 941,
	0, 941, -2, 922, 0, 0, 954, 955, 0, 0,
	98, 723, 115, 0, 723, 723, 0, 0, 133, 0,
	0, 0, 0, 0, 111, 0, 0, 83, 661, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 113, 0,
	136, 138, 0, 0, 0, 0, 944, 561, 0, 0,
	1419, 1366, 0, 0, 1419, 0, 0, 1405, 1406, 575,
	0, 0, 0, 656, 659, 0, 678, 0, 855, 0,
	0, 0, 0, 1652, 692, 1390, 1424, 0, 1652, 778,
	0, 963, 0, 792, 0, 0, 960, 0, 235, 0,
	141, 142, 0, 238, 0, 241, 0, 244, 0, 0,
	247, 0, 0, 0, 0, 0, 858, 0, 0, 322,
	332, 0, 0, 858, 0, 1301, 971, 974, 975, 976,
	1060, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1038, 1032,
	1046, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1028, 0, 1003, 1003, 1003, 1020, 1021, 1039,
	1040, 1042, 1044, 972, 973, 1038, 1038, 1035, 1036, 173,
	0, 326, 0, 944, 362, 944, 364, 0, 550, 0,
	0, 0, 0, -2, 384, 0, 765, 0, 770, 408,
	409, 410, 772, 773, 388, 411, 412, 413, 414, 415,
	416, 0, 653, 0, 655, 1381, 0, 385, 401, 386,
	391, 0, 397, 0, 482, 483, 485, 486, 487, 491,
	0, 555, 1566, 565, 493, 495, 497, 499, 501, 858,
	510, 0, 512, 858, 523, 526, 531, 535, 536, 537,
	538, 539, 540, 0, 0, 0, 676, 0, 829, 876,
	877, 882, 886, 887, 890, 893, 894, 884, 1063, 844,
	845, 846, 870, 871, 706, 0, 0, 344, 1064, 967,
	968, 1022, 1023, 1024, 1025, 1026, 1065, 1066, 1387, 0,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	-2, -2, -2, -2, -2, -2, -2, -2, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, -2,
	-2, -2, 1103, 1104, -2, 1294, 1296, 0, 1349, 0,
	-2, 0, -2, -2, -2, -2, 1117, 0, 1119, 1124,
	1126, 1128, 0, 0, 0, 0, 1348, 1138, 1332, 0,
	0, 1273, 1274, 1275, 1123, 0, 0, 1347, 1344, 0,
	0, 1297, 1181, 0, 0, 0, 1305, 1339, 1335, 0,
	1407, 1413, 1188, 869, 0, 0, 0, 0, 1195, 0,
	1386, 1047, 1048, 1049, 1050, 1051, 1052, 1061, 1253, 0,
	0, 0, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
	0, 0, 0, 0, 0, 0, 0, 0, 1225, 0,
	1308, -2, -2, -2, -2, -2, -2, -2, 0, 1227,
	0, 0, 1239, 0, 1241, 0, 1229, 1299, 1318, 0,
	0, 1144, 0, 0, 0, 0, 1673, 0, 1232, 1299,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	0, 1331, 756, 853, 0, 0, 963, 0, 0, 0,
	1353, 963, 963, 0, 899, 0, 0, 0, 0, 0,
	0, 945, 949, 946, 947, 0, 0, 931, 941, 912,
	0, 0, 1389, 0, 919, 920, 940, 0, 636, 930,
	921, -2, 0, -2, 0, 0, 0, 0, 722, 117,
	1652, 0, 145, 0, 0, 626, 1395, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 662, 663, 665, 671, 673,
	0, 667, 1384, 0, 668, 0, 670, 672, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 1360, 0, 0, 164, 943, 0,
	1359, 1369, 0, 174, 635, 0, 0, 0, 0, 0,
	574, -2, 576, 578, 579, 580, 581, 1504, 1425, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 780, 786, 0, 869, 0, 808, 794,
	0, 0, 0, 808, 812, 813, 815, 816, 0, 0,
	961, 257, 143, 143, 143, 1357, 143, 143, 162, 251,
	254, 314, 260, 307, 0, 0, 0, 0, 308, 0,
	0, 0, 310, 0, 964, 966, 0, 977, 0, 1030,
	0, 152, 173, 0, 0, 0, 361, 366, 0, 551,
	0, 0, 377, 0, 764, 771, 0, 405, 0, 407,
	654, 1383, 1382, 0, 398, 476, 566, 564, 509, 513,
	858, 515, 0, 552, 553, 554, 958, 0, 888, 0,
	885, 891, 892, 0, 873, 704, 705, 0, 0, 0,
	-2, -2, 0, 0, 0, 1139, -2, 1118, 1121, 1125,
	1127, 1129, 0, 0, 0, 0, 0, 0, 0, 1140,
	1298, 0, 1342, 1345, -2, 1300, 1303, 1304, 0, 0,
	1336, 0, 0, 0, 0, 0, 868, 869, 869, 869,
	1194, 0, 0, 0, 0, 0, 0, 1196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1214, 1001, 0,
	1224, 0, 1226, 1027, 1238, 1240, 1228, 0, 0, 1230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1147, 1148, 1149, 0, 1298, 1231, 1324,
	1325, 0, 0, 1041, 1043, 1045, 0, 0, 0, 0,
	1237, 0, 1330, 858, 901, 896, 1351, 944, 903, 905,
	1352, 1392, 896, 896, 0, 1300, 933, 0, 935, 0,
	0, 0, 937, 0, 926, 0, 928, 941, 917, 0,
	0, 910, 0, 909, 931, 636, 939, 0, 956, 0,
	116, 710, 0, 0, 1393, 0, 119, 1652, 127, 0,
	603, 0, 0, 0, 0, 0, 725, 128, 1652, 143,
	1652, 143, 129, 132, 0, 135, 0, 0, 594, 99,
	723, 102, 0, 0, 716, 0, 666, 669, 675, 84,
	0, 718, 708, 0, 0, 707, 137, 103, 0, 0,
	720, 101, 0, 0, 0, 173, 0, 0, 1365, 1420,
	184, 186, 187, 185, 1407, 583, 0, 1425, 0, 1425,
	0, 1397, 572, 636, 0, 660, 681, -2, 684, 686,
	694, 0, 0, 0, 782, 786, 0, 785, 856, 881,
	962, 787, 808, 0, 0, 0, 797, 799, 796, 793,
	790, 963, 0, 0, 0, 0, 0, 236, 239, 242,
	245, 248, 321, 0, 0, 0, 1302, 0, 969, 0,
	0, 0, 0, 153, 171, 1533, 169, 166, 168, 325,
	0, 363, 0, 0, 0, 0, 0, 0, 374, 375,
	-2, 403, 404, 406, 402, 511, 514, 522, 0, 0,
	872, 706, 0, 1067, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 1333, 0, 0, 0, 1344, -2, 1306,
	1334, 1338, 0, 1408, 1412, 1189, 0, 0, 0, 0,
	1377, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 0, 1251,
	1252, 1256, 1400, 0, 0, 1200, 0, 0, 0, 0,
	0, 0, 1307, 1317, 1319, 1145, 1146, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, -2, -2, -2,
	1163, 1164, 1165, -2, -2, -2, 0, 0, 0, 1320,
	0, 0, 1322, 1323, 1327, 1328, 0, 1234, 1235, 1236,
	1329, 0, 898, 0, 902, 0, 898, 898, 865, 934,
	0, 952, 936, 915, 927, 0, 924, 913, 0, 914,
	0, 941, 938, 923, -2, 0, 0, 0, 0, 144,
	601, 625, 0, 0, 697, 703, 703, 0, 1395, 1198,
	1199, 0, 0, 0, 121, 0, 0, 0, 0, 125,
	0, 131, 134, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 107, 110, 0, 0, 106,
	0, 150, 0, 0, 0, 591, 0, 577, 0, 0,
	0, 0, 575, 0, 209, 657, 679, 0, 0, 0,
	0, 0, 784, 786, 0, 777, 778, 808, 880, 788,
	806, 807, 805, 0, 0, 0, 869, 814, 811, 817,
	818, 0, 323, 0, 155, 0, 0, 970, 978, 0,
	1031, 0, 0, 0, 0, 327, 0, 545, 546, 589,
	0, 549, 883, 889, 874, 706, 0, 0, -2, 0,
	1132, -2, -2, 1269, 1300, 1343, 1337, 0, 1374, 869,
	1190, 1192, 1193, 1062, 1258, 1255, 0, 1242, 1209, 1210,
	0, 1212, 1213, 1002, 1316, 0, 0, 0, 0, 1300,
	1271, 1233, 854, 1247, 0, 0, 906, 1247, 1247, 0,
	931, 929, 911, 907, 0, 918, 0, 712, 714, 118,
	0, 602, 0, 605, 0, 0, 0, 0, 612, 613,
	0, 0, 0, 0, 0, 627, 634, 0, 706, 0,
	706, 0, 0, 0, 0, 0, 140, 0, 0, 724,
	0, 143, 143, 0, 0, 711, 0, 0, 0, 0,
	717, 719, 709, 0, 721, 0, 163, 0, 1408, 570,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 693,
	0, 0, 0, 774, 786, 0, 779, 780, 211, 0,
	0, 0, 795, 798, 800, 881, 0, 0, 0, 965,
	1029, 170, 0, 165, 167, 365, 367, 0, 0, 373,
	547, 588, 0, 0, 875, -2, -2, 1133, 1270, 1409,
	1411, 0, 869, 0, 1244, 0, -2, 0, 0, 0,
	1272, 840, 0, 897, 895, 841, 842, 951, 941, 0,
	120, 0, 606, 607, 1396, 609, 0, 611, 614, 0,
	616, 1427, 0, 620, 583, 0, 631, 632, 698, 699,
	702, 700, 703, 869, 629, 0, 122, 123, 139, 147,
	124, 130, 0, 0, 0, 0, 869, 0, 0, 0,
	942, 0, 0, 634, 0, 624, 583, 573, 0, 694,
	690, 0, 0, 781, 782, 0, 0, 0, 808, 819,
	0, 0, 172, 0, 369, 0, 371, 0, 587, 0,
	1191, 1261, 0, 1211, -2, 0, 1171, 1246, 1248, 0,
	916, 908, 604, 608, 0, 0, 640, 0, 0, 591,
	0, 706, 0, 0, 149, 0, 0, 0, 713, 715,
	0, 0, 0, 109, 0, 623, 583, 634, 591, 634,
	0, 0, 783, 784, 0, 802, 963, 804, 809, 0,
	0, 368, 0, 0, 548, 0, 0, 0, 1257, 1172,
	0, 0, 0, 615, 645, 0, 0, 0, 628, 0,
	701, 1189, 636, 126, 0, 146, 0, 595, 0, 0,
	598, 0, 0, 0, 0, 0, 591, 583, 571, 583,
	0, 0, 775, 0, 803, 173, 173, 370, 372, 1254,
	1259, 1262, -2, 1612, 1470, 0, 1260, 1249, 1250, 0,
	617, 641, 642, 0, 637, 638, 639, 1426, 618, 619,
	633, 640, 148, 592, 0, 0, 593, 0, 0, 112,
	114, 0, 621, 591, 591, 0, 691, 963, 156, 157,
	0, 1264, 1265, 1266, 1267, 1268, 610, 643, 0, 644,
	0, 0, 0, 645, 596, 0, 599, 0, 586, 622,
	688, 634, 801, 0, 646, 0, 649, 650, 0, 647,
	630, 0, 0, 582, 584, 585, 583, 1263, 648, 651,
	652, 0, 0, 591, 591, 0, 689, 597, 0, 0,
	0, 591, 600,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 398, 3, 404, 399, 3,
	409, 410, 402, 400, 414, 401, 411, 403, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 418, 413,
	390, 392, 391, 394, 415, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 407, 3, 408, 405, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 416, 397, 417, 395,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 393, 57733, 396, 57734, 406,
	57735, 412, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1228
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1234
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1240
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1249
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1258
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1267
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1279
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1350
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1373
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = nil
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1479
		{
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			return unimplemented(sqllex, "alter using")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1483
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.str = "CSV"
		}
	case 156:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1647
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1695
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.str = ""
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "CREATE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "DELETE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			return helpWith(sqllex, "DROP")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1839
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "DELETE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			return helpWith(sqllex, "INSERT")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
			return helpWith(sqllex, "RESET")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "RESET")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "USE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{ /* SKIP DOC */
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "USE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return unimplemented(sqllex, "set local")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2396
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			return unimplemented(sqllex, "set from current")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2428
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = tree.Low
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = tree.Normal
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = tree.High
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			return helpWith(sqllex, "SHOW")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.str = "client_encoding"
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.str = "timezone"
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2628
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2647
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2669
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2704
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2712
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2723
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2779
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2792
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2797
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = true
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = false
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2860
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2881
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2884
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2892
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2914
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2925
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2935
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2982
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2988
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2992
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2998
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3002
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3006
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.str = ""
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 597:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 600:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3554
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			return unimplemented(sqllex, "match full")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3691
		{
			return unimplemented(sqllex, "match partial")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3692
		{
			return unimplemented(sqllex, "match simple")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3693
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3792
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3817
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3827
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = nil
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3959
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = true
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = false
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = true
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = false
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4001
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4004
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4005
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = tree.Descending
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4056
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4058
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = true
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = false
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4102
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4113
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4124
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4135
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4140
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4192
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4194
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4213
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.str = ""
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.str = ""
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4272
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4274
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 774:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.str = ""
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.str = ""
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.str = ""
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.str = ""
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4382
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4408
		{
			return helpWith(sqllex, "INSERT")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4426
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4496
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4500
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 809:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4549
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4550
		{
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4574
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4673
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			return helpWith(sqllex, "SELECT")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4709
		{
			return helpWith(sqllex, "VALUES")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4710
		{
			return helpWith(sqllex, "TABLE")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4771
		{
			return helpWith(sqllex, "SELECT")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4815
		{
			return helpWith(sqllex, "TABLE")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4830
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4854
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4861
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4865
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = true
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = false
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = false
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = true
		}
	case 865:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4895
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4942
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4966
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5081
		{
			return helpWith(sqllex, "VALUES")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5083
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5098
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5120
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5198
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = nil
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = true
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = false
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5371
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5372
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5446
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5460
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5468
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5517
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = nil
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5674
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5758
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5810
		{
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5811
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = tree.Year
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = tree.Month
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = tree.Day
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = tree.Month
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = nil
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = tree.Second
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5914
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5949
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6177
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6243
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6295
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6449
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6454
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6463
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6477
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6497
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6501
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6504
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6505
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6507
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6511
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6515
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6518
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6529
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6536
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6545
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6546
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6550
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6552
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6556
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6562
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6566
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6570
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6576
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6580
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6584
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6588
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6592
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6596
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6604
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6608
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6615
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6618
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6620
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6623
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6625
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6628
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6630
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6633
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6635
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6638
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6643
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6645
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6648
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6654
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6657
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6658
		{
			return unimplemented(sqllex, "treat")
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6660
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6664
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6668
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6672
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6676
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6679
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6681
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6684
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6689
		{
			return unimplemented(sqllex, "within group")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6690
		{
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6694
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6698
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6705
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6709
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6715
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6725
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6733
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6737
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6741
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6748
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6767
		{
			sqlVAL.str = ""
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6773
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6777
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6787
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6788
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6789
		{
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6792
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6793
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6799
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6800
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6801
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6802
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6803
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6814
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6818
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6824
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6830
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6836
		{
			sqlVAL.union.val = tree.Any
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6840
		{
			sqlVAL.union.val = tree.Some
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6844
		{
			sqlVAL.union.val = tree.All
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6849
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6850
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6851
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6852
		{
			sqlVAL.union.val = tree.Div
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6853
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6854
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6855
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6856
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6857
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6858
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6859
		{
			sqlVAL.union.val = tree.LT
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6860
		{
			sqlVAL.union.val = tree.GT
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6861
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6862
		{
			sqlVAL.union.val = tree.LE
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6863
		{
			sqlVAL.union.val = tree.GE
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6864
		{
			sqlVAL.union.val = tree.NE
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6868
		{
			sqlVAL.union.val = tree.Like
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6869
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6870
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6871
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6883
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6889
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6899
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6909
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6913
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6919
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6929
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6933
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6955
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6959
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6963
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6969
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6976
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6980
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6997
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7001
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7005
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7009
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7013
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7019
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7025
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7031
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7035
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7039
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7045
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7049
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7060
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7067
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7077
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7083
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7087
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7094
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7100
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7104
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7111
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7117
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7126
		{
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7127
		{
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7131
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7141
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7150
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7154
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7158
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7166
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7176
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7186
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7193
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7221
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7225
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7229
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7235
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7246
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7250
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7254
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7258
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7261
		{
			return unimplemented(sqllex, "func const")
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7263
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7267
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7270
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7272
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7276
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7280
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7287
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7291
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7300
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7311
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7321
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7417
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7424
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7428
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7432
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7446
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7450
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7454
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7467
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7485
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7495
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7499
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7513
		{
			sqlVAL.str = ""
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7519
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7523
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
