// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:549
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7974

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	415, 55,
	-2, 865,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	163, 703,
	-2, 0,
	-1, 58,
	101, 865,
	167, 865,
	363, 865,
	364, 865,
	-2, 0,
	-1, 71,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 828,
	-1, 107,
	191, 521,
	351, 521,
	-2, 0,
	-1, 112,
	4, 867,
	20, 867,
	21, 867,
	22, 867,
	23, 867,
	25, 867,
	30, 867,
	35, 867,
	36, 867,
	37, 867,
	38, 867,
	39, 867,
	40, 867,
	41, 867,
	42, 867,
	43, 867,
	44, 867,
	46, 867,
	47, 867,
	48, 867,
	49, 867,
	50, 867,
	51, 867,
	54, 867,
	55, 867,
	56, 867,
	58, 867,
	59, 867,
	63, 867,
	64, 867,
	65, 867,
	66, 867,
	67, 867,
	69, 867,
	70, 867,
	71, 867,
	72, 867,
	74, 867,
	76, 867,
	77, 867,
	80, 867,
	81, 867,
	82, 867,
	90, 867,
	91, 867,
	92, 867,
	93, 867,
	94, 867,
	95, 867,
	96, 867,
	97, 867,
	99, 867,
	101, 867,
	103, 867,
	106, 867,
	107, 867,
	109, 867,
	113, 867,
	114, 867,
	115, 867,
	116, 867,
	117, 867,
	118, 867,
	119, 867,
	120, 867,
	121, 867,
	129, 867,
	130, 867,
	131, 867,
	132, 867,
	133, 867,
	135, 867,
	137, 867,
	141, 867,
	143, 867,
	144, 867,
	146, 867,
	148, 867,
	149, 867,
	150, 867,
	151, 867,
	152, 867,
	153, 867,
	154, 867,
	155, 867,
	158, 867,
	162, 867,
	164, 867,
	167, 867,
	168, 867,
	169, 867,
	170, 867,
	171, 867,
	172, 867,
	173, 867,
	174, 867,
	176, 867,
	178, 867,
	181, 867,
	182, 867,
	183, 867,
	185, 867,
	186, 867,
	189, 867,
	190, 867,
	191, 867,
	193, 867,
	194, 867,
	196, 867,
	198, 867,
	199, 867,
	202, 867,
	203, 867,
	206, 867,
	208, 867,
	211, 867,
	212, 867,
	213, 867,
	214, 867,
	215, 867,
	217, 867,
	218, 867,
	219, 867,
	220, 867,
	225, 867,
	226, 867,
	227, 867,
	228, 867,
	229, 867,
	231, 867,
	232, 867,
	234, 867,
	235, 867,
	236, 867,
	239, 867,
	240, 867,
	242, 867,
	244, 867,
	245, 867,
	246, 867,
	247, 867,
	248, 867,
	249, 867,
	250, 867,
	251, 867,
	253, 867,
	254, 867,
	255, 867,
	256, 867,
	257, 867,
	259, 867,
	260, 867,
	261, 867,
	262, 867,
	263, 867,
	264, 867,
	265, 867,
	266, 867,
	268, 867,
	269, 867,
	270, 867,
	271, 867,
	272, 867,
	274, 867,
	275, 867,
	276, 867,
	277, 867,
	278, 867,
	279, 867,
	280, 867,
	282, 867,
	284, 867,
	285, 867,
	286, 867,
	287, 867,
	288, 867,
	289, 867,
	291, 867,
	292, 867,
	293, 867,
	294, 867,
	295, 867,
	296, 867,
	297, 867,
	299, 867,
	300, 867,
	301, 867,
	302, 867,
	303, 867,
	304, 867,
	305, 867,
	306, 867,
	307, 867,
	309, 867,
	310, 867,
	311, 867,
	312, 867,
	314, 867,
	315, 867,
	316, 867,
	317, 867,
	319, 867,
	320, 867,
	321, 867,
	322, 867,
	323, 867,
	324, 867,
	325, 867,
	326, 867,
	327, 867,
	328, 867,
	329, 867,
	330, 867,
	332, 867,
	333, 867,
	335, 867,
	336, 867,
	337, 867,
	338, 867,
	339, 867,
	340, 867,
	341, 867,
	342, 867,
	343, 867,
	344, 867,
	346, 867,
	347, 867,
	348, 867,
	351, 867,
	352, 867,
	353, 867,
	354, 867,
	356, 867,
	357, 867,
	358, 867,
	359, 867,
	362, 867,
	363, 867,
	364, 867,
	365, 867,
	367, 867,
	369, 867,
	370, 867,
	371, 867,
	372, 867,
	373, 867,
	374, 867,
	377, 867,
	378, 867,
	383, 867,
	384, 867,
	385, 867,
	386, 867,
	387, 867,
	388, 867,
	-2, 0,
	-1, 132,
	112, 838,
	124, 838,
	175, 838,
	201, 838,
	230, 838,
	238, 838,
	360, 838,
	-2, 831,
	-1, 137,
	1, 761,
	181, 761,
	259, 761,
	263, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 139,
	1, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 140,
	1, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 141,
	1, 765,
	414, 765,
	415, 765,
	-2, 0,
	-1, 167,
	4, 874,
	5, 874,
	6, 874,
	7, 874,
	8, 874,
	9, 874,
	20, 874,
	21, 874,
	22, 874,
	23, 874,
	25, 874,
	30, 874,
	31, 874,
	35, 874,
	36, 874,
	37, 874,
	38, 874,
	39, 874,
	40, 874,
	41, 874,
	42, 874,
	43, 874,
	44, 874,
	46, 874,
	47, 874,
	48, 874,
	49, 874,
	50, 874,
	51, 874,
	52, 874,
	53, 874,
	54, 874,
	55, 874,
	56, 874,
	58, 874,
	59, 874,
	61, 874,
	63, 874,
	64, 874,
	65, 874,
	66, 874,
	67, 874,
	69, 874,
	70, 874,
	71, 874,
	72, 874,
	74, 874,
	76, 874,
	77, 874,
	79, 874,
	80, 874,
	81, 874,
	82, 874,
	83, 874,
	84, 874,
	85, 874,
	86, 874,
	88, 874,
	89, 874,
	90, 874,
	91, 874,
	92, 874,
	93, 874,
	94, 874,
	95, 874,
	96, 874,
	97, 874,
	98, 874,
	99, 874,
	101, 874,
	103, 874,
	106, 874,
	107, 874,
	109, 874,
	113, 874,
	114, 874,
	115, 874,
	116, 874,
	117, 874,
	118, 874,
	119, 874,
	120, 874,
	121, 874,
	122, 874,
	123, 874,
	129, 874,
	130, 874,
	131, 874,
	132, 874,
	133, 874,
	135, 874,
	137, 874,
	140, 874,
	141, 874,
	143, 874,
	144, 874,
	146, 874,
	148, 874,
	149, 874,
	150, 874,
	151, 874,
	152, 874,
	153, 874,
	154, 874,
	155, 874,
	156, 874,
	158, 874,
	162, 874,
	164, 874,
	166, 874,
	167, 874,
	168, 874,
	169, 874,
	170, 874,
	171, 874,
	172, 874,
	173, 874,
	174, 874,
	176, 874,
	178, 874,
	179, 874,
	180, 874,
	181, 874,
	182, 874,
	183, 874,
	184, 874,
	185, 874,
	186, 874,
	189, 874,
	190, 874,
	191, 874,
	193, 874,
	194, 874,
	196, 874,
	197, 874,
	198, 874,
	199, 874,
	200, 874,
	202, 874,
	203, 874,
	206, 874,
	208, 874,
	209, 874,
	210, 874,
	211, 874,
	212, 874,
	213, 874,
	214, 874,
	215, 874,
	216, 874,
	217, 874,
	218, 874,
	219, 874,
	220, 874,
	221, 874,
	223, 874,
	224, 874,
	225, 874,
	226, 874,
	227, 874,
	228, 874,
	229, 874,
	231, 874,
	232, 874,
	235, 874,
	236, 874,
	239, 874,
	240, 874,
	241, 874,
	242, 874,
	243, 874,
	244, 874,
	245, 874,
	246, 874,
	247, 874,
	248, 874,
	249, 874,
	250, 874,
	251, 874,
	253, 874,
	254, 874,
	255, 874,
	256, 874,
	257, 874,
	259, 874,
	260, 874,
	261, 874,
	262, 874,
	263, 874,
	264, 874,
	265, 874,
	266, 874,
	268, 874,
	269, 874,
	270, 874,
	271, 874,
	272, 874,
	274, 874,
	275, 874,
	276, 874,
	277, 874,
	278, 874,
	279, 874,
	280, 874,
	282, 874,
	283, 874,
	284, 874,
	285, 874,
	286, 874,
	287, 874,
	288, 874,
	289, 874,
	291, 874,
	292, 874,
	293, 874,
	294, 874,
	295, 874,
	296, 874,
	297, 874,
	299, 874,
	300, 874,
	301, 874,
	302, 874,
	303, 874,
	304, 874,
	305, 874,
	306, 874,
	307, 874,
	308, 874,
	309, 874,
	310, 874,
	311, 874,
	312, 874,
	313, 874,
	314, 874,
	315, 874,
	316, 874,
	317, 874,
	319, 874,
	320, 874,
	321, 874,
	322, 874,
	323, 874,
	324, 874,
	325, 874,
	326, 874,
	327, 874,
	328, 874,
	329, 874,
	330, 874,
	332, 874,
	333, 874,
	335, 874,
	336, 874,
	337, 874,
	338, 874,
	339, 874,
	340, 874,
	341, 874,
	342, 874,
	343, 874,
	344, 874,
	346, 874,
	347, 874,
	348, 874,
	351, 874,
	352, 874,
	353, 874,
	354, 874,
	355, 874,
	356, 874,
	357, 874,
	358, 874,
	359, 874,
	362, 874,
	363, 874,
	364, 874,
	365, 874,
	366, 874,
	367, 874,
	369, 874,
	370, 874,
	371, 874,
	372, 874,
	373, 874,
	374, 874,
	377, 874,
	378, 874,
	383, 874,
	384, 874,
	385, 874,
	386, 874,
	387, 874,
	388, 874,
	389, 874,
	397, 874,
	402, 874,
	403, 874,
	404, 874,
	411, 874,
	417, 874,
	-2, 0,
	-1, 170,
	1, 55,
	415, 55,
	-2, 865,
	-1, 202,
	413, 1432,
	416, 1432,
	-2, 564,
	-1, 203,
	413, 1434,
	416, 1434,
	-2, 565,
	-1, 204,
	413, 1433,
	416, 1433,
	-2, 566,
	-1, 205,
	416, 1374,
	-2, 567,
	-1, 593,
	139, 1529,
	349, 1529,
	394, 1529,
	413, 1529,
	-2, 0,
	-1, 594,
	139, 1466,
	349, 1466,
	394, 1466,
	413, 1466,
	-2, 0,
	-1, 596,
	139, 1597,
	349, 1597,
	394, 1597,
	413, 1597,
	-2, 0,
	-1, 598,
	139, 1623,
	349, 1623,
	394, 1623,
	413, 1623,
	-2, 0,
	-1, 605,
	139, 1534,
	349, 1534,
	394, 1534,
	413, 1534,
	-2, 396,
	-1, 640,
	1, 493,
	410, 493,
	412, 493,
	414, 493,
	415, 493,
	-2, 0,
	-1, 641,
	1, 563,
	136, 563,
	410, 563,
	412, 563,
	414, 563,
	415, 563,
	-2, 0,
	-1, 647,
	1, 507,
	410, 507,
	412, 507,
	414, 507,
	415, 507,
	-2, 0,
	-1, 649,
	1, 511,
	410, 511,
	412, 511,
	414, 511,
	415, 511,
	-2, 0,
	-1, 652,
	1, 522,
	410, 522,
	412, 522,
	414, 522,
	415, 522,
	-2, 0,
	-1, 653,
	1, 528,
	410, 528,
	412, 528,
	414, 528,
	415, 528,
	-2, 0,
	-1, 654,
	1, 531,
	410, 531,
	412, 531,
	414, 531,
	415, 531,
	-2, 0,
	-1, 658,
	1, 545,
	410, 545,
	412, 545,
	414, 545,
	415, 545,
	-2, 0,
	-1, 659,
	1, 547,
	410, 547,
	412, 547,
	414, 547,
	415, 547,
	-2, 0,
	-1, 687,
	124, 876,
	201, 876,
	230, 876,
	-2, 834,
	-1, 695,
	124, 875,
	201, 875,
	230, 875,
	-2, 832,
	-1, 722,
	411, 1717,
	-2, 1153,
	-1, 723,
	411, 1718,
	-2, 1154,
	-1, 754,
	411, 1426,
	-2, 1417,
	-1, 755,
	5, 1011,
	411, 1441,
	-2, 1432,
	-1, 756,
	411, 1442,
	-2, 1433,
	-1, 763,
	5, 995,
	-2, 1461,
	-1, 764,
	5, 996,
	-2, 1650,
	-1, 765,
	5, 997,
	-2, 1649,
	-1, 766,
	5, 998,
	-2, 1620,
	-1, 767,
	5, 999,
	-2, 1679,
	-1, 768,
	5, 1000,
	-2, 1688,
	-1, 769,
	5, 1001,
	-2, 1689,
	-1, 770,
	5, 1002,
	-2, 1690,
	-1, 771,
	5, 1003,
	-2, 1691,
	-1, 772,
	5, 1004,
	-2, 1693,
	-1, 773,
	5, 1005,
	-2, 1701,
	-1, 774,
	5, 1006,
	-2, 1668,
	-1, 775,
	5, 1007,
	-2, 1645,
	-1, 776,
	5, 1008,
	-2, 1543,
	-1, 777,
	5, 1009,
	-2, 1544,
	-1, 778,
	5, 1010,
	-2, 1515,
	-1, 779,
	5, 1057,
	411, 1057,
	-2, 1675,
	-1, 797,
	5, 1022,
	-2, 1644,
	-1, 798,
	5, 1049,
	-2, 1646,
	-1, 799,
	5, 1032,
	-2, 1647,
	-1, 800,
	5, 1031,
	-2, 1648,
	-1, 801,
	5, 1049,
	-2, 1651,
	-1, 802,
	5, 1049,
	-2, 1652,
	-1, 803,
	5, 1050,
	-2, 1655,
	-1, 804,
	5, 1014,
	-2, 1656,
	-1, 805,
	5, 1014,
	-2, 1657,
	-1, 808,
	5, 1039,
	-2, 1661,
	-1, 809,
	5, 1024,
	-2, 1662,
	-1, 810,
	5, 1025,
	-2, 1663,
	-1, 812,
	5, 1015,
	-2, 1669,
	-1, 813,
	5, 1016,
	-2, 1670,
	-1, 814,
	5, 1017,
	-2, 1671,
	-1, 815,
	5, 1018,
	-2, 1672,
	-1, 816,
	5, 1019,
	-2, 1673,
	-1, 817,
	5, 1020,
	-2, 1674,
	-1, 818,
	5, 983,
	-2, 1676,
	-1, 819,
	5, 984,
	-2, 1677,
	-1, 821,
	5, 1014,
	-2, 1681,
	-1, 824,
	5, 1023,
	-2, 1686,
	-1, 825,
	5, 1021,
	-2, 1692,
	-1, 826,
	5, 1047,
	-2, 1694,
	-1, 828,
	5, 1051,
	-2, 1696,
	-1, 829,
	5, 1053,
	-2, 1697,
	-1, 830,
	5, 1055,
	-2, 1698,
	-1, 833,
	5, 1046,
	-2, 1703,
	-1, 902,
	411, 1441,
	-2, 1432,
	-1, 919,
	274, 1414,
	404, 1414,
	-2, 1413,
	-1, 1055,
	249, 863,
	-2, 689,
	-1, 1064,
	233, 1436,
	-2, 0,
	-1, 1107,
	1, 263,
	410, 263,
	412, 263,
	414, 263,
	415, 263,
	-2, 837,
	-1, 1110,
	4, 1702,
	10, 1702,
	11, 1702,
	13, 1702,
	14, 1702,
	15, 1702,
	16, 1702,
	17, 1702,
	18, 1702,
	20, 1702,
	21, 1702,
	22, 1702,
	23, 1702,
	25, 1702,
	28, 1702,
	30, 1702,
	32, 1702,
	35, 1702,
	36, 1702,
	37, 1702,
	38, 1702,
	39, 1702,
	40, 1702,
	41, 1702,
	42, 1702,
	43, 1702,
	44, 1702,
	46, 1702,
	47, 1702,
	48, 1702,
	49, 1702,
	50, 1702,
	51, 1702,
	54, 1702,
	55, 1702,
	56, 1702,
	58, 1702,
	59, 1702,
	60, 1702,
	63, 1702,
	64, 1702,
	65, 1702,
	66, 1702,
	67, 1702,
	68, 1702,
	69, 1702,
	70, 1702,
	71, 1702,
	72, 1702,
	74, 1702,
	75, 1702,
	76, 1702,
	77, 1702,
	79, 1702,
	80, 1702,
	81, 1702,
	82, 1702,
	90, 1702,
	91, 1702,
	92, 1702,
	93, 1702,
	94, 1702,
	95, 1702,
	96, 1702,
	97, 1702,
	99, 1702,
	101, 1702,
	103, 1702,
	106, 1702,
	107, 1702,
	109, 1702,
	113, 1702,
	114, 1702,
	115, 1702,
	116, 1702,
	117, 1702,
	118, 1702,
	119, 1702,
	120, 1702,
	121, 1702,
	125, 1702,
	126, 1702,
	127, 1702,
	128, 1702,
	129, 1702,
	130, 1702,
	131, 1702,
	132, 1702,
	133, 1702,
	134, 1702,
	135, 1702,
	137, 1702,
	140, 1702,
	141, 1702,
	143, 1702,
	144, 1702,
	146, 1702,
	148, 1702,
	149, 1702,
	150, 1702,
	151, 1702,
	152, 1702,
	153, 1702,
	154, 1702,
	155, 1702,
	156, 1702,
	157, 1702,
	158, 1702,
	159, 1702,
	160, 1702,
	161, 1702,
	162, 1702,
	164, 1702,
	166, 1702,
	167, 1702,
	168, 1702,
	169, 1702,
	170, 1702,
	171, 1702,
	172, 1702,
	173, 1702,
	174, 1702,
	176, 1702,
	178, 1702,
	179, 1702,
	180, 1702,
	181, 1702,
	182, 1702,
	183, 1702,
	184, 1702,
	185, 1702,
	186, 1702,
	187, 1702,
	188, 1702,
	189, 1702,
	190, 1702,
	191, 1702,
	193, 1702,
	194, 1702,
	196, 1702,
	197, 1702,
	198, 1702,
	199, 1702,
	200, 1702,
	202, 1702,
	203, 1702,
	206, 1702,
	207, 1702,
	208, 1702,
	211, 1702,
	212, 1702,
	213, 1702,
	214, 1702,
	215, 1702,
	216, 1702,
	217, 1702,
	218, 1702,
	219, 1702,
	220, 1702,
	223, 1702,
	225, 1702,
	226, 1702,
	227, 1702,
	228, 1702,
	229, 1702,
	231, 1702,
	232, 1702,
	235, 1702,
	236, 1702,
	237, 1702,
	239, 1702,
	240, 1702,
	242, 1702,
	244, 1702,
	245, 1702,
	246, 1702,
	247, 1702,
	248, 1702,
	249, 1702,
	250, 1702,
	251, 1702,
	253, 1702,
	254, 1702,
	255, 1702,
	256, 1702,
	257, 1702,
	259, 1702,
	260, 1702,
	261, 1702,
	262, 1702,
	263, 1702,
	264, 1702,
	265, 1702,
	266, 1702,
	268, 1702,
	269, 1702,
	270, 1702,
	271, 1702,
	272, 1702,
	273, 1702,
	274, 1702,
	275, 1702,
	276, 1702,
	277, 1702,
	278, 1702,
	279, 1702,
	280, 1702,
	282, 1702,
	283, 1702,
	284, 1702,
	285, 1702,
	286, 1702,
	287, 1702,
	288, 1702,
	289, 1702,
	290, 1702,
	291, 1702,
	292, 1702,
	293, 1702,
	294, 1702,
	295, 1702,
	296, 1702,
	297, 1702,
	299, 1702,
	300, 1702,
	301, 1702,
	302, 1702,
	303, 1702,
	304, 1702,
	305, 1702,
	306, 1702,
	307, 1702,
	309, 1702,
	310, 1702,
	311, 1702,
	312, 1702,
	313, 1702,
	314, 1702,
	315, 1702,
	316, 1702,
	317, 1702,
	319, 1702,
	320, 1702,
	321, 1702,
	322, 1702,
	323, 1702,
	324, 1702,
	325, 1702,
	326, 1702,
	327, 1702,
	328, 1702,
	329, 1702,
	330, 1702,
	332, 1702,
	333, 1702,
	335, 1702,
	336, 1702,
	337, 1702,
	338, 1702,
	339, 1702,
	340, 1702,
	341, 1702,
	342, 1702,
	343, 1702,
	344, 1702,
	346, 1702,
	347, 1702,
	348, 1702,
	351, 1702,
	352, 1702,
	353, 1702,
	354, 1702,
	356, 1702,
	357, 1702,
	358, 1702,
	359, 1702,
	362, 1702,
	363, 1702,
	364, 1702,
	365, 1702,
	367, 1702,
	369, 1702,
	370, 1702,
	371, 1702,
	372, 1702,
	373, 1702,
	374, 1702,
	377, 1702,
	378, 1702,
	383, 1702,
	384, 1702,
	385, 1702,
	386, 1702,
	387, 1702,
	388, 1702,
	389, 1702,
	390, 1702,
	392, 1702,
	393, 1702,
	394, 1702,
	395, 1702,
	396, 1702,
	397, 1702,
	399, 1702,
	400, 1702,
	401, 1702,
	402, 1702,
	403, 1702,
	404, 1702,
	405, 1702,
	406, 1702,
	407, 1702,
	409, 1702,
	412, 1702,
	413, 1702,
	416, 1702,
	417, 1702,
	-2, 0,
	-1, 1128,
	139, 1597,
	349, 1597,
	394, 1597,
	413, 1597,
	-2, 0,
	-1, 1153,
	139, 1623,
	349, 1623,
	394, 1623,
	413, 1623,
	-2, 0,
	-1, 1154,
	181, 773,
	259, 773,
	263, 773,
	-2, 383,
	-1, 1230,
	124, 875,
	201, 875,
	230, 875,
	-2, 835,
	-1, 1314,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 1194,
	-1, 1360,
	412, 1309,
	-2, 0,
	-1, 1367,
	181, 773,
	259, 773,
	263, 773,
	-2, 768,
	-1, 1396,
	412, 1309,
	-2, 0,
	-1, 1404,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 942,
	-1, 1597,
	181, 773,
	259, 773,
	263, 773,
	-2, 385,
	-1, 1704,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1092,
	-1, 1705,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1093,
	-1, 1706,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1094,
	-1, 1707,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1095,
	-1, 1708,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1096,
	-1, 1709,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1097,
	-1, 1710,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1098,
	-1, 1711,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1099,
	-1, 1723,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1111,
	-1, 1724,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1112,
	-1, 1725,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1113,
	-1, 1728,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1118,
	-1, 1734,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1120,
	-1, 1736,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1124,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1125,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1126,
	-1, 1739,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1127,
	-1, 1815,
	5, 1011,
	139, 1320,
	411, 1441,
	-2, 1432,
	-1, 1816,
	139, 1321,
	-2, 1640,
	-1, 1817,
	139, 1322,
	-2, 1533,
	-1, 1818,
	139, 1323,
	-2, 1486,
	-1, 1819,
	139, 1324,
	-2, 1509,
	-1, 1820,
	139, 1325,
	-2, 1532,
	-1, 1821,
	139, 1326,
	-2, 1593,
	-1, 1889,
	412, 1309,
	-2, 0,
	-1, 1899,
	1, 943,
	79, 943,
	112, 943,
	124, 943,
	140, 943,
	145, 943,
	147, 943,
	166, 943,
	175, 943,
	184, 943,
	197, 943,
	201, 943,
	216, 943,
	230, 943,
	233, 943,
	238, 943,
	281, 943,
	283, 943,
	360, 943,
	368, 943,
	380, 943,
	381, 943,
	391, 943,
	410, 943,
	412, 943,
	414, 943,
	415, 943,
	416, 943,
	-2, 942,
	-1, 1901,
	411, 1418,
	-2, 1430,
	-1, 1978,
	412, 1379,
	416, 1379,
	-2, 1406,
	-1, 2097,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1119,
	-1, 2098,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1121,
	-1, 2103,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1122,
	-1, 2121,
	243, 1280,
	-2, 1282,
	-1, 2328,
	249, 863,
	-2, 689,
	-1, 2391,
	181, 773,
	259, 773,
	263, 773,
	-2, 382,
	-1, 2405,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1123,
	-1, 2410,
	179, 0,
	180, 0,
	223, 0,
	-2, 1141,
	-1, 2419,
	243, 1281,
	-2, 1283,
	-1, 2468,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1171,
	-1, 2469,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1172,
	-1, 2470,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1173,
	-1, 2474,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1177,
	-1, 2475,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1178,
	-1, 2476,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1179,
	-1, 2517,
	411, 1419,
	-2, 1431,
	-1, 2629,
	179, 0,
	180, 0,
	223, 0,
	-2, 1142,
	-1, 2632,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1145,
	-1, 2633,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1147,
	-1, 2777,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1146,
	-1, 2778,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1148,
	-1, 2788,
	179, 0,
	-2, 1180,
	-1, 2877,
	179, 0,
	-2, 1181,
	-1, 2975,
	38, 0,
	156, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1643,
}

const sqlPrivate = 57344

const sqlLast = 55787

var sqlAct = [...]int{

	756, 2950, 2003, 2953, 2984, 2937, 2985, 2440, 2951, 2806,
	2881, 2768, 2973, 2011, 1691, 2745, 2583, 2731, 2566, 2048,
	1097, 2091, 2578, 730, 2701, 2686, 2974, 696, 1026, 2335,
	2527, 2342, 923, 2588, 2817, 1751, 1528, 2793, 1233, 2337,
	204, 753, 2375, 2983, 476, 3037, 1980, 2377, 752, 2000,
	1529, 476, 1040, 2238, 1976, 916, 938, 2347, 476, 2604,
	476, 1394, 2197, 476, 204, 1318, 476, 476, 2214, 932,
	1375, 2012, 795, 476, 1480, 1883, 1489, 2664, 471, 1477,
	1481, 476, 1979, 1061, 1093, 1913, 1894, 1682, 1486, 2493,
	2225, 1432, 524, 2882, 1321, 1763, 2133, 1677, 1965, 1764,
	2087, 2196, 2346, 521, 1790, 1367, 704, 126, 1904, 1448,
	1454, 2312, 1886, 1412, 1478, 1622, 1896, 2732, 545, 27,
	1414, 1748, 739, 1376, 1940, 1772, 1156, 1852, 1784, 1966,
	1346, 925, 1348, 1939, 1108, 557, 1893, 1977, 1090, 1080,
	2528, 1983, 2005, 893, 1100, 205, 206, 1502, 473, 1385,
	1860, 1234, 1811, 603, 1875, 888, 870, 1309, 1621, 1403,
	720, 1232, 476, 476, 132, 126, 133, 747, 200, 1496,
	1030, 1077, 560, 1424, 518, 1238, 472, 1366, 632, 569,
	597, 2509, 868, 583, 2510, 1504, 2120, 2004, 461, 700,
	2526, 1504, 1504, 476, 476, 476, 928, 476, 476, 941,
	941, 576, 2050, 3064, 700, 1395, 2403, 1869, 476, 476,
	552, 1967, 461, 1407, 3058, 3057, 464, 1457, 1869, 1869,
	3034, 39, 3031, 2353, 2700, 3009, 1463, 3003, 2381, 2700,
	695, 1869, 571, 2354, 3002, 42, 1516, 2255, 1869, 2999,
	464, 2996, 891, 3000, 2993, 2997, 2325, 2971, 1463, 2970,
	1467, 1463, 710, 1463, 2969, 2968, 2932, 2919, 1516, 1516,
	2040, 1463, 2912, 551, 70, 2910, 2700, 2167, 2168, 2700,
	2908, 2879, 2865, 919, 2700, 2040, 2612, 126, 871, 871,
	2853, 2848, 935, 2846, 2700, 1463, 2836, 2700, 1869, 27,
	1463, 688, 553, 687, 2835, 2933, 1862, 1139, 1463, 57,
	555, 748, 2828, 2827, 58, 2866, 1463, 2700, 552, 1319,
	2032, 939, 1027, 2799, 705, 1516, 2779, 1463, 2726, 39,
	2040, 2722, 1869, 2124, 2699, 1869, 1967, 552, 2700, 2125,
	2167, 2168, 1463, 42, 1130, 2631, 60, 2602, 39, 2040,
	921, 2595, 2594, 2505, 1463, 872, 2595, 2506, 909, 913,
	918, 2496, 42, 1032, 1031, 1765, 461, 2496, 2499, 2414,
	2366, 551, 1869, 1869, 2317, 2211, 2162, 1869, 2161, 1869,
	1869, 2155, 1869, 2154, 2059, 2156, 703, 1869, 1869, 1861,
	551, 2039, 2132, 885, 464, 2040, 1600, 2612, 2028, 1972,
	553, 2173, 1869, 1463, 1955, 1902, 1868, 57, 555, 701,
	1869, 1131, 58, 1520, 874, 2008, 875, 1521, 2481, 553,
	2416, 2317, 2090, 1505, 2070, 1462, 57, 555, 1371, 1505,
	1505, 58, 1767, 522, 1029, 170, 2355, 1619, 1127, 1126,
	1125, 1124, 1123, 167, 60, 61, 1122, 1121, 1120, 1119,
	1118, 1117, 1116, 1115, 1114, 2356, 552, 1113, 1112, 1111,
	876, 873, 694, 60, 2173, 693, 692, 39, 691, 1033,
	690, 686, 135, 63, 2183, 64, 685, 1787, 684, 169,
	683, 42, 682, 681, 680, 679, 678, 677, 676, 672,
	671, 670, 630, 167, 629, 476, 476, 476, 928, 928,
	476, 2396, 628, 476, 554, 627, 476, 107, 626, 551,
	625, 624, 476, 1319, 623, 1131, 622, 621, 168, 620,
	2353, 619, 476, 476, 476, 476, 476, 928, 928, 169,
	1249, 1250, 1788, 1463, 928, 618, 617, 2183, 553, 616,
	615, 614, 613, 61, 612, 57, 555, 611, 1101, 610,
	58, 609, 1051, 608, 607, 1252, 134, 2184, 1803, 2679,
	1512, 592, 61, 552, 1801, 476, 1503, 1661, 168, 591,
	135, 63, 1066, 64, 39, 1054, 476, 161, 590, 589,
	1251, 1799, 60, 1861, 1131, 162, 2167, 2168, 42, 135,
	63, 167, 64, 1789, 1786, 1094, 476, 588, 587, 2075,
	509, 508, 554, 482, 481, 107, 134, 476, 480, 1892,
	167, 466, 465, 190, 189, 167, 551, 188, 187, 186,
	2184, 554, 185, 184, 107, 183, 182, 169, 181, 180,
	1249, 1250, 179, 1282, 1283, 1284, 1292, 1293, 1294, 178,
	177, 176, 1055, 1058, 175, 553, 169, 928, 1285, 174,
	173, 169, 57, 555, 1257, 1252, 172, 58, 1298, 171,
	2638, 754, 1084, 1087, 2596, 1109, 168, 1079, 2177, 2169,
	2170, 2171, 2172, 2174, 2175, 161, 167, 2514, 2251, 1791,
	1251, 61, 167, 162, 476, 168, 2130, 2079, 1271, 60,
	168, 1973, 1970, 1402, 161, 1268, 1797, 1625, 1411, 161,
	1325, 1170, 162, 1042, 134, 1249, 1250, 162, 135, 63,
	2173, 64, 169, 1035, 1154, 1245, 2990, 2972, 169, 2955,
	2167, 2168, 2944, 134, 2320, 1231, 2873, 1164, 2007, 167,
	1252, 1168, 2169, 2170, 2171, 2172, 2174, 2175, 2167, 2168,
	554, 2849, 1759, 107, 2762, 1274, 1275, 1276, 1277, 2167,
	2168, 168, 2816, 2663, 1257, 1251, 2662, 168, 2753, 2661,
	161, 2869, 2654, 2650, 2867, 169, 161, 2649, 162, 1785,
	2648, 2644, 2643, 2642, 162, 2641, 1289, 1299, 2634, 1279,
	1280, 1281, 2611, 2609, 2513, 2490, 2489, 1151, 61, 134,
	1525, 1177, 2488, 2045, 1230, 134, 2182, 2426, 701, 1295,
	1296, 2316, 2250, 2241, 168, 2207, 2195, 1266, 1267, 2166,
	2163, 2160, 2159, 161, 2157, 135, 63, 2138, 64, 2137,
	1287, 162, 1171, 2121, 1899, 1245, 884, 1272, 1329, 1257,
	1244, 897, 1620, 1941, 3062, 1322, 167, 1312, 3045, 1229,
	3044, 2086, 523, 1297, 2173, 1041, 2442, 554, 2963, 2958,
	107, 2914, 2905, 2904, 1279, 1280, 1281, 1286, 2900, 745,
	2899, 2893, 2173, 2890, 2864, 1760, 2863, 1753, 2812, 1249,
	1250, 2790, 169, 2173, 2740, 476, 2736, 2734, 2721, 688,
	476, 687, 2167, 2168, 1241, 1242, 2705, 2659, 2613, 2581,
	2573, 2572, 2570, 1278, 1252, 1246, 2547, 2546, 2536, 2535,
	2501, 2409, 1272, 2372, 2370, 2301, 2285, 476, 2265, 2264,
	1273, 168, 2210, 2194, 2147, 2146, 2143, 2183, 2231, 1251,
	161, 2117, 1253, 1254, 1255, 1256, 1258, 1259, 162, 2112,
	1349, 1322, 1354, 1290, 1373, 2183, 2752, 1249, 1250, 1344,
	2047, 1889, 1880, 1347, 1867, 1795, 1473, 1336, 1350, 134,
	1335, 1334, 1333, 1610, 1609, 1396, 1619, 1616, 1374, 1379,
	1380, 1365, 1252, 1392, 1357, 1364, 1360, 2884, 1802, 1359,
	1358, 1356, 2265, 1398, 1800, 1355, 1352, 891, 2169, 2170,
	2171, 2172, 2174, 2175, 1351, 1273, 1342, 1251, 1341, 1340,
	2761, 1798, 1339, 1257, 1338, 1337, 871, 1326, 1313, 1312,
	2184, 1393, 1150, 701, 126, 1135, 2173, 1105, 2636, 1288,
	2608, 2508, 1263, 1264, 1270, 1269, 1265, 1291, 2184, 1262,
	1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 2504, 889,
	2042, 2123, 1881, 2167, 2168, 2368, 2651, 1420, 1310, 928,
	476, 1431, 1619, 1368, 1619, 1408, 941, 1613, 1405, 1619,
	1167, 2338, 476, 941, 476, 476, 2758, 2615, 1370, 2614,
	2058, 1401, 1372, 1455, 2511, 1967, 1362, 1402, 1227, 2842,
	1145, 835, 1363, 2305, 2300, 476, 476, 1425, 2296, 2183,
	2284, 1943, 476, 2794, 476, 2202, 476, 2201, 2200, 2096,
	476, 1593, 1163, 2545, 1316, 1260, 1261, 1253, 1254, 1255,
	1256, 1258, 1259, 866, 1606, 2057, 1796, 1361, 1331, 1474,
	2176, 2177, 2169, 2170, 2171, 2172, 2174, 2175, 2050, 1450,
	1482, 2004, 2444, 1526, 1485, 1554, 2383, 2178, 2176, 2177,
	2169, 2170, 2171, 2172, 2174, 2175, 867, 2295, 1444, 476,
	204, 476, 476, 2171, 2172, 2174, 2175, 928, 2870, 204,
	476, 2868, 1614, 476, 476, 1773, 1220, 1493, 1464, 476,
	2128, 2815, 2184, 2991, 1491, 1468, 1345, 1583, 1787, 701,
	3001, 2998, 2349, 2522, 2947, 2579, 2033, 1470, 195, 517,
	498, 941, 2918, 1460, 3024, 1032, 1031, 3025, 461, 1915,
	476, 1218, 862, 2393, 2713, 476, 2060, 1205, 488, 1206,
	204, 476, 3061, 476, 699, 476, 1500, 476, 860, 476,
	1461, 2841, 2840, 2992, 1906, 858, 464, 1906, 2838, 476,
	856, 476, 1587, 1788, 853, 2550, 1646, 2837, 1905, 476,
	476, 476, 2560, 1219, 1328, 883, 2555, 1079, 2554, 2519,
	2518, 2142, 1507, 2141, 2001, 1509, 499, 2140, 1511, 1382,
	2139, 2099, 1514, 1495, 1426, 1498, 1607, 2031, 476, 1960,
	1165, 516, 941, 1255, 1256, 1258, 1259, 698, 1954, 1597,
	1918, 2178, 2176, 2177, 2169, 2170, 2171, 2172, 2174, 2175,
	487, 1423, 1950, 1664, 1789, 1786, 1655, 1931, 461, 1735,
	1369, 1028, 1415, 1626, 2730, 1416, 1847, 461, 1618, 1846,
	1845, 1693, 2872, 1427, 1428, 1166, 1658, 2369, 1522, 1054,
	1683, 1690, 1594, 1653, 1524, 1964, 464, 1584, 1659, 1151,
	483, 674, 566, 2917, 1627, 464, 1044, 2565, 1971, 1750,
	700, 582, 1750, 1141, 1259, 1623, 941, 2819, 746, 1757,
	1248, 1611, 2966, 1628, 1755, 581, 1791, 2063, 461, 1924,
	1415, 1620, 1617, 1416, 1499, 2538, 2987, 1204, 1201, 2065,
	3016, 507, 582, 2344, 2436, 2929, 1408, 1149, 1637, 2292,
	1791, 2088, 2089, 3047, 1692, 2433, 464, 1417, 1631, 2287,
	476, 2345, 476, 502, 1443, 1504, 1660, 1429, 1419, 2066,
	1917, 1523, 2930, 2896, 1415, 1663, 2394, 1416, 1217, 2556,
	1585, 2064, 1421, 1662, 1421, 1202, 941, 1343, 2043, 1992,
	492, 1681, 476, 688, 476, 1673, 688, 688, 1674, 1675,
	1180, 476, 941, 1142, 1947, 1810, 476, 1770, 2304, 2344,
	2175, 1773, 1768, 476, 1144, 1417, 2434, 1620, 1941, 1620,
	1941, 476, 501, 500, 1620, 1941, 1419, 1534, 1774, 3024,
	1791, 3015, 697, 476, 1226, 2774, 928, 2277, 1951, 2785,
	1785, 2844, 1307, 2988, 1446, 2145, 1897, 476, 941, 891,
	1844, 1519, 1907, 476, 476, 1615, 1761, 1657, 1758, 1417,
	1876, 700, 2617, 2770, 476, 1384, 2392, 476, 2603, 891,
	1419, 2276, 1140, 1916, 1934, 2623, 491, 2313, 871, 1188,
	2986, 2548, 3023, 191, 1903, 3021, 1887, 2744, 1948, 1598,
	476, 2742, 476, 3040, 476, 1822, 1595, 476, 1421, 476,
	196, 476, 1791, 476, 476, 510, 476, 928, 928, 928,
	2989, 919, 928, 1933, 1901, 1919, 1921, 476, 1857, 864,
	1865, 1866, 863, 1962, 2282, 2385, 1388, 1873, 2026, 2027,
	1898, 1961, 897, 1928, 1877, 1878, 897, 2539, 854, 1155,
	1405, 1534, 1534, 1856, 1882, 854, 1911, 1910, 1890, 1891,
	855, 3014, 1391, 2769, 854, 1645, 1421, 1214, 467, 1957,
	1933, 492, 1942, 1944, 1945, 1946, 515, 701, 1926, 2820,
	1386, 197, 701, 196, 662, 2024, 1932, 476, 1043, 1998,
	1952, 3048, 488, 1389, 1996, 1237, 1451, 2022, 1949, 2775,
	1872, 1476, 503, 1505, 709, 515, 2388, 486, 1032, 1968,
	1421, 461, 1387, 1447, 1911, 2006, 2101, 2006, 2017, 1749,
	2035, 1381, 1160, 1756, 2029, 1138, 941, 126, 476, 2227,
	485, 1418, 1129, 2657, 126, 476, 1413, 476, 1247, 464,
	2015, 2010, 484, 675, 565, 1215, 2019, 514, 2020, 504,
	2021, 2771, 2023, 1109, 197, 1143, 2030, 491, 476, 476,
	476, 2025, 476, 2044, 2034, 1148, 199, 1911, 1181, 493,
	3038, 701, 663, 1316, 487, 479, 514, 1630, 1160, 1390,
	198, 476, 1777, 2046, 489, 505, 2053, 506, 2054, 1418,
	2477, 2387, 2309, 1459, 3053, 2830, 1472, 1236, 1809, 2829,
	1161, 1350, 2810, 1357, 1162, 2384, 2314, 1814, 1814, 1216,
	1347, 1825, 1827, 2049, 1832, 1182, 2278, 194, 1179, 2887,
	1189, 1855, 2052, 1388, 1605, 2521, 2061, 1990, 1160, 1421,
	1859, 3039, 2261, 1418, 2239, 1534, 2280, 2257, 2071, 199,
	1397, 1433, 2709, 2081, 889, 1999, 1997, 2076, 468, 1391,
	126, 2078, 192, 198, 126, 1453, 1161, 2658, 1437, 1494,
	1162, 3041, 1484, 488, 2226, 1483, 1479, 1874, 517, 2102,
	1475, 1669, 1383, 1452, 1235, 740, 2279, 2386, 486, 714,
	1389, 2712, 1603, 512, 195, 2938, 2432, 1650, 2711, 1601,
	194, 2811, 2584, 2085, 193, 664, 1604, 517, 1236, 1434,
	1449, 485, 2746, 1237, 2267, 2131, 1161, 2478, 2266, 1172,
	1162, 662, 512, 484, 2479, 462, 2240, 2083, 513, 474,
	3052, 1935, 1427, 1428, 2094, 192, 494, 469, 1975, 2228,
	1871, 709, 1870, 520, 1974, 561, 574, 698, 520, 462,
	493, 561, 579, 2318, 1065, 487, 568, 513, 586, 1064,
	516, 2567, 3028, 2733, 2100, 489, 606, 195, 1670, 2808,
	511, 1438, 1076, 2212, 941, 2708, 1390, 193, 2219, 2220,
	2308, 2665, 3, 1074, 2494, 1235, 2741, 1794, 3030, 516,
	476, 2789, 2656, 476, 1224, 2073, 2564, 2074, 665, 511,
	2809, 476, 476, 941, 2198, 1732, 476, 2127, 2408, 663,
	2158, 2111, 1211, 2051, 476, 476, 476, 550, 35, 712,
	476, 2710, 1209, 476, 1959, 1930, 1466, 1225, 1439, 1440,
	476, 476, 476, 476, 476, 1136, 666, 1435, 549, 34,
	548, 31, 476, 2199, 2077, 891, 2055, 520, 520, 476,
	1936, 1937, 1647, 891, 891, 903, 2233, 891, 1644, 2248,
	2236, 476, 928, 1199, 1436, 476, 2258, 547, 76, 546,
	75, 941, 2262, 543, 22, 476, 2230, 1634, 474, 474,
	474, 941, 933, 474, 941, 1197, 2218, 2204, 2205, 2206,
	544, 23, 1586, 462, 1034, 2213, 476, 1332, 476, 2242,
	476, 1793, 476, 928, 928, 928, 1195, 476, 2982, 476,
	852, 2562, 1458, 476, 2935, 2246, 2293, 2683, 476, 1174,
	476, 2543, 2247, 1730, 1733, 2286, 573, 476, 701, 2235,
	1420, 1223, 664, 2252, 2297, 2541, 567, 2244, 2245, 1054,
	1441, 2340, 476, 2520, 928, 1746, 2302, 1075, 897, 1210,
	2281, 2234, 2351, 907, 1420, 2254, 2283, 2326, 1073, 1208,
	1911, 476, 476, 1744, 542, 29, 1193, 1729, 897, 2249,
	2268, 2288, 2271, 2291, 2322, 2334, 2298, 541, 20, 2374,
	1054, 2303, 2339, 1455, 2319, 2299, 2216, 2289, 35, 1455,
	476, 2290, 1643, 2311, 2223, 2224, 2311, 2315, 2229, 2332,
	1198, 2367, 2002, 1384, 1994, 476, 2294, 1191, 1993, 34,
	1991, 31, 539, 19, 701, 540, 18, 2323, 1989, 2115,
	529, 15, 1196, 2373, 2330, 665, 2118, 1518, 1517, 2357,
	2336, 530, 16, 1515, 538, 55, 2350, 2421, 76, 1513,
	75, 941, 1185, 1194, 22, 2135, 2136, 2327, 2328, 2329,
	857, 859, 1510, 1173, 1740, 1508, 476, 1506, 2348, 2411,
	2263, 23, 1741, 666, 1388, 1742, 1456, 2348, 2269, 1747,
	2273, 2274, 2428, 2429, 2430, 1445, 2391, 2358, 2359, 2360,
	1731, 2361, 2362, 2389, 2390, 1442, 1430, 1422, 2365, 1072,
	1391, 2397, 537, 54, 126, 2399, 2395, 2858, 2401, 528,
	53, 536, 12, 1192, 3025, 2193, 2760, 1553, 1386, 2759,
	1683, 2448, 527, 48, 2697, 1855, 1855, 1855, 1624, 2092,
	2209, 1389, 2605, 1534, 2860, 1923, 2417, 2415, 1683, 2457,
	2420, 2593, 2452, 2221, 1239, 29, 534, 45, 2728, 2694,
	1387, 535, 46, 1963, 1190, 476, 889, 2447, 20, 2441,
	1906, 1036, 1038, 2424, 2445, 2435, 2437, 2438, 1591, 1592,
	476, 1922, 941, 1958, 2487, 2456, 889, 526, 47, 2483,
	474, 1050, 474, 533, 7, 474, 2454, 1953, 933, 1184,
	2695, 1069, 701, 19, 532, 6, 18, 474, 2093, 531,
	37, 15, 2363, 525, 36, 1906, 1743, 474, 474, 474,
	474, 933, 16, 1745, 2482, 55, 1920, 1390, 1929, 2484,
	2515, 891, 2380, 2492, 1240, 2056, 2898, 2533, 2551, 2497,
	2498, 1553, 1553, 2495, 2532, 2500, 1071, 126, 476, 476,
	2557, 476, 2702, 1183, 2558, 2875, 476, 2563, 556, 2561,
	606, 1249, 1250, 941, 880, 941, 2516, 2666, 928, 1938,
	1133, 474, 1534, 1925, 1243, 1956, 1137, 2109, 1927, 2524,
	2934, 2739, 2009, 54, 476, 2597, 881, 1995, 1988, 1858,
	53, 1146, 12, 1596, 2517, 2107, 1527, 1249, 1250, 3036,
	2586, 2507, 606, 48, 712, 2590, 2585, 2574, 712, 2589,
	3051, 1251, 476, 1933, 2364, 941, 476, 476, 941, 476,
	1319, 2549, 1252, 2690, 575, 2569, 2691, 45, 2167, 2168,
	2568, 2512, 46, 2577, 941, 2607, 2576, 2439, 2580, 2571,
	2582, 1249, 1250, 1176, 1534, 2591, 2621, 1251, 1175, 2542,
	2587, 2544, 2371, 2599, 2625, 2598, 2606, 891, 47, 2068,
	2693, 2068, 2067, 2069, 7, 1824, 882, 1783, 2610, 2696,
	2639, 2618, 2503, 476, 1213, 6, 2630, 1212, 2431, 474,
	37, 1534, 1534, 1329, 36, 2619, 2104, 1327, 1911, 2756,
	2601, 1222, 1221, 1207, 1531, 1203, 1200, 2105, 1186, 1534,
	1534, 2110, 1147, 2622, 1599, 865, 673, 2818, 660, 2626,
	2275, 1633, 1187, 1635, 2232, 1879, 2928, 2645, 1302, 1303,
	1304, 1305, 1306, 2144, 2015, 1553, 2880, 939, 2784, 1792,
	1027, 1315, 476, 1330, 51, 1534, 2529, 733, 2684, 2523,
	1982, 1324, 941, 476, 897, 941, 1981, 2655, 944, 476,
	476, 476, 897, 897, 1608, 757, 897, 1813, 1684, 759,
	1532, 762, 761, 2692, 760, 1533, 1353, 476, 758, 1530,
	1106, 2013, 476, 650, 476, 1612, 1754, 476, 476, 476,
	476, 476, 1771, 2126, 2703, 476, 476, 928, 1323, 725,
	737, 941, 736, 2673, 2491, 928, 2671, 2682, 2216, 891,
	1769, 1134, 2672, 476, 476, 2668, 2669, 2533, 1531, 1531,
	724, 2237, 2343, 2751, 2532, 2729, 928, 2674, 1668, 2084,
	1472, 1665, 2540, 490, 2164, 1104, 476, 1841, 2106, 1833,
	1829, 1228, 1308, 2014, 1169, 2108, 2352, 2041, 1676, 879,
	878, 2724, 2533, 476, 476, 928, 928, 877, 2748, 2532,
	2750, 2952, 2949, 2533, 2747, 2757, 2772, 2678, 2738, 2773,
	2532, 1602, 2616, 2062, 1054, 1301, 2727, 2749, 2723, 941,
	586, 2553, 729, 2217, 2321, 520, 1048, 1300, 2776, 2676,
	1377, 1377, 1377, 2755, 861, 1834, 2764, 2559, 2889, 2680,
	2763, 1911, 1159, 1158, 1157, 2260, 1400, 3046, 2783, 2897,
	903, 2537, 474, 2677, 2946, 166, 163, 165, 476, 164,
	941, 2307, 2714, 79, 476, 33, 476, 32, 941, 476,
	2719, 106, 105, 104, 103, 102, 2791, 476, 101, 100,
	99, 2725, 2805, 941, 98, 97, 2797, 2798, 96, 95,
	2667, 1534, 889, 2754, 1911, 94, 93, 2823, 92, 91,
	889, 889, 90, 2822, 889, 2824, 2706, 89, 88, 87,
	2803, 2821, 86, 85, 84, 83, 2348, 82, 81, 602,
	599, 2801, 2533, 476, 78, 476, 77, 30, 928, 2532,
	25, 2781, 2670, 476, 2843, 110, 111, 2681, 24, 2765,
	2766, 2735, 1531, 74, 2832, 73, 28, 17, 11, 21,
	131, 130, 2743, 129, 128, 941, 2533, 127, 2533, 2857,
	2856, 2715, 2533, 2532, 14, 2532, 2855, 2707, 2720, 2532,
	13, 2861, 2781, 125, 2862, 476, 2589, 2716, 2717, 124,
	1692, 476, 123, 2871, 122, 462, 121, 120, 10, 476,
	8, 109, 2874, 9, 2802, 1692, 2767, 1034, 2886, 474,
	1471, 2382, 67, 2737, 1911, 68, 26, 2878, 41, 40,
	2885, 2800, 108, 157, 156, 155, 2892, 154, 476, 476,
	1490, 1490, 150, 153, 151, 476, 152, 474, 149, 474,
	2894, 474, 119, 159, 2895, 520, 928, 158, 2850, 147,
	144, 476, 2833, 2834, 928, 928, 2906, 2903, 2911, 476,
	146, 476, 148, 476, 2916, 2913, 145, 143, 2924, 160,
	897, 2909, 118, 117, 2922, 2923, 116, 1027, 2915, 115,
	114, 476, 113, 2921, 476, 5, 2, 476, 1, 941,
	0, 0, 0, 0, 606, 462, 1034, 561, 0, 2954,
	2941, 0, 0, 2948, 462, 1034, 2943, 897, 933, 474,
	0, 0, 2967, 2804, 606, 2845, 0, 2847, 2959, 2961,
	0, 2851, 2965, 0, 476, 0, 897, 2883, 712, 712,
	0, 0, 2981, 2979, 2980, 2960, 0, 2962, 897, 0,
	0, 0, 897, 0, 0, 606, 2533, 897, 0, 476,
	474, 1534, 0, 2532, 0, 462, 474, 476, 474, 0,
	474, 0, 474, 1553, 474, 0, 0, 3005, 2901, 3006,
	3010, 3007, 0, 476, 1648, 0, 1649, 0, 3011, 3012,
	3022, 3020, 3019, 0, 474, 474, 474, 0, 2994, 3027,
	3026, 0, 3013, 2859, 3029, 2533, 897, 0, 1666, 2954,
	1671, 1692, 2532, 3035, 0, 1534, 1678, 1672, 0, 0,
	0, 0, 2796, 606, 3032, 3033, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 2826, 1734, 3050, 1736, 1737, 1738, 1739, 3056, 3049,
	3043, 3042, 0, 0, 3059, 3060, 2902, 2839, 889, 0,
	0, 0, 3065, 1762, 0, 0, 0, 0, 0, 0,
	1315, 0, 1534, 0, 0, 0, 0, 0, 2920, 0,
	0, 0, 1553, 0, 0, 2964, 0, 2015, 0, 477,
	1804, 1805, 1806, 1807, 1808, 2534, 0, 0, 2036, 2925,
	0, 2926, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 1831, 0, 1843, 2552, 0, 0, 1848, 1853, 1835,
	0, 0, 0, 42, 2942, 586, 2552, 520, 897, 203,
	2552, 0, 0, 0, 3008, 2552, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 834, 0, 0, 0, 0,
	0, 2037, 0, 203, 1553, 0, 0, 520, 0, 520,
	0, 0, 903, 0, 0, 0, 474, 897, 0, 0,
	0, 1914, 0, 0, 0, 707, 0, 662, 474, 0,
	2038, 0, 0, 0, 889, 0, 474, 0, 555, 3004,
	0, 1553, 1553, 0, 0, 0, 0, 709, 474, 0,
	0, 0, 897, 0, 0, 0, 0, 0, 0, 1553,
	1553, 2931, 474, 897, 0, 0, 0, 0, 462, 1969,
	1531, 0, 0, 0, 60, 0, 0, 0, 0, 1978,
	0, 708, 1034, 0, 0, 0, 0, 0, 0, 0,
	2956, 2957, 0, 0, 0, 1553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1914, 0, 520, 0, 474,
	0, 0, 474, 0, 474, 663, 474, 0, 474, 474,
	0, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1914, 0, 0, 929, 0, 0, 942, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 889, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 1249, 1250, 0, 0,
	0, 930, 561, 895, 943, 943, 0, 0, 0, 1531,
	135, 63, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 1252, 897, 0, 0, 2534, 897, 0, 897, 0,
	0, 167, 897, 0, 0, 0, 0, 0, 0, 0,
	3054, 3055, 554, 474, 0, 107, 1251, 470, 664, 0,
	1034, 0, 1034, 0, 0, 0, 0, 0, 3063, 0,
	2534, 0, 0, 1249, 1250, 0, 0, 169, 0, 0,
	0, 2534, 0, 474, 474, 474, 0, 474, 0, 0,
	0, 1531, 0, 1249, 1250, 0, 0, 0, 1252, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 168, 0, 1252, 0,
	0, 1553, 0, 1251, 0, 161, 0, 0, 1531, 1531,
	1257, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1251, 897, 0, 1531, 1531, 0, 706,
	0, 665, 2097, 2098, 134, 1279, 1280, 1281, 2103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2167, 2168, 0, 2185, 2186, 2187, 0, 2116, 1835, 1835,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 666,
	2122, 0, 0, 0, 0, 0, 2129, 1257, 0, 0,
	2534, 2134, 0, 1272, 0, 0, 911, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 897, 1257, 2148, 0,
	0, 0, 1279, 1280, 1281, 0, 0, 0, 2182, 0,
	2552, 0, 0, 0, 2534, 0, 2534, 0, 0, 0,
	2534, 0, 1279, 1280, 1281, 0, 0, 929, 929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 897, 1835, 1835, 1835, 0,
	1272, 0, 1853, 1853, 1853, 0, 929, 929, 0, 0,
	0, 0, 0, 929, 1377, 0, 1273, 0, 903, 0,
	1272, 0, 2222, 0, 2173, 0, 903, 903, 0, 0,
	903, 0, 0, 930, 930, 520, 0, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 520, 520, 0, 0,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 474,
	1914, 2256, 930, 930, 0, 1914, 0, 0, 2256, 930,
	0, 0, 2552, 0, 0, 1914, 2256, 1914, 2256, 2256,
	0, 0, 0, 1273, 0, 0, 0, 474, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 2183, 0, 0,
	0, 1553, 0, 1273, 0, 0, 474, 0, 0, 0,
	933, 0, 0, 0, 0, 0, 0, 0, 1531, 0,
	474, 0, 0, 0, 0, 0, 929, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 1490, 2534, 474, 0, 474, 0, 0,
	0, 0, 474, 0, 474, 1553, 0, 2341, 933, 0,
	0, 0, 0, 1914, 0, 520, 0, 0, 0, 0,
	0, 0, 1914, 0, 0, 0, 0, 0, 0, 0,
	2184, 0, 930, 0, 0, 0, 0, 1034, 0, 0,
	0, 0, 0, 2534, 0, 1253, 1254, 1255, 1256, 1258,
	1259, 0, 0, 0, 0, 0, 2378, 1034, 0, 0,
	712, 712, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 0, 0, 712, 0, 0, 0, 0, 1046, 0,
	0, 0, 1553, 1063, 0, 2398, 0, 0, 0, 2400,
	0, 0, 0, 1678, 0, 0, 0, 0, 0, 2404,
	474, 0, 2405, 0, 0, 1083, 1083, 1083, 937, 0,
	1835, 1835, 0, 0, 2410, 0, 0, 0, 0, 0,
	0, 0, 0, 2418, 0, 0, 0, 0, 0, 0,
	0, 2422, 2179, 2180, 2181, 2222, 0, 0, 0, 2178,
	2176, 2177, 2169, 2170, 2171, 2172, 2174, 2175, 0, 0,
	0, 2443, 0, 0, 2449, 2450, 2451, 0, 0, 1132,
	0, 2453, 0, 0, 0, 0, 0, 0, 2455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1835,
	1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,
	1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 0, 1835,
	0, 2485, 2486, 1249, 1250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2697, 0, 1531, 0,
	2167, 2168, 0, 2185, 2186, 2187, 0, 0, 1252, 0,
	2502, 0, 0, 0, 903, 0, 0, 0, 2628, 0,
	520, 2694, 0, 0, 2687, 0, 0, 0, 0, 0,
	0, 0, 0, 1251, 0, 520, 0, 2685, 0, 0,
	0, 1271, 2689, 0, 0, 0, 0, 2525, 0, 734,
	71, 2531, 1531, 0, 0, 0, 0, 0, 2182, 0,
	0, 0, 2695, 0, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 1400, 2688, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 1274, 1275,
	1276, 1277, 0, 1914, 1490, 0, 1490, 1257, 71, 0,
	0, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2173, 0, 0, 1377, 0, 1531,
	0, 0, 1279, 1280, 1281, 0, 0, 0, 2600, 1914,
	903, 0, 0, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 0, 0, 1034, 0, 2188,
	0, 933, 474, 0, 474, 0, 689, 0, 0, 0,
	1272, 0, 0, 0, 702, 2690, 0, 0, 2691, 0,
	0, 2629, 0, 0, 0, 2632, 2633, 2183, 0, 2635,
	0, 0, 0, 0, 930, 0, 2637, 0, 0, 0,
	2640, 943, 0, 0, 0, 0, 0, 0, 943, 892,
	71, 0, 2693, 0, 0, 0, 0, 2647, 2646, 0,
	0, 2696, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 929, 0, 203, 0,
	0, 0, 0, 1273, 2660, 0, 0, 0, 0, 0,
	1409, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2184, 0, 903, 0, 0, 0, 0, 1034, 0, 0,
	942, 0, 0, 0, 0, 0, 0, 0, 520, 0,
	0, 0, 0, 0, 1914, 2256, 1914, 0, 0, 203,
	0, 0, 930, 2704, 0, 0, 0, 0, 0, 0,
	0, 2531, 1034, 0, 0, 2692, 0, 1914, 0, 2256,
	0, 0, 1034, 1034, 474, 1914, 2256, 0, 0, 0,
	474, 474, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2531, 0, 1034, 1978,
	0, 0, 0, 0, 0, 0, 0, 2531, 0, 0,
	0, 942, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 1914, 2179, 2180, 2181, 0, 0, 0, 0, 2178,
	2176, 2177, 2169, 2170, 2171, 2172, 2174, 2175, 2378, 2378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2777, 2778, 0, 0, 2113, 2114, 0, 1469, 0, 0,
	0, 2167, 2168, 0, 2185, 2186, 2187, 943, 0, 0,
	0, 0, 0, 0, 2787, 0, 0, 0, 0, 2627,
	0, 0, 0, 0, 0, 942, 1835, 1497, 2795, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 520, 0, 0, 0, 0, 0, 1914,
	0, 2256, 0, 0, 2807, 0, 0, 0, 0, 2182,
	0, 0, 474, 0, 0, 1835, 2531, 0, 0, 0,
	0, 0, 0, 0, 2831, 0, 0, 0, 0, 0,
	0, 943, 2190, 2191, 2192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 1400, 1589, 0, 0,
	2531, 0, 2531, 0, 0, 0, 2531, 0, 474, 0,
	474, 942, 0, 0, 0, 0, 0, 0, 1034, 0,
	0, 0, 0, 0, 0, 2173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1632, 0,
	0, 0, 0, 0, 1638, 929, 1639, 0, 1640, 0,
	1641, 943, 1642, 702, 0, 0, 0, 942, 0, 1835,
	2443, 0, 0, 0, 0, 0, 520, 943, 0, 0,
	2188, 0, 1651, 1063, 2807, 2888, 0, 0, 2891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2183, 0,
	0, 930, 0, 1914, 2256, 0, 0, 0, 1400, 0,
	474, 0, 0, 943, 0, 0, 929, 929, 929, 0,
	0, 929, 0, 0, 0, 0, 2256, 0, 0, 0,
	0, 0, 0, 0, 1034, 0, 1034, 0, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2939, 0, 0, 1034,
	0, 0, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 930, 930, 0, 0, 930, 0, 0,
	2531, 2184, 0, 0, 0, 2167, 2168, 0, 2185, 2186,
	2187, 0, 2978, 2978, 0, 0, 0, 0, 0, 2443,
	0, 0, 0, 2413, 0, 0, 0, 0, 0, 0,
	2995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1034, 942, 0, 0, 0, 2531,
	0, 0, 1914, 0, 689, 0, 0, 0, 2978, 0,
	0, 0, 0, 2182, 0, 0, 2406, 2407, 2807, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 1314, 0,
	0, 0, 0, 0, 1900, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 0, 2179, 2180, 2181, 0, 0, 0, 0,
	2178, 2176, 2177, 2169, 2170, 2171, 2172, 2174, 2175, 2978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2173,
	937, 0, 0, 0, 0, 2458, 2459, 2460, 2461, 2462,
	2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472,
	2473, 2474, 2475, 2476, 0, 2480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2188, 0, 0, 2018, 0, 0,
	1083, 0, 1083, 0, 1083, 0, 937, 937, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	1399, 0, 0, 0, 1404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 0, 2184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 0, 1249, 1250, 0, 1282,
	1283, 1284, 1292, 1293, 1294, 0, 0, 0, 0, 0,
	0, 2080, 937, 2082, 1285, 0, 0, 0, 0, 943,
	0, 1252, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1251, 0, 943, 0,
	0, 929, 0, 0, 1271, 0, 0, 0, 0, 0,
	942, 1268, 0, 0, 0, 0, 0, 2179, 2180, 2181,
	942, 0, 0, 942, 2178, 2176, 2177, 2169, 2170, 2171,
	2172, 2174, 2175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 929, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
	0, 1274, 1275, 1276, 1277, 0, 943, 0, 2167, 2168,
	1257, 2185, 2186, 2187, 0, 0, 943, 0, 0, 943,
	0, 0, 0, 929, 0, 0, 2412, 0, 0, 0,
	0, 0, 1289, 1299, 0, 1279, 1280, 1281, 930, 930,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 1296, 0, 0, 0,
	0, 0, 0, 1266, 1267, 0, 2182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 0, 0, 930,
	0, 0, 0, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2173, 0, 0, 0, 0, 0, 0, 2167,
	2168, 0, 2185, 2186, 2187, 0, 0, 2253, 0, 1278,
	0, 0, 0, 0, 0, 0, 0, 0, 689, 0,
	0, 689, 689, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 943, 2188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	2167, 2168, 2788, 2185, 2186, 2187, 0, 2182, 0, 0,
	0, 0, 0, 0, 0, 2183, 142, 0, 2306, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 1752,
	0, 0, 39, 137, 0, 0, 0, 0, 0, 0,
	0, 2813, 702, 2324, 0, 0, 42, 1314, 0, 0,
	2331, 942, 2333, 0, 0, 0, 0, 0, 2182, 0,
	44, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 2173, 49, 1288, 0, 0, 1263, 1264,
	1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 0, 50, 2189, 0, 2184, 52,
	0, 0, 2153, 56, 0, 0, 140, 943, 0, 0,
	57, 69, 0, 0, 0, 58, 892, 0, 2188, 0,
	0, 0, 0, 0, 2173, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 942, 2877, 1404, 929, 59, 0,
	0, 0, 0, 0, 0, 0, 2183, 60, 2402, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 942, 0, 0, 942, 943, 0,
	943, 0, 0, 930, 0, 0, 0, 2183, 0, 0,
	2179, 2180, 2181, 942, 0, 0, 0, 2178, 2176, 2177,
	2169, 2170, 2171, 2172, 2174, 2175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 71, 2184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	943, 0, 0, 943, 0, 0, 61, 0, 0, 0,
	71, 0, 0, 62, 0, 0, 0, 71, 0, 943,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 135, 63, 0, 64, 0, 65, 0,
	2184, 0, 141, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 107, 0,
	0, 942, 0, 0, 942, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 2179, 2180, 2181, 0, 0, 0, 0, 2178, 2176,
	2177, 2169, 2170, 2171, 2172, 2174, 2175, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 929, 0, 0, 0,
	942, 136, 0, 0, 929, 0, 0, 943, 0, 168,
	943, 0, 0, 71, 0, 0, 0, 71, 161, 2575,
	0, 0, 2179, 2180, 2181, 929, 162, 0, 0, 2178,
	2176, 2177, 2169, 2170, 2171, 2172, 2174, 2175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	4, 0, 930, 0, 929, 929, 943, 0, 0, 0,
	930, 0, 0, 0, 0, 631, 0, 662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 942, 0,
	2620, 930, 937, 0, 0, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 636,
	0, 0, 0, 1752, 0, 0, 0, 0, 0, 0,
	930, 930, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 637, 0, 1314, 0, 0, 639, 942, 0, 0,
	667, 0, 0, 0, 943, 0, 645, 646, 0, 0,
	0, 657, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1249, 1250, 0, 1282,
	1283, 1284, 1292, 1293, 1294, 943, 0, 0, 0, 661,
	651, 0, 0, 943, 1285, 0, 0, 929, 0, 0,
	0, 1252, 0, 0, 1298, 0, 0, 0, 943, 0,
	0, 0, 0, 0, 0, 0, 641, 0, 0, 1314,
	0, 0, 635, 0, 942, 0, 1251, 0, 0, 0,
	0, 0, 0, 0, 1271, 0, 642, 643, 0, 0,
	0, 1268, 892, 0, 0, 0, 0, 0, 0, 0,
	892, 892, 2718, 930, 892, 0, 649, 0, 1063, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 648, 0, 0, 0,
	943, 0, 0, 0, 0, 0, 0, 0, 664, 0,
	0, 1274, 1275, 1276, 1277, 0, 0, 0, 0, 0,
	1257, 0, 0, 0, 0, 929, 0, 71, 0, 0,
	0, 0, 0, 929, 929, 0, 0, 0, 0, 0,
	0, 0, 1289, 1299, 0, 1279, 1280, 1281, 0, 0,
	0, 0, 0, 647, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 1296, 0, 942, 0,
	0, 0, 0, 1266, 1267, 0, 0, 0, 659, 0,
	0, 930, 0, 0, 0, 0, 1287, 654, 71, 930,
	930, 0, 0, 1272, 0, 71, 0, 0, 0, 633,
	652, 665, 0, 0, 0, 0, 0, 702, 0, 1297,
	0, 0, 0, 0, 0, 634, 0, 0, 0, 0,
	2814, 0, 0, 1286, 943, 655, 0, 0, 653, 0,
	0, 0, 668, 669, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 0, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	658, 0, 0, 0, 0, 0, 2852, 0, 2854, 0,
	0, 0, 0, 0, 0, 0, 1273, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2907, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 1263, 1264,
	1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 0, 0, 2927, 0, 0, 0,
	0, 0, 2152, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2945, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1782, 0, 755, 743,
	744, 741, 742, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 1779, 277,
	0, 0, 0, 0, 790, 735, 0, 0, 0, 278,
	279, 280, 210, 797, 775, 798, 763, 799, 800, 0,
	282, 765, 764, 283, 284, 285, 738, 789, 801, 802,
	220, 0, 286, 794, 0, 780, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 836, 299, 300, 301, 783, 781, 782,
	786, 0, 784, 785, 302, 303, 478, 304, 803, 305,
	804, 805, 721, 306, 0, 307, 0, 308, 1780, 0,
	796, 310, 0, 311, 892, 0, 0, 726, 312, 313,
	315, 318, 314, 319, 806, 807, 750, 837, 0, 0,
	0, 0, 0, 320, 321, 808, 809, 810, 0, 322,
	0, 323, 0, 0, 838, 324, 0, 325, 811, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 791, 793,
	840, 0, 774, 0, 0, 0, 335, 0, 332, 0,
	839, 333, 812, 778, 813, 814, 815, 816, 817, 0,
	779, 0, 336, 841, 842, 337, 338, 339, 843, 818,
	819, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	820, 844, 345, 346, 845, 0, 347, 348, 0, 0,
	349, 0, 350, 723, 722, 351, 352, 354, 767, 353,
	846, 355, 356, 358, 357, 718, 0, 847, 751, 792,
	359, 821, 360, 361, 0, 776, 777, 0, 0, 364,
	365, 0, 0, 366, 249, 848, 367, 849, 822, 368,
	369, 370, 371, 372, 373, 374, 892, 375, 823, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 824, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 850, 398, 399,
	400, 401, 727, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 768, 769, 770, 771, 413,
	416, 417, 787, 418, 403, 404, 419, 851, 420, 825,
	772, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	826, 426, 427, 428, 827, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 766, 440, 0,
	828, 829, 830, 0, 71, 441, 442, 831, 832, 749,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	788, 451, 0, 773, 452, 453, 454, 269, 833, 1778,
	0, 455, 271, 0, 0, 0, 0, 456, 457, 272,
	458, 459, 460, 719, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 715, 716, 1781, 0,
	0, 0, 0, 0, 0, 728, 1776, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1752, 273,
	274, 275, 276, 945, 277, 946, 947, 948, 949, 209,
	950, 951, 952, 953, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 954, 282, 216, 217, 283, 284,
	285, 955, 956, 218, 219, 220, 957, 286, 221, 958,
	904, 959, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 960, 296, 0, 297, 298, 961, 836, 299,
	300, 301, 962, 963, 965, 964, 966, 967, 968, 302,
	303, 478, 304, 222, 305, 223, 224, 969, 306, 970,
	307, 971, 308, 972, 973, 309, 310, 974, 311, 975,
	0, 976, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 977, 837, 978, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 979, 323, 980, 981, 838,
	324, 982, 325, 231, 983, 232, 984, 326, 327, 328,
	329, 330, 331, 233, 234, 840, 985, 235, 0, 0,
	0, 335, 986, 332, 987, 839, 333, 236, 334, 237,
	238, 239, 240, 241, 988, 242, 989, 336, 841, 842,
	337, 338, 339, 843, 243, 244, 0, 0, 340, 341,
	342, 990, 344, 343, 991, 245, 844, 345, 346, 845,
	992, 347, 348, 993, 994, 349, 0, 350, 906, 905,
	351, 352, 354, 246, 353, 846, 355, 356, 358, 357,
	995, 996, 847, 997, 247, 359, 248, 360, 361, 998,
	362, 363, 999, 1000, 364, 365, 1001, 1002, 366, 249,
	848, 367, 849, 250, 368, 369, 370, 371, 372, 373,
	374, 1003, 375, 251, 376, 252, 377, 1004, 378, 379,
	380, 381, 382, 253, 383, 384, 1005, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	1006, 397, 850, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 1007, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 1008, 418, 403,
	404, 419, 851, 420, 259, 260, 421, 1009, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 262,
	1010, 431, 432, 1011, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 1012, 263, 264, 265, 1013, 1014,
	441, 442, 266, 267, 1015, 443, 444, 445, 446, 1016,
	1017, 447, 448, 449, 450, 1018, 451, 1019, 268, 452,
	453, 454, 269, 270, 1020, 1021, 455, 271, 1022, 1023,
	1024, 1025, 456, 457, 272, 458, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 1884, 0,
	0, 0, 0, 0, 0, 0, 0, 1885, 273, 274,
	275, 276, 945, 277, 946, 947, 948, 949, 209, 950,
	951, 952, 953, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 954, 282, 216, 217, 283, 284, 285,
	955, 956, 218, 219, 220, 957, 286, 221, 958, 904,
	959, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 960, 296, 0, 297, 298, 961, 836, 299, 300,
	301, 962, 963, 965, 964, 966, 967, 968, 302, 303,
	478, 304, 222, 305, 223, 224, 969, 306, 970, 307,
	971, 308, 972, 973, 309, 310, 974, 311, 975, 0,
	976, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	977, 837, 978, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 979, 323, 980, 981, 838, 324,
	982, 325, 231, 983, 232, 984, 326, 327, 328, 329,
	330, 331, 233, 234, 840, 985, 235, 0, 0, 0,
	335, 986, 332, 987, 839, 333, 236, 334, 237, 238,
	239, 240, 241, 988, 242, 989, 336, 841, 842, 337,
	338, 339, 843, 243, 244, 0, 0, 340, 341, 342,
	990, 344, 343, 991, 245, 844, 345, 346, 845, 992,
	347, 348, 993, 994, 349, 0, 350, 906, 905, 351,
	352, 354, 246, 353, 846, 355, 356, 358, 357, 995,
	996, 847, 997, 247, 359, 248, 360, 361, 998, 362,
	363, 999, 1000, 364, 365, 1001, 1002, 366, 249, 848,
	367, 849, 250, 368, 369, 370, 371, 372, 373, 374,
	1003, 375, 251, 376, 252, 377, 1004, 378, 379, 380,
	381, 382, 253, 383, 384, 1005, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 1006,
	397, 850, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 1007, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 1008, 418, 403, 404,
	419, 851, 420, 259, 260, 421, 1009, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 1010,
	431, 432, 1011, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 1012, 263, 264, 265, 1013, 1014, 441,
	442, 266, 267, 1015, 443, 444, 445, 446, 1016, 1017,
	447, 448, 449, 450, 1018, 451, 1019, 268, 452, 453,
	454, 269, 270, 1020, 1021, 455, 271, 1022, 1023, 1024,
	1025, 456, 457, 272, 458, 459, 460, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2675, 273, 274,
	275, 276, 945, 277, 946, 947, 948, 949, 209, 950,
	951, 952, 953, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 954, 282, 216, 217, 283, 284, 285,
	955, 956, 218, 219, 220, 957, 286, 221, 958, 904,
	959, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 960, 296, 0, 297, 298, 961, 836, 299, 300,
	301, 962, 963, 965, 964, 966, 967, 968, 302, 303,
	478, 304, 222, 305, 223, 224, 969, 306, 970, 307,
	971, 308, 972, 973, 309, 310, 974, 311, 975, 0,
	976, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	977, 837, 978, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 979, 323, 980, 981, 838, 324,
	982, 325, 231, 983, 232, 984, 326, 327, 328, 329,
	330, 331, 233, 234, 840, 985, 235, 0, 0, 0,
	335, 986, 332, 987, 839, 333, 236, 334, 237, 238,
	239, 240, 241, 988, 242, 989, 336, 841, 842, 337,
	338, 339, 843, 243, 244, 0, 0, 340, 341, 342,
	990, 344, 343, 991, 245, 844, 345, 346, 845, 992,
	347, 348, 993, 994, 349, 0, 350, 906, 905, 351,
	352, 354, 246, 353, 846, 355, 356, 358, 357, 995,
	996, 847, 997, 247, 359, 248, 360, 361, 998, 362,
	363, 999, 1000, 364, 365, 1001, 1002, 366, 249, 848,
	367, 849, 250, 368, 369, 370, 371, 372, 373, 374,
	1003, 375, 251, 376, 252, 377, 1004, 378, 379, 380,
	381, 382, 253, 383, 384, 1005, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 1006,
	397, 850, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 1007, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 1008, 418, 403, 404,
	419, 851, 420, 259, 260, 421, 1009, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 1010,
	431, 432, 1011, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 1012, 263, 264, 265, 1013, 1014, 441,
	442, 266, 267, 1015, 443, 444, 445, 446, 1016, 1017,
	447, 448, 449, 450, 1018, 451, 1019, 268, 452, 453,
	454, 269, 270, 1020, 1021, 455, 271, 1022, 1023, 1024,
	1025, 456, 457, 272, 458, 459, 460, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2782, 273, 274, 275, 276, 945, 277, 946,
	947, 948, 949, 209, 950, 951, 952, 953, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 954, 282,
	216, 217, 283, 284, 285, 955, 956, 218, 219, 220,
	957, 286, 221, 958, 904, 959, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 960, 296, 0, 297,
	298, 961, 836, 299, 300, 301, 962, 963, 965, 964,
	966, 967, 968, 302, 303, 478, 304, 222, 305, 223,
	224, 969, 306, 970, 307, 971, 308, 972, 973, 309,
	310, 974, 311, 975, 0, 976, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 977, 837, 978, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 979,
	323, 980, 981, 838, 324, 982, 325, 231, 983, 232,
	984, 326, 327, 328, 329, 330, 331, 233, 234, 840,
	985, 235, 0, 0, 0, 335, 986, 332, 987, 839,
	333, 236, 334, 237, 238, 239, 240, 241, 988, 242,
	989, 336, 841, 842, 337, 338, 339, 843, 243, 244,
	0, 0, 340, 341, 342, 990, 344, 343, 991, 245,
	844, 345, 346, 845, 992, 347, 348, 993, 994, 349,
	0, 350, 906, 905, 351, 352, 354, 246, 353, 846,
	355, 356, 358, 357, 995, 996, 847, 997, 247, 359,
	248, 360, 361, 998, 362, 363, 999, 1000, 364, 365,
	1001, 1002, 366, 249, 848, 367, 849, 250, 368, 369,
	370, 371, 372, 373, 374, 1003, 375, 251, 376, 252,
	377, 1004, 378, 379, 380, 381, 382, 253, 383, 384,
	1005, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 1006, 397, 850, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 1007, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 1008, 418, 403, 404, 419, 851, 420, 259, 260,
	421, 1009, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 1010, 431, 432, 1011, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 1012, 263,
	264, 265, 1013, 1014, 441, 442, 266, 267, 1015, 443,
	444, 445, 446, 1016, 1017, 447, 448, 449, 450, 1018,
	451, 1019, 268, 452, 453, 454, 269, 270, 1020, 1021,
	455, 271, 1022, 1023, 1024, 1025, 456, 457, 272, 458,
	459, 460, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2425, 273, 274,
	275, 276, 945, 277, 946, 947, 948, 949, 209, 950,
	951, 952, 953, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 954, 282, 216, 217, 283, 284, 285,
	955, 956, 218, 219, 220, 957, 286, 221, 958, 904,
	959, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 960, 296, 0, 297, 298, 961, 836, 299, 300,
	301, 962, 963, 965, 964, 966, 967, 968, 302, 303,
	478, 304, 222, 305, 223, 224, 969, 306, 970, 307,
	971, 308, 972, 973, 309, 310, 974, 311, 975, 0,
	976, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	977, 837, 978, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 979, 323, 980, 981, 838, 324,
	982, 325, 231, 983, 232, 984, 326, 327, 328, 329,
	330, 331, 233, 234, 840, 985, 235, 0, 0, 0,
	335, 986, 332, 987, 839, 333, 236, 334, 237, 238,
	239, 240, 241, 988, 242, 989, 336, 841, 842, 337,
	338, 339, 843, 243, 244, 0, 0, 340, 341, 342,
	990, 344, 343, 991, 245, 844, 345, 346, 845, 992,
	347, 348, 993, 994, 349, 0, 350, 906, 905, 351,
	352, 354, 246, 353, 846, 355, 356, 358, 357, 995,
	996, 847, 997, 247, 359, 248, 360, 361, 998, 362,
	363, 999, 1000, 364, 365, 1001, 1002, 366, 249, 848,
	367, 849, 250, 368, 369, 370, 371, 372, 373, 374,
	1003, 375, 251, 376, 252, 377, 1004, 378, 379, 380,
	381, 382, 253, 383, 384, 1005, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 1006,
	397, 850, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 1007, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 1008, 418, 403, 404,
	419, 851, 420, 259, 260, 421, 1009, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 1010,
	431, 432, 1011, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 1012, 263, 264, 265, 1013, 1014, 441,
	442, 266, 267, 1015, 443, 444, 445, 446, 1016, 1017,
	447, 448, 449, 450, 1018, 451, 1019, 268, 452, 453,
	454, 269, 270, 1020, 1021, 455, 271, 1022, 1023, 1024,
	1025, 456, 457, 272, 458, 459, 460, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2310, 273, 274, 275, 276, 945, 277, 946,
	947, 948, 949, 209, 950, 951, 952, 953, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 954, 282,
	216, 217, 283, 284, 285, 955, 956, 218, 219, 220,
	957, 286, 221, 958, 904, 959, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 960, 296, 0, 297,
	298, 961, 836, 299, 300, 301, 962, 963, 965, 964,
	966, 967, 968, 302, 303, 478, 304, 222, 305, 223,
	224, 969, 306, 970, 307, 971, 308, 972, 973, 309,
	310, 974, 311, 975, 0, 976, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 977, 837, 978, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 979,
	323, 980, 981, 838, 324, 982, 325, 231, 983, 232,
	984, 326, 327, 328, 329, 330, 331, 233, 234, 840,
	985, 235, 0, 0, 0, 335, 986, 332, 987, 839,
	333, 236, 334, 237, 238, 239, 240, 241, 988, 242,
	989, 336, 841, 842, 337, 338, 339, 843, 243, 244,
	0, 0, 340, 341, 342, 990, 344, 343, 991, 245,
	844, 345, 346, 845, 992, 347, 348, 993, 994, 349,
	0, 350, 906, 905, 351, 352, 354, 246, 353, 846,
	355, 356, 358, 357, 995, 996, 847, 997, 247, 359,
	248, 360, 361, 998, 362, 363, 999, 1000, 364, 365,
	1001, 1002, 366, 249, 848, 367, 849, 250, 368, 369,
	370, 371, 372, 373, 374, 1003, 375, 251, 376, 252,
	377, 1004, 378, 379, 380, 381, 382, 253, 383, 384,
	1005, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 1006, 397, 850, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 1007, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 1008, 418, 403, 404, 419, 851, 420, 259, 260,
	421, 1009, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 1010, 431, 432, 1011, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 1012, 263,
	264, 265, 1013, 1014, 441, 442, 266, 267, 1015, 443,
	444, 445, 446, 1016, 1017, 447, 448, 449, 450, 1018,
	451, 1019, 268, 452, 453, 454, 269, 270, 1020, 1021,
	455, 271, 1022, 1023, 1024, 1025, 456, 457, 272, 458,
	459, 460, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1775, 273, 274,
	275, 276, 945, 277, 946, 947, 948, 949, 209, 950,
	951, 952, 953, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 954, 282, 216, 217, 283, 284, 285,
	955, 956, 218, 219, 220, 957, 286, 221, 958, 904,
	959, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 960, 296, 0, 297, 298, 961, 836, 299, 300,
	301, 962, 963, 965, 964, 966, 967, 968, 302, 303,
	478, 304, 222, 305, 223, 224, 969, 306, 970, 307,
	971, 308, 972, 973, 309, 310, 974, 311, 975, 0,
	976, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	977, 837, 978, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 979, 323, 980, 981, 838, 324,
	982, 325, 231, 983, 232, 984, 326, 327, 328, 329,
	330, 331, 233, 234, 840, 985, 235, 0, 0, 0,
	335, 986, 332, 987, 839, 333, 236, 334, 237, 238,
	239, 240, 241, 988, 242, 989, 336, 841, 842, 337,
	338, 339, 843, 243, 244, 0, 0, 340, 341, 342,
	990, 344, 343, 991, 245, 844, 345, 346, 845, 992,
	347, 348, 993, 994, 349, 0, 350, 906, 905, 351,
	352, 354, 246, 353, 846, 355, 356, 358, 357, 995,
	996, 847, 997, 247, 359, 248, 360, 361, 998, 362,
	363, 999, 1000, 364, 365, 1001, 1002, 366, 249, 848,
	367, 849, 250, 368, 369, 370, 371, 372, 373, 374,
	1003, 375, 251, 376, 252, 377, 1004, 378, 379, 380,
	381, 382, 253, 383, 384, 1005, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 1006,
	397, 850, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 1007, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 1008, 418, 403, 404,
	419, 851, 420, 259, 260, 421, 1009, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 1010,
	431, 432, 1011, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 1012, 263, 264, 265, 1013, 1014, 441,
	442, 266, 267, 1015, 443, 444, 445, 446, 1016, 1017,
	447, 448, 449, 450, 1018, 451, 1019, 268, 452, 453,
	454, 269, 270, 1020, 1021, 455, 271, 1022, 1023, 1024,
	1025, 456, 457, 272, 458, 459, 460, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 273, 274, 275, 276, 945, 277, 946,
	947, 948, 949, 209, 950, 951, 952, 953, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 954, 282,
	216, 217, 283, 284, 285, 955, 956, 218, 219, 220,
	957, 286, 221, 958, 904, 959, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 960, 296, 0, 297,
	298, 961, 836, 299, 300, 301, 962, 963, 965, 964,
	966, 967, 968, 302, 303, 478, 304, 222, 305, 223,
	224, 969, 306, 970, 307, 971, 308, 972, 973, 309,
	310, 974, 311, 975, 0, 976, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 977, 837, 978, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 979,
	323, 980, 981, 838, 324, 982, 325, 231, 983, 232,
	984, 326, 327, 328, 329, 330, 331, 233, 234, 840,
	985, 235, 0, 0, 0, 335, 986, 332, 987, 839,
	333, 236, 334, 237, 238, 239, 240, 241, 988, 242,
	989, 336, 841, 842, 337, 338, 339, 843, 243, 244,
	0, 0, 340, 341, 342, 990, 344, 343, 991, 245,
	844, 345, 346, 845, 992, 347, 348, 993, 994, 349,
	0, 350, 906, 905, 351, 352, 354, 246, 353, 846,
	355, 356, 358, 357, 995, 996, 847, 997, 247, 359,
	248, 360, 361, 998, 362, 363, 999, 1000, 364, 365,
	1001, 1002, 366, 249, 848, 367, 849, 250, 368, 369,
	370, 371, 372, 373, 374, 1003, 375, 251, 376, 252,
	377, 1004, 378, 379, 380, 381, 382, 253, 383, 384,
	1005, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 1006, 397, 850, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 1007, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 1008, 418, 403, 404, 419, 851, 420, 259, 260,
	421, 1009, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 1010, 431, 432, 1011, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 1012, 263,
	264, 265, 1013, 1014, 441, 442, 266, 267, 1015, 443,
	444, 445, 446, 1016, 1017, 447, 448, 449, 450, 1018,
	451, 1019, 268, 452, 453, 454, 269, 270, 1020, 1021,
	455, 271, 1022, 1023, 1024, 1025, 456, 457, 272, 458,
	459, 460, 703, 0, 755, 743, 744, 741, 742, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 167, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 169, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 1110, 833, 0, 0, 455, 271, 0,
	0, 0, 161, 456, 457, 272, 458, 459, 460, 719,
	162, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 755, 743, 744, 741, 742, 732,
	0, 1317, 0, 0, 0, 0, 0, 731, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 167, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 169, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 1110, 833, 0, 0, 455, 271, 0,
	0, 0, 161, 456, 457, 272, 458, 459, 460, 719,
	162, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 755, 743, 744, 741, 742, 732,
	0, 1317, 0, 0, 0, 0, 0, 731, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 1849, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 1854,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 1850, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	1851, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 719,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 755, 743, 744, 741, 742, 732,
	0, 728, 0, 0, 0, 0, 0, 731, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 2592, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 719,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 1378, 755, 743, 744, 741, 742,
	732, 728, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 790, 735, 0, 0, 0, 278, 279, 280, 210,
	797, 775, 798, 763, 799, 800, 0, 282, 765, 764,
	283, 284, 285, 738, 789, 801, 802, 220, 0, 286,
	794, 0, 780, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	836, 299, 300, 301, 783, 781, 782, 786, 0, 784,
	785, 302, 303, 478, 304, 803, 305, 804, 805, 721,
	306, 0, 307, 0, 308, 0, 0, 796, 310, 0,
	311, 0, 0, 0, 726, 312, 313, 315, 318, 314,
	319, 806, 807, 750, 837, 0, 0, 0, 0, 0,
	320, 321, 808, 809, 810, 0, 322, 0, 323, 0,
	0, 838, 324, 0, 325, 811, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 791, 793, 840, 0, 774,
	0, 0, 0, 335, 1680, 332, 0, 839, 333, 812,
	778, 813, 814, 815, 816, 817, 0, 779, 0, 336,
	841, 842, 337, 338, 339, 843, 818, 819, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 820, 844, 345,
	346, 845, 0, 347, 348, 0, 0, 349, 0, 350,
	723, 722, 351, 352, 354, 767, 353, 846, 355, 356,
	358, 357, 718, 0, 847, 751, 792, 359, 821, 360,
	361, 0, 776, 777, 0, 0, 364, 365, 0, 0,
	366, 249, 848, 367, 849, 822, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 823, 376, 252, 377, 1679,
	378, 379, 380, 381, 382, 824, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 850, 398, 399, 400, 401, 727,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 768, 769, 770, 771, 413, 416, 417, 787,
	418, 403, 404, 419, 851, 420, 825, 772, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 826, 426, 427,
	428, 827, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 766, 440, 0, 828, 829, 830,
	0, 0, 441, 442, 831, 832, 749, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 788, 451, 0,
	773, 452, 453, 454, 269, 833, 0, 0, 455, 271,
	0, 0, 0, 0, 456, 457, 272, 458, 459, 460,
	719, 0, 0, 0, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 715, 716, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 711, 731, 755,
	743, 744, 741, 742, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 790, 735, 0, 0, 0,
	278, 279, 280, 210, 797, 775, 798, 763, 799, 800,
	0, 282, 765, 764, 283, 284, 285, 738, 789, 801,
	802, 220, 0, 286, 794, 0, 780, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 836, 299, 300, 301, 783, 781,
	782, 786, 0, 784, 785, 302, 303, 478, 304, 803,
	305, 804, 805, 721, 306, 0, 307, 0, 308, 0,
	0, 796, 310, 0, 311, 0, 0, 0, 726, 312,
	313, 315, 318, 314, 319, 806, 807, 750, 837, 0,
	0, 0, 0, 0, 320, 321, 808, 809, 810, 0,
	322, 0, 323, 0, 0, 838, 324, 0, 325, 811,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 791,
	793, 840, 0, 774, 0, 0, 0, 335, 0, 332,
	0, 839, 333, 812, 778, 813, 814, 815, 816, 817,
	0, 779, 0, 336, 841, 842, 337, 338, 339, 843,
	818, 819, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 820, 844, 345, 346, 845, 0, 347, 348, 0,
	0, 349, 0, 350, 723, 722, 351, 352, 354, 767,
	353, 846, 355, 356, 358, 357, 718, 0, 847, 751,
	792, 359, 821, 360, 361, 0, 776, 777, 713, 0,
	364, 365, 0, 0, 366, 249, 848, 367, 849, 822,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 823,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 824,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 850, 398,
	399, 400, 401, 727, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 768, 769, 770, 771,
	413, 416, 417, 787, 418, 403, 404, 419, 851, 420,
	825, 772, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 826, 426, 427, 428, 827, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 766, 440,
	0, 828, 829, 830, 0, 0, 441, 442, 831, 832,
	749, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 788, 451, 0, 773, 452, 453, 454, 269, 833,
	0, 0, 455, 271, 0, 0, 0, 0, 456, 457,
	272, 458, 459, 460, 719, 0, 0, 0, 0, 0,
	0, 0, 717, 0, 0, 0, 0, 715, 716, 755,
	743, 744, 741, 742, 732, 0, 728, 0, 0, 0,
	0, 0, 731, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 790, 735, 0, 0, 0,
	278, 279, 280, 210, 797, 775, 798, 763, 799, 800,
	0, 282, 765, 764, 283, 284, 285, 738, 789, 801,
	802, 220, 0, 286, 794, 0, 780, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 836, 299, 300, 301, 783, 781,
	782, 786, 0, 784, 785, 302, 303, 478, 304, 803,
	305, 804, 805, 721, 306, 0, 307, 0, 308, 0,
	0, 796, 310, 0, 311, 0, 0, 0, 726, 312,
	313, 315, 318, 314, 319, 806, 807, 750, 837, 0,
	0, 0, 0, 0, 320, 321, 808, 809, 810, 0,
	322, 0, 323, 0, 0, 838, 324, 0, 325, 811,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 791,
	793, 840, 0, 774, 0, 0, 0, 335, 0, 332,
	0, 839, 333, 812, 778, 813, 814, 815, 816, 817,
	0, 779, 0, 336, 841, 842, 337, 338, 339, 843,
	818, 819, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 820, 844, 345, 346, 845, 0, 347, 348, 0,
	0, 349, 0, 350, 723, 722, 351, 352, 354, 767,
	353, 846, 355, 356, 358, 357, 718, 0, 847, 751,
	792, 359, 821, 360, 361, 0, 776, 777, 0, 0,
	364, 365, 0, 0, 366, 249, 848, 367, 849, 822,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 823,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 824,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 850, 398,
	399, 400, 401, 727, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 768, 769, 770, 771,
	413, 416, 417, 787, 418, 403, 404, 419, 851, 420,
	825, 772, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 826, 426, 427, 428, 827, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 766, 440,
	0, 828, 829, 830, 0, 0, 441, 442, 831, 832,
	749, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 788, 451, 0, 773, 452, 453, 454, 269, 833,
	2427, 0, 455, 271, 0, 0, 0, 0, 456, 457,
	272, 458, 459, 460, 719, 0, 0, 0, 0, 0,
	0, 0, 717, 0, 0, 0, 0, 715, 716, 755,
	743, 744, 741, 742, 732, 0, 728, 0, 0, 0,
	0, 0, 731, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 790, 735, 0, 0, 0,
	278, 279, 280, 210, 797, 775, 798, 763, 799, 800,
	0, 282, 765, 764, 283, 284, 285, 738, 789, 801,
	802, 220, 0, 286, 794, 0, 780, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 836, 299, 300, 301, 783, 781,
	782, 786, 0, 784, 785, 302, 303, 478, 304, 803,
	305, 804, 805, 721, 306, 0, 307, 0, 308, 0,
	0, 796, 310, 0, 311, 0, 0, 0, 726, 312,
	313, 315, 318, 314, 319, 806, 807, 750, 837, 0,
	0, 0, 0, 0, 320, 321, 808, 809, 810, 0,
	322, 0, 323, 0, 0, 838, 324, 0, 325, 811,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 791,
	793, 840, 0, 774, 0, 0, 0, 335, 0, 332,
	0, 839, 333, 812, 778, 813, 814, 815, 816, 817,
	0, 779, 0, 336, 841, 842, 337, 338, 339, 843,
	818, 819, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 820, 844, 345, 346, 845, 0, 347, 348, 0,
	0, 349, 0, 350, 723, 722, 351, 352, 354, 767,
	353, 846, 355, 356, 358, 357, 718, 0, 847, 751,
	792, 359, 821, 360, 361, 0, 776, 777, 713, 0,
	364, 365, 0, 0, 366, 249, 848, 367, 849, 822,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 823,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 824,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 850, 398,
	399, 400, 401, 727, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 768, 769, 770, 771,
	413, 416, 417, 787, 418, 403, 404, 419, 851, 420,
	825, 772, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 826, 426, 427, 428, 827, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 766, 440,
	0, 828, 829, 830, 0, 0, 441, 442, 831, 832,
	749, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 788, 451, 0, 773, 452, 453, 454, 269, 833,
	0, 0, 455, 271, 0, 0, 0, 0, 456, 457,
	272, 458, 459, 460, 719, 0, 0, 0, 0, 0,
	0, 0, 717, 0, 0, 0, 0, 715, 716, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	0, 2243, 731, 755, 743, 744, 741, 742, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 790,
	735, 0, 0, 0, 278, 279, 280, 210, 797, 775,
	798, 763, 799, 800, 0, 282, 765, 764, 283, 284,
	285, 738, 789, 801, 802, 220, 0, 286, 794, 0,
	780, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 836, 299,
	300, 301, 783, 781, 782, 786, 0, 784, 785, 302,
	303, 478, 304, 803, 305, 804, 805, 721, 306, 0,
	307, 0, 308, 0, 0, 796, 310, 0, 311, 0,
	0, 0, 726, 312, 313, 315, 318, 314, 319, 806,
	807, 750, 837, 0, 0, 0, 0, 0, 320, 321,
	808, 809, 810, 0, 322, 0, 323, 0, 0, 838,
	324, 0, 325, 811, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 791, 793, 840, 0, 774, 0, 0,
	0, 335, 0, 332, 0, 839, 333, 812, 778, 813,
	814, 815, 816, 817, 0, 779, 0, 336, 841, 842,
	337, 338, 339, 843, 818, 819, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 820, 844, 345, 346, 845,
	0, 347, 348, 0, 0, 349, 0, 350, 723, 722,
	351, 352, 354, 767, 353, 846, 355, 356, 358, 357,
	718, 0, 847, 751, 792, 359, 821, 360, 361, 0,
	776, 777, 0, 0, 364, 365, 0, 0, 366, 249,
	848, 367, 849, 822, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 823, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 824, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 850, 398, 399, 400, 401, 727, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	768, 769, 770, 771, 413, 416, 417, 787, 418, 403,
	404, 419, 851, 420, 825, 772, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 826, 426, 427, 428, 827,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 766, 440, 0, 828, 829, 830, 0, 0,
	441, 442, 831, 832, 749, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 788, 451, 0, 773, 452,
	453, 454, 269, 833, 0, 0, 455, 271, 0, 0,
	0, 0, 456, 457, 272, 458, 459, 460, 719, 0,
	0, 0, 0, 0, 0, 0, 717, 0, 0, 0,
	0, 715, 716, 755, 743, 744, 741, 742, 732, 0,
	728, 0, 0, 0, 0, 0, 731, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 790,
	735, 0, 0, 0, 278, 279, 280, 210, 797, 775,
	798, 763, 799, 800, 0, 282, 765, 764, 283, 284,
	285, 738, 789, 801, 802, 220, 0, 286, 794, 0,
	780, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 836, 299,
	300, 301, 783, 781, 782, 786, 0, 784, 785, 302,
	303, 478, 304, 803, 305, 804, 805, 721, 306, 0,
	307, 0, 308, 0, 0, 796, 310, 0, 311, 0,
	0, 0, 726, 312, 313, 315, 318, 314, 319, 806,
	807, 750, 837, 0, 0, 0, 0, 0, 320, 321,
	808, 809, 810, 0, 322, 0, 323, 0, 0, 838,
	324, 0, 325, 811, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 791, 793, 840, 0, 774, 0, 0,
	0, 335, 0, 332, 0, 839, 333, 812, 778, 813,
	814, 815, 816, 817, 0, 779, 0, 336, 841, 842,
	337, 338, 339, 843, 818, 819, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 820, 844, 345, 346, 845,
	0, 347, 348, 0, 0, 349, 0, 350, 723, 722,
	351, 352, 354, 767, 353, 846, 355, 356, 358, 357,
	718, 0, 847, 751, 792, 359, 821, 360, 361, 0,
	776, 777, 0, 0, 364, 365, 0, 0, 366, 249,
	848, 367, 849, 822, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 823, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 824, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 850, 398, 399, 400, 401, 727, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	768, 769, 770, 771, 413, 416, 417, 787, 418, 403,
	404, 419, 851, 420, 825, 772, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 826, 426, 427, 428, 827,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 766, 440, 0, 828, 829, 830, 0, 0,
	441, 442, 831, 832, 749, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 788, 451, 0, 773, 452,
	453, 454, 269, 833, 0, 0, 455, 271, 0, 0,
	0, 0, 456, 457, 272, 458, 459, 460, 719, 0,
	0, 0, 0, 0, 0, 0, 717, 0, 0, 0,
	0, 715, 716, 1378, 755, 743, 744, 741, 742, 732,
	728, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 1854,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 719,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 0, 0, 1888, 731, 755, 743,
	744, 741, 742, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 790, 735, 0, 0, 0, 278,
	279, 280, 210, 797, 775, 798, 763, 799, 800, 0,
	282, 765, 764, 283, 284, 285, 738, 789, 801, 802,
	220, 0, 286, 794, 0, 780, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 836, 299, 300, 301, 783, 781, 782,
	786, 0, 784, 785, 302, 303, 478, 304, 803, 305,
	804, 805, 721, 306, 0, 307, 0, 308, 0, 0,
	796, 310, 0, 311, 0, 0, 0, 726, 312, 313,
	315, 318, 314, 319, 806, 807, 750, 837, 0, 0,
	0, 0, 0, 320, 321, 808, 809, 810, 0, 322,
	0, 323, 0, 0, 838, 324, 0, 325, 811, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 791, 793,
	840, 0, 774, 0, 0, 0, 335, 0, 332, 0,
	839, 333, 812, 778, 813, 814, 815, 816, 817, 0,
	779, 0, 336, 841, 842, 337, 338, 339, 843, 818,
	819, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	820, 844, 345, 346, 845, 0, 347, 348, 0, 0,
	349, 0, 350, 723, 722, 351, 352, 354, 767, 353,
	846, 355, 356, 358, 357, 718, 0, 847, 751, 792,
	359, 821, 360, 361, 0, 776, 777, 0, 0, 364,
	365, 0, 0, 366, 249, 848, 367, 849, 822, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 823, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 824, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 850, 398, 399,
	400, 401, 727, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 768, 769, 770, 771, 413,
	416, 417, 787, 418, 403, 404, 419, 851, 420, 825,
	772, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	826, 426, 427, 428, 827, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 766, 440, 0,
	828, 829, 830, 0, 0, 441, 442, 831, 832, 749,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	788, 451, 0, 773, 452, 453, 454, 269, 833, 0,
	0, 455, 271, 0, 0, 0, 0, 456, 457, 272,
	458, 459, 460, 719, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 715, 716, 0, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	1842, 731, 755, 743, 744, 741, 742, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 790, 735,
	0, 0, 0, 278, 279, 280, 210, 797, 775, 798,
	763, 799, 800, 0, 282, 765, 764, 283, 284, 285,
	738, 789, 801, 802, 220, 0, 286, 794, 0, 780,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 836, 299, 300,
	301, 783, 781, 782, 786, 0, 784, 785, 302, 303,
	478, 304, 803, 305, 804, 805, 721, 306, 0, 307,
	0, 308, 0, 0, 796, 310, 0, 311, 0, 0,
	0, 726, 312, 313, 315, 318, 314, 319, 806, 807,
	750, 837, 0, 0, 0, 0, 0, 320, 321, 808,
	809, 810, 0, 322, 0, 323, 0, 0, 838, 324,
	0, 325, 811, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 791, 793, 840, 0, 774, 0, 0, 0,
	335, 0, 332, 0, 839, 333, 812, 778, 813, 814,
	815, 816, 817, 0, 779, 0, 336, 841, 842, 337,
	338, 339, 843, 818, 819, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 820, 844, 345, 346, 845, 0,
	347, 348, 0, 0, 349, 0, 350, 723, 722, 351,
	352, 354, 767, 353, 846, 355, 356, 358, 357, 718,
	0, 847, 751, 792, 359, 821, 360, 361, 0, 776,
	777, 0, 0, 364, 365, 0, 0, 366, 249, 848,
	367, 849, 822, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 823, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 824, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 850, 398, 399, 400, 401, 727, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 768,
	769, 770, 771, 413, 416, 417, 787, 418, 403, 404,
	419, 851, 420, 825, 772, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 826, 426, 427, 428, 827, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 766, 440, 0, 828, 829, 830, 0, 0, 441,
	442, 831, 832, 749, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 788, 451, 0, 773, 452, 453,
	454, 269, 833, 0, 0, 455, 271, 0, 0, 0,
	0, 456, 457, 272, 458, 459, 460, 719, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	715, 716, 0, 0, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 0, 1830, 731, 755, 743, 744, 741,
	742, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 790, 735, 0, 0, 0, 278, 279, 280,
	210, 797, 775, 798, 763, 799, 800, 0, 282, 765,
	764, 283, 284, 285, 738, 789, 801, 802, 220, 0,
	286, 794, 0, 780, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 836, 299, 300, 301, 783, 781, 782, 786, 0,
	784, 785, 302, 303, 478, 304, 803, 305, 804, 805,
	721, 306, 0, 307, 0, 308, 0, 0, 796, 310,
	0, 311, 0, 0, 0, 726, 312, 313, 315, 318,
	314, 319, 806, 807, 750, 837, 0, 0, 0, 0,
	0, 320, 321, 808, 809, 810, 0, 322, 0, 323,
	0, 0, 838, 324, 0, 325, 811, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 791, 793, 840, 0,
	774, 0, 0, 0, 335, 0, 332, 0, 839, 333,
	812, 778, 813, 814, 815, 816, 817, 0, 779, 0,
	336, 841, 842, 337, 338, 339, 843, 818, 819, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 820, 844,
	345, 346, 845, 0, 347, 348, 0, 0, 349, 0,
	350, 723, 722, 351, 352, 354, 767, 353, 846, 355,
	356, 358, 357, 718, 0, 847, 751, 792, 359, 821,
	360, 361, 0, 776, 777, 0, 0, 364, 365, 0,
	0, 366, 249, 848, 367, 849, 822, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 823, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 824, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 850, 398, 399, 400, 401,
	727, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 768, 769, 770, 771, 413, 416, 417,
	787, 418, 403, 404, 419, 851, 420, 825, 772, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 826, 426,
	427, 428, 827, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 766, 440, 0, 828, 829,
	830, 0, 0, 441, 442, 831, 832, 749, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 788, 451,
	0, 773, 452, 453, 454, 269, 833, 0, 0, 455,
	271, 0, 0, 0, 0, 456, 457, 272, 458, 459,
	460, 719, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 715, 716, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 0, 1828, 731,
	755, 743, 744, 741, 742, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 790, 735, 0, 0,
	0, 278, 279, 280, 210, 797, 775, 798, 763, 799,
	800, 0, 282, 765, 764, 283, 284, 285, 738, 789,
	801, 802, 220, 0, 286, 794, 0, 780, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 836, 299, 300, 301, 783,
	781, 782, 786, 0, 784, 785, 302, 303, 478, 304,
	803, 305, 804, 805, 721, 306, 0, 307, 0, 308,
	0, 0, 796, 310, 0, 311, 0, 0, 0, 726,
	312, 313, 315, 318, 314, 319, 806, 807, 750, 837,
	0, 0, 0, 0, 0, 320, 321, 808, 809, 810,
	0, 322, 0, 323, 0, 0, 838, 324, 0, 325,
	811, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	791, 793, 840, 0, 774, 0, 0, 0, 335, 0,
	332, 0, 839, 333, 812, 778, 813, 814, 815, 816,
	817, 0, 779, 0, 336, 841, 842, 337, 338, 339,
	843, 818, 819, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 820, 844, 345, 346, 845, 0, 347, 348,
	0, 0, 349, 0, 350, 723, 722, 351, 352, 354,
	767, 353, 846, 355, 356, 358, 357, 718, 0, 847,
	751, 792, 359, 821, 360, 361, 0, 776, 777, 0,
	0, 364, 365, 0, 0, 366, 249, 848, 367, 849,
	822, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	823, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	824, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 850,
	398, 399, 400, 401, 727, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 768, 769, 770,
	771, 413, 416, 417, 787, 418, 403, 404, 419, 851,
	420, 825, 772, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 826, 426, 427, 428, 827, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 766,
	440, 0, 828, 829, 830, 0, 0, 441, 442, 831,
	832, 749, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 788, 451, 0, 773, 452, 453, 454, 269,
	833, 0, 0, 455, 271, 0, 0, 0, 0, 456,
	457, 272, 458, 459, 460, 719, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 715, 716,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	0, 0, 1826, 731, 755, 743, 744, 741, 742, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 719,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 0, 0, 1823, 731, 1815, 743,
	744, 741, 742, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 790, 735, 0, 0, 0, 278,
	279, 280, 210, 797, 775, 798, 763, 799, 800, 0,
	282, 765, 764, 283, 284, 285, 738, 789, 801, 802,
	220, 0, 286, 794, 0, 780, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 836, 299, 300, 301, 783, 781, 782,
	786, 0, 784, 785, 302, 303, 478, 304, 803, 1818,
	804, 805, 721, 306, 0, 307, 0, 308, 0, 0,
	796, 310, 0, 311, 0, 0, 0, 726, 312, 313,
	315, 318, 314, 319, 806, 807, 750, 837, 0, 0,
	0, 0, 0, 320, 321, 808, 809, 810, 0, 322,
	0, 323, 0, 0, 838, 324, 0, 325, 811, 0,
	232, 0, 326, 327, 1819, 329, 330, 331, 791, 793,
	840, 0, 774, 0, 0, 0, 335, 0, 332, 0,
	839, 333, 812, 778, 813, 814, 815, 816, 817, 0,
	779, 0, 336, 841, 842, 337, 338, 339, 843, 818,
	819, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	820, 844, 345, 346, 845, 0, 347, 348, 0, 0,
	349, 0, 350, 723, 722, 1820, 1817, 354, 767, 353,
	846, 355, 356, 358, 357, 718, 0, 847, 751, 792,
	359, 821, 360, 361, 0, 776, 777, 0, 0, 364,
	365, 0, 0, 366, 249, 848, 367, 849, 822, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 823, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 824, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 850, 398, 399,
	400, 401, 727, 402, 0, 406, 407, 408, 409, 410,
	411, 1821, 0, 414, 415, 768, 769, 770, 771, 413,
	416, 417, 787, 418, 403, 404, 419, 851, 420, 825,
	772, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	826, 426, 427, 428, 827, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 766, 440, 0,
	828, 829, 830, 0, 0, 441, 442, 831, 832, 749,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	788, 451, 0, 773, 452, 453, 454, 269, 833, 0,
	0, 455, 271, 0, 0, 0, 0, 456, 457, 272,
	458, 1816, 460, 719, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 715, 716, 0, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	1812, 731, 1815, 743, 744, 741, 742, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 790, 735,
	0, 0, 0, 278, 279, 280, 210, 797, 775, 798,
	763, 799, 800, 0, 282, 765, 764, 283, 284, 285,
	738, 789, 801, 802, 220, 0, 286, 794, 0, 780,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 836, 299, 300,
	301, 783, 781, 782, 786, 0, 784, 785, 302, 303,
	478, 304, 803, 1818, 804, 805, 721, 306, 0, 307,
	0, 308, 0, 0, 796, 310, 0, 311, 0, 0,
	0, 726, 312, 313, 315, 318, 314, 319, 806, 807,
	750, 837, 0, 0, 0, 0, 0, 320, 321, 808,
	809, 810, 0, 322, 0, 323, 0, 0, 838, 324,
	0, 325, 811, 0, 232, 0, 326, 327, 1819, 329,
	330, 331, 791, 793, 840, 0, 774, 0, 0, 0,
	335, 0, 332, 0, 839, 333, 812, 778, 813, 814,
	815, 816, 817, 0, 779, 0, 336, 841, 842, 337,
	338, 339, 843, 818, 819, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 820, 844, 345, 346, 845, 0,
	347, 348, 0, 0, 349, 0, 350, 723, 722, 1820,
	1817, 354, 767, 353, 846, 355, 356, 358, 357, 718,
	0, 847, 751, 792, 359, 821, 360, 361, 0, 776,
	777, 0, 0, 364, 365, 0, 0, 366, 249, 848,
	367, 849, 822, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 823, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 824, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 850, 398, 399, 400, 401, 727, 402, 0, 406,
	407, 408, 409, 410, 411, 1821, 0, 414, 415, 768,
	769, 770, 771, 413, 416, 417, 787, 418, 403, 404,
	419, 851, 420, 825, 772, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 826, 426, 427, 428, 827, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 766, 440, 0, 828, 829, 830, 0, 0, 441,
	442, 831, 832, 749, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 788, 451, 0, 773, 452, 453,
	454, 269, 833, 0, 0, 455, 271, 0, 0, 0,
	0, 456, 457, 272, 458, 1816, 460, 719, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	715, 716, 755, 743, 744, 741, 742, 732, 0, 728,
	0, 0, 0, 0, 0, 731, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 790, 735,
	0, 0, 0, 278, 279, 280, 210, 797, 775, 798,
	763, 799, 800, 0, 282, 765, 764, 283, 284, 285,
	738, 789, 801, 802, 220, 0, 286, 794, 0, 780,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 836, 299, 300,
	301, 783, 781, 782, 786, 0, 784, 785, 302, 303,
	478, 304, 803, 305, 804, 805, 721, 306, 0, 307,
	0, 308, 0, 0, 796, 310, 0, 311, 0, 0,
	0, 726, 312, 313, 315, 318, 314, 319, 806, 807,
	750, 837, 0, 0, 0, 0, 0, 320, 321, 808,
	809, 810, 0, 322, 0, 323, 0, 0, 838, 324,
	0, 325, 811, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 791, 793, 840, 0, 774, 0, 0, 0,
	335, 0, 332, 0, 839, 333, 812, 778, 813, 814,
	815, 816, 817, 0, 779, 0, 336, 841, 842, 337,
	338, 339, 843, 818, 819, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 820, 844, 345, 346, 845, 0,
	347, 348, 0, 0, 349, 0, 350, 723, 722, 351,
	352, 354, 767, 353, 846, 355, 356, 358, 357, 718,
	0, 847, 751, 792, 359, 821, 360, 361, 0, 776,
	777, 0, 0, 364, 365, 0, 0, 366, 249, 848,
	367, 849, 822, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 823, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 824, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 850, 398, 399, 400, 401, 727, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 768,
	769, 770, 771, 413, 416, 417, 787, 418, 403, 404,
	419, 851, 420, 825, 772, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 826, 426, 427, 428, 827, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 766, 440, 0, 828, 829, 830, 0, 0, 441,
	442, 831, 832, 749, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 788, 451, 0, 773, 452, 453,
	454, 269, 833, 0, 0, 455, 271, 0, 0, 0,
	0, 456, 457, 272, 458, 459, 460, 719, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	715, 716, 0, 0, 0, 0, 0, 1322, 0, 728,
	0, 0, 0, 0, 0, 731, 755, 743, 744, 741,
	742, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 1667, 277, 0, 0,
	0, 0, 790, 735, 0, 0, 0, 278, 279, 280,
	210, 797, 775, 798, 763, 799, 800, 0, 282, 765,
	764, 283, 284, 285, 738, 789, 801, 802, 220, 0,
	286, 794, 0, 780, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 836, 299, 300, 301, 783, 781, 782, 786, 0,
	784, 785, 302, 303, 478, 304, 803, 305, 804, 805,
	721, 306, 0, 307, 0, 308, 0, 0, 796, 310,
	0, 311, 0, 0, 0, 726, 312, 313, 315, 318,
	314, 319, 806, 807, 750, 837, 0, 0, 0, 0,
	0, 320, 321, 808, 809, 810, 0, 322, 0, 323,
	0, 0, 838, 324, 0, 325, 811, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 791, 793, 840, 0,
	774, 0, 0, 0, 335, 0, 332, 0, 839, 333,
	812, 778, 813, 814, 815, 816, 817, 0, 779, 0,
	336, 841, 842, 337, 338, 339, 843, 818, 819, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 820, 844,
	345, 346, 845, 0, 347, 348, 0, 0, 349, 0,
	350, 723, 722, 351, 352, 354, 767, 353, 846, 355,
	356, 358, 357, 718, 0, 847, 751, 792, 359, 821,
	360, 361, 0, 776, 777, 0, 0, 364, 365, 0,
	0, 366, 249, 848, 367, 849, 822, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 823, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 824, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 850, 398, 399, 400, 401,
	727, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 768, 769, 770, 771, 413, 416, 417,
	787, 418, 403, 404, 419, 851, 420, 825, 772, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 826, 426,
	427, 428, 827, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 766, 440, 0, 828, 829,
	830, 0, 0, 441, 442, 831, 832, 749, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 788, 451,
	0, 773, 452, 453, 454, 269, 833, 0, 0, 455,
	271, 0, 0, 0, 0, 456, 457, 272, 458, 459,
	460, 719, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 715, 716, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 0, 1039, 731,
	755, 743, 744, 741, 742, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 790, 735, 0, 0,
	0, 278, 279, 280, 210, 797, 775, 798, 763, 799,
	800, 0, 282, 765, 764, 283, 284, 285, 738, 789,
	801, 802, 220, 0, 286, 794, 0, 780, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 836, 299, 300, 301, 783,
	781, 782, 786, 0, 784, 785, 302, 303, 478, 304,
	803, 305, 804, 805, 721, 306, 0, 307, 0, 308,
	0, 0, 796, 310, 0, 311, 0, 0, 0, 726,
	312, 313, 315, 318, 314, 319, 806, 807, 750, 837,
	0, 0, 0, 0, 0, 320, 321, 808, 809, 810,
	0, 322, 0, 323, 0, 0, 838, 324, 0, 325,
	811, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	791, 793, 840, 0, 774, 0, 0, 0, 335, 0,
	332, 0, 839, 333, 812, 778, 813, 814, 815, 816,
	817, 0, 779, 0, 336, 841, 842, 337, 338, 339,
	843, 818, 819, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 820, 844, 345, 346, 845, 0, 347, 348,
	0, 0, 349, 0, 350, 723, 722, 351, 352, 354,
	767, 353, 846, 355, 356, 358, 357, 718, 0, 847,
	751, 792, 359, 821, 360, 361, 0, 776, 777, 0,
	0, 364, 365, 0, 0, 366, 249, 848, 367, 849,
	822, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	823, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	824, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 850,
	398, 399, 400, 401, 727, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 768, 769, 770,
	771, 413, 416, 417, 787, 418, 403, 404, 419, 851,
	420, 825, 772, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 826, 426, 427, 428, 827, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 766,
	440, 0, 828, 829, 830, 0, 0, 441, 442, 831,
	832, 749, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 788, 451, 0, 773, 452, 453, 454, 269,
	833, 0, 0, 455, 271, 0, 0, 0, 0, 456,
	457, 272, 458, 459, 460, 719, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 715, 716,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	0, 0, 1037, 731, 755, 743, 744, 741, 742, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 719,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 755, 743, 744, 741, 742, 732,
	0, 728, 0, 0, 0, 0, 0, 731, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 719,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 755, 743, 744, 741, 742, 732,
	0, 728, 0, 0, 0, 0, 0, 731, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 2977, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 2976, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 719,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 755, 743, 744, 741, 742, 732,
	0, 728, 0, 0, 0, 0, 0, 731, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 2975, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 2977, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 721, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 723,
	722, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 718, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 727, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 2976, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 719,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 715, 716, 755, 743, 744, 741, 742, 732,
	0, 728, 0, 0, 0, 0, 0, 731, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	790, 735, 0, 0, 0, 278, 279, 280, 210, 797,
	775, 798, 763, 799, 800, 0, 282, 765, 764, 283,
	284, 285, 738, 789, 801, 802, 220, 0, 286, 794,
	0, 780, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 783, 781, 782, 786, 0, 784, 785,
	302, 303, 478, 304, 803, 305, 804, 805, 0, 306,
	0, 307, 0, 308, 0, 0, 796, 310, 0, 311,
	0, 0, 0, 726, 312, 313, 315, 318, 314, 319,
	806, 807, 750, 837, 0, 0, 0, 0, 0, 320,
	321, 808, 809, 810, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 811, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 791, 793, 840, 0, 774, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 812, 778,
	813, 814, 815, 816, 817, 0, 779, 0, 336, 841,
	842, 337, 338, 339, 843, 818, 819, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 820, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 906,
	905, 351, 352, 354, 767, 353, 846, 355, 356, 358,
	357, 0, 0, 847, 751, 792, 359, 821, 360, 361,
	0, 776, 777, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 822, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 823, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 824, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 1840, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 768, 769, 770, 771, 413, 416, 417, 787, 418,
	403, 404, 419, 851, 420, 825, 772, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 826, 426, 427, 428,
	827, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 766, 440, 0, 828, 829, 830, 0,
	0, 441, 442, 831, 832, 749, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 788, 451, 0, 773,
	452, 453, 454, 269, 833, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 755,
	743, 744, 741, 742, 732, 0, 0, 1838, 0, 0,
	0, 0, 1836, 1837, 0, 273, 274, 275, 276, 0,
	277, 1839, 0, 0, 0, 790, 735, 731, 0, 0,
	278, 279, 280, 0, 797, 775, 798, 763, 799, 800,
	0, 282, 765, 764, 283, 284, 285, 738, 789, 801,
	802, 220, 0, 286, 794, 0, 780, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 836, 299, 300, 2977, 783, 781,
	782, 786, 0, 784, 785, 302, 303, 478, 304, 803,
	305, 804, 805, 721, 306, 0, 307, 0, 308, 0,
	0, 796, 310, 0, 311, 0, 0, 0, 726, 312,
	313, 315, 318, 314, 319, 806, 807, 750, 837, 0,
	0, 0, 0, 0, 320, 321, 808, 809, 810, 0,
	322, 0, 323, 0, 0, 838, 324, 0, 325, 811,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 791,
	793, 0, 0, 774, 0, 0, 0, 335, 0, 332,
	0, 839, 333, 812, 778, 813, 814, 815, 816, 817,
	0, 779, 0, 336, 0, 0, 337, 338, 339, 843,
	818, 819, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 820, 844, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 723, 722, 351, 352, 354, 767,
	353, 846, 355, 356, 358, 357, 718, 0, 0, 751,
	792, 359, 821, 360, 361, 0, 776, 777, 0, 0,
	364, 365, 0, 0, 366, 249, 848, 367, 849, 822,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 823,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 824,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 850, 398,
	399, 400, 401, 727, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 768, 769, 770, 771,
	413, 416, 417, 787, 418, 403, 404, 419, 0, 420,
	825, 772, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 826, 426, 427, 428, 827, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 766, 440,
	0, 828, 829, 830, 0, 0, 441, 442, 831, 832,
	749, 443, 444, 2976, 446, 0, 0, 447, 448, 449,
	450, 788, 451, 0, 773, 452, 453, 454, 269, 833,
	0, 0, 455, 271, 0, 0, 0, 0, 456, 457,
	272, 458, 459, 460, 0, 0, 0, 0, 0, 0,
	703, 0, 902, 0, 0, 0, 0, 715, 716, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 273, 274,
	275, 276, 731, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 904,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 836, 299, 300,
	301, 0, 898, 899, 0, 0, 900, 901, 302, 303,
	478, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 806, 807,
	0, 837, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 838, 324,
	0, 325, 811, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 840, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 839, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 841, 842, 337,
	338, 339, 843, 243, 244, 0, 0, 340, 341, 342,
	890, 344, 343, 0, 820, 844, 345, 346, 845, 0,
	347, 348, 0, 0, 349, 0, 350, 906, 905, 351,
	352, 354, 246, 353, 846, 355, 356, 358, 357, 0,
	0, 847, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 896, 364, 365, 0, 0, 366, 249, 848,
	367, 849, 822, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 823, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 850, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 167, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 851, 420, 259, 260, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 827, 0,
	431, 432, 169, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 0, 263, 264, 265, 0, 0, 441,
	442, 831, 832, 0, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 0, 451, 0, 268, 452, 453,
	454, 1110, 270, 0, 0, 455, 271, 0, 0, 902,
	161, 456, 457, 272, 458, 459, 460, 0, 162, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 887, 0, 1406,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 904, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 836, 299, 300, 301, 0, 898,
	899, 0, 0, 900, 901, 302, 303, 478, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 806, 807, 0, 837, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 838, 324, 0, 325, 811,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 840, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 839, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 841, 842, 337, 338, 339, 843,
	243, 244, 0, 0, 340, 341, 342, 890, 344, 343,
	0, 820, 844, 345, 346, 845, 0, 347, 348, 0,
	0, 349, 0, 350, 906, 905, 351, 352, 354, 246,
	353, 846, 355, 356, 358, 357, 0, 0, 847, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 896,
	364, 365, 0, 0, 366, 249, 848, 367, 849, 822,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 823,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 850, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 167, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 851, 420,
	259, 260, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 261, 426, 427, 428, 827, 0, 431, 432, 169,
	433, 434, 435, 436, 437, 316, 438, 317, 439, 440,
	0, 263, 264, 265, 0, 0, 441, 442, 831, 832,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 0, 451, 0, 268, 452, 453, 454, 1110, 270,
	0, 0, 455, 271, 0, 0, 902, 161, 456, 457,
	272, 458, 459, 460, 0, 162, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 790, 0, 887, 0, 1406, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 789, 218, 219, 220, 0,
	286, 794, 0, 780, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 836, 299, 300, 301, 783, 781, 782, 786, 0,
	784, 785, 302, 303, 478, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 806, 807, 0, 837, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 838, 324, 0, 325, 811, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 791, 793, 840, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 839, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 841, 842, 337, 338, 339, 843, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 820, 844,
	345, 346, 845, 0, 347, 348, 0, 0, 349, 0,
	350, 906, 905, 351, 352, 354, 246, 353, 846, 355,
	356, 358, 357, 0, 0, 847, 0, 792, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 848, 367, 849, 822, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 823, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 850, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	787, 418, 403, 404, 419, 851, 420, 259, 260, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 261, 426,
	427, 428, 827, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 439, 440, 0, 263, 264,
	265, 0, 0, 441, 442, 831, 832, 0, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 788, 451,
	0, 268, 452, 453, 454, 269, 270, 0, 0, 455,
	271, 2215, 0, 902, 0, 456, 457, 272, 458, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 2530, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	904, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 836, 299,
	300, 301, 0, 898, 899, 0, 0, 900, 901, 302,
	303, 478, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 806,
	807, 0, 837, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 838,
	324, 0, 325, 811, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 840, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 839, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 841, 842,
	337, 338, 339, 843, 243, 244, 0, 0, 340, 341,
	342, 890, 344, 343, 0, 820, 844, 345, 346, 845,
	0, 347, 348, 0, 0, 349, 0, 350, 906, 905,
	351, 352, 354, 246, 353, 846, 355, 356, 358, 357,
	0, 0, 847, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 896, 364, 365, 0, 0, 366, 249,
	848, 367, 849, 822, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 823, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 850, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 851, 420, 259, 260, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 827,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 0, 263, 264, 265, 0, 0,
	441, 442, 831, 832, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 0, 451, 0, 268, 452,
	453, 454, 269, 270, 0, 0, 455, 271, 886, 0,
	902, 0, 456, 457, 272, 458, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 887, 0,
	894, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 904, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 836, 299, 300, 301, 0,
	898, 899, 0, 0, 900, 901, 302, 303, 478, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 806, 807, 0, 837,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 838, 324, 0, 325,
	811, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 840, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 839, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 841, 842, 337, 338, 339,
	843, 243, 244, 0, 0, 340, 341, 342, 890, 344,
	343, 0, 820, 844, 345, 346, 845, 0, 347, 348,
	0, 0, 349, 0, 350, 906, 905, 351, 352, 354,
	246, 353, 846, 355, 356, 358, 357, 0, 0, 847,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	896, 364, 365, 0, 0, 366, 249, 848, 367, 849,
	822, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	823, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 850,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 851,
	420, 259, 260, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 261, 426, 427, 428, 827, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 439,
	440, 0, 263, 264, 265, 0, 0, 441, 442, 831,
	832, 0, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 0, 451, 0, 268, 452, 453, 454, 269,
	270, 0, 0, 455, 271, 0, 0, 902, 0, 456,
	457, 272, 458, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 887, 0, 894, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 904, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 836, 299, 300, 301, 0, 898, 899, 0,
	0, 900, 901, 302, 303, 478, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 806, 807, 0, 837, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 838, 324, 0, 325, 811, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 840,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 839,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 841, 842, 337, 338, 339, 843, 243, 244,
	0, 0, 340, 341, 342, 890, 344, 343, 0, 820,
	844, 345, 346, 845, 0, 347, 348, 0, 0, 349,
	0, 350, 906, 905, 351, 352, 354, 246, 353, 846,
	355, 356, 358, 357, 0, 0, 847, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 896, 364, 365,
	0, 0, 366, 249, 848, 367, 849, 822, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 823, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 850, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 851, 420, 259, 260,
	421, 0, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 827, 0, 431, 432, 0, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 0, 263,
	264, 265, 0, 0, 441, 442, 831, 832, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 450, 0,
	451, 0, 268, 452, 453, 454, 269, 270, 0, 0,
	455, 271, 1107, 0, 927, 0, 456, 457, 272, 458,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 887, 0, 894, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 904, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 478, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 837, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 840, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 841,
	842, 337, 338, 339, 843, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 906,
	905, 351, 352, 354, 246, 353, 846, 355, 356, 358,
	357, 0, 0, 847, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 167, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 851, 420, 259, 260, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 261, 426, 427, 428,
	262, 0, 431, 432, 169, 433, 434, 435, 436, 437,
	316, 438, 317, 439, 440, 0, 263, 264, 265, 0,
	0, 441, 442, 266, 267, 0, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 0, 451, 0, 268,
	452, 453, 454, 1110, 270, 0, 0, 455, 271, 0,
	0, 902, 161, 456, 457, 272, 458, 459, 460, 0,
	162, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 134, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 904, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 836, 299, 300, 301,
	0, 898, 899, 0, 0, 900, 901, 302, 303, 478,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 806, 807, 0,
	837, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 838, 324, 0,
	325, 811, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 840, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 839, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 841, 842, 337, 338,
	339, 843, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 820, 844, 345, 346, 845, 0, 347,
	348, 0, 0, 349, 0, 350, 906, 905, 351, 352,
	354, 246, 353, 846, 355, 356, 358, 357, 0, 0,
	847, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 848, 367,
	849, 822, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 823, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	850, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	851, 420, 259, 260, 421, 0, 430, 422, 423, 424,
	405, 425, 429, 261, 426, 427, 428, 827, 0, 431,
	432, 0, 433, 434, 435, 436, 437, 316, 438, 317,
	439, 440, 0, 263, 264, 265, 0, 0, 441, 442,
	831, 832, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 450, 0, 451, 0, 268, 452, 453, 454,
	269, 270, 0, 0, 455, 271, 703, 0, 475, 0,
	456, 457, 272, 458, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 1312, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 478, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 167, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	261, 426, 427, 428, 262, 0, 431, 432, 169, 433,
	434, 435, 436, 437, 316, 438, 317, 439, 440, 0,
	263, 264, 265, 0, 0, 441, 442, 266, 267, 0,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	0, 451, 0, 268, 452, 453, 454, 1110, 270, 0,
	0, 455, 271, 0, 0, 0, 161, 456, 457, 272,
	458, 459, 460, 0, 162, 755, 743, 744, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 134, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	797, 775, 798, 763, 799, 800, 0, 282, 765, 764,
	283, 284, 285, 0, 0, 801, 802, 220, 0, 286,
	221, 0, 904, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	836, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 803, 305, 804, 805, 0,
	306, 0, 307, 0, 308, 0, 0, 796, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 750, 837, 0, 0, 0, 0, 0,
	320, 321, 808, 809, 810, 0, 322, 0, 323, 0,
	0, 838, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 840, 0, 774,
	0, 0, 0, 335, 0, 332, 0, 839, 333, 812,
	778, 813, 814, 815, 816, 817, 0, 779, 0, 336,
	841, 842, 337, 338, 339, 843, 818, 819, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 844, 345,
	346, 845, 0, 347, 348, 0, 0, 349, 0, 350,
	906, 905, 351, 352, 354, 767, 353, 846, 355, 356,
	358, 357, 0, 0, 847, 751, 247, 359, 821, 360,
	361, 0, 776, 777, 0, 0, 364, 365, 0, 0,
	366, 249, 848, 367, 849, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 824, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 850, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 768, 769, 770, 771, 413, 416, 417, 0,
	418, 403, 404, 419, 851, 420, 825, 772, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 826, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 766, 440, 0, 828, 829, 830,
	0, 0, 441, 442, 266, 267, 749, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	773, 452, 453, 454, 269, 833, 475, 0, 455, 271,
	0, 0, 0, 0, 456, 457, 272, 458, 459, 460,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 478, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 261, 426,
	427, 428, 262, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 439, 440, 0, 263, 264,
	265, 0, 0, 441, 442, 266, 267, 0, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 0, 451,
	0, 268, 452, 453, 454, 269, 270, 0, 0, 455,
	271, 0, 0, 475, 0, 456, 457, 272, 458, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 2016, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 478, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 262,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 0, 263, 264, 265, 0, 0,
	441, 442, 266, 267, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 0, 451, 0, 268, 452,
	453, 454, 269, 270, 0, 0, 455, 271, 0, 0,
	475, 0, 456, 457, 272, 458, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	2442, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 478, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 261, 426, 427, 428, 262, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 439,
	440, 0, 263, 264, 265, 0, 0, 441, 442, 266,
	267, 0, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 0, 451, 0, 268, 452, 453, 454, 269,
	270, 0, 0, 455, 271, 0, 0, 0, 0, 456,
	457, 272, 458, 459, 460, 1178, 0, 927, 926, 0,
	0, 0, 924, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 1410, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 904, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 836, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 478, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 837, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 838, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 840,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 839,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 841, 842, 337, 338, 339, 843, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	844, 345, 346, 845, 0, 347, 348, 0, 0, 349,
	0, 350, 906, 905, 351, 352, 354, 246, 353, 846,
	355, 356, 358, 357, 0, 0, 847, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 848, 367, 849, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 850, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 851, 420, 259, 260,
	421, 0, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 0, 431, 432, 0, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 0, 263,
	264, 265, 0, 0, 441, 442, 266, 267, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 450, 0,
	451, 0, 268, 452, 453, 454, 269, 270, 0, 0,
	455, 271, 0, 0, 0, 0, 456, 457, 272, 458,
	459, 460, 1103, 0, 927, 926, 0, 0, 0, 924,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 904, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 478, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 837, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 1102, 234, 840, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 841,
	842, 337, 338, 339, 843, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 906,
	905, 351, 352, 354, 246, 353, 846, 355, 356, 358,
	357, 0, 0, 847, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 851, 420, 259, 260, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 261, 426, 427, 428,
	262, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 439, 440, 0, 263, 264, 265, 0,
	0, 441, 442, 266, 267, 0, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 0, 451, 0, 268,
	452, 453, 454, 269, 270, 0, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 1099,
	0, 927, 926, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 904, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 836, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 478,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	837, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 838, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 1098, 234, 840, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 839, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 841, 842, 337, 338,
	339, 843, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 844, 345, 346, 845, 0, 347,
	348, 0, 0, 349, 0, 350, 906, 905, 351, 352,
	354, 246, 353, 846, 355, 356, 358, 357, 0, 0,
	847, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 848, 367,
	849, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	850, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	851, 420, 259, 260, 421, 0, 430, 422, 423, 424,
	405, 425, 429, 261, 426, 427, 428, 262, 0, 431,
	432, 0, 433, 434, 435, 436, 437, 316, 438, 317,
	439, 440, 0, 263, 264, 265, 0, 0, 441, 442,
	266, 267, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 450, 0, 451, 0, 268, 452, 453, 454,
	269, 270, 0, 0, 455, 271, 0, 0, 0, 0,
	456, 457, 272, 458, 459, 460, 1060, 0, 927, 926,
	0, 0, 0, 924, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 904, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 836, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 478, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 837, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 838, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 1059, 234,
	840, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	839, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 841, 842, 337, 338, 339, 843, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 844, 345, 346, 845, 0, 347, 348, 0, 0,
	349, 0, 350, 906, 905, 351, 352, 354, 246, 353,
	846, 355, 356, 358, 357, 0, 0, 847, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 848, 367, 849, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 850, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 851, 420, 259,
	260, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	261, 426, 427, 428, 262, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 439, 440, 0,
	263, 264, 265, 0, 0, 441, 442, 266, 267, 0,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	0, 451, 0, 268, 452, 453, 454, 269, 270, 0,
	0, 455, 271, 0, 0, 0, 0, 456, 457, 272,
	458, 459, 460, 1057, 0, 927, 926, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 904, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	836, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 837, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 838, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 1056, 234, 840, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 839, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	841, 842, 337, 338, 339, 843, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 844, 345,
	346, 845, 0, 347, 348, 0, 0, 349, 0, 350,
	906, 905, 351, 352, 354, 246, 353, 846, 355, 356,
	358, 357, 0, 0, 847, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 848, 367, 849, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 850, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 851, 420, 259, 260, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 261, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 439, 440, 0, 263, 264, 265,
	0, 0, 441, 442, 266, 267, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	268, 452, 453, 454, 269, 270, 0, 0, 455, 271,
	0, 0, 0, 0, 456, 457, 272, 458, 459, 460,
	920, 0, 927, 926, 0, 0, 0, 924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 904,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 836, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	478, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 837, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 838, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 922, 234, 840, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 839, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 841, 842, 337,
	338, 339, 843, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 844, 345, 346, 845, 0,
	347, 348, 0, 0, 349, 0, 350, 906, 905, 351,
	352, 354, 246, 353, 846, 355, 356, 358, 357, 0,
	0, 847, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 848,
	367, 849, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 850, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 851, 420, 259, 260, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 0, 263, 264, 265, 0, 0, 441,
	442, 266, 267, 0, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 0, 451, 0, 268, 452, 453,
	454, 269, 270, 927, 926, 455, 271, 0, 924, 0,
	0, 456, 457, 272, 458, 459, 460, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	904, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 836, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 478, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 837, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 838,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 840, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 839, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 841, 842,
	337, 338, 339, 843, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 844, 345, 346, 845,
	0, 347, 348, 0, 0, 349, 0, 350, 906, 905,
	351, 352, 354, 246, 353, 846, 355, 356, 358, 357,
	0, 0, 847, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	848, 367, 849, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 850, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 851, 420, 259, 260, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 262,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 0, 263, 264, 265, 0, 0,
	441, 442, 266, 267, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 0, 451, 0, 268, 452,
	453, 454, 269, 270, 927, 926, 455, 271, 0, 0,
	0, 0, 456, 457, 272, 458, 459, 460, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 904, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 836,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 478, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 837, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	838, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 840, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 839, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 841,
	842, 337, 338, 339, 843, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 844, 345, 346,
	845, 0, 347, 348, 0, 0, 349, 0, 350, 906,
	905, 351, 352, 354, 246, 353, 846, 355, 356, 358,
	357, 0, 0, 847, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 848, 367, 849, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 850, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 851, 420, 259, 260, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 261, 426, 427, 428,
	262, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 439, 440, 0, 263, 264, 265, 0,
	0, 441, 442, 266, 267, 0, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 0, 451, 0, 268,
	452, 453, 454, 269, 270, 927, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 904, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	836, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 837, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 838, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 840, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 839, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	841, 842, 337, 338, 339, 843, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 844, 345,
	346, 845, 0, 347, 348, 0, 0, 349, 0, 350,
	906, 905, 351, 352, 354, 246, 353, 846, 355, 356,
	358, 357, 0, 0, 847, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 848, 367, 849, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 850, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 851, 420, 259, 260, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 261, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 439, 440, 0, 263, 264, 265,
	0, 0, 441, 442, 266, 267, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	268, 452, 453, 454, 269, 270, 0, 0, 455, 271,
	572, 0, 202, 0, 456, 457, 272, 458, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	208, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 0,
	431, 432, 207, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 0, 263, 264, 265, 0, 0, 441,
	442, 266, 267, 0, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 0, 451, 0, 268, 452, 453,
	454, 269, 270, 0, 0, 455, 271, 201, 0, 202,
	0, 456, 457, 272, 458, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 463, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 208, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 261, 426, 427, 428, 262, 0, 431, 432, 207,
	433, 434, 435, 436, 437, 316, 438, 317, 439, 440,
	0, 263, 264, 265, 0, 0, 441, 442, 266, 267,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 0, 451, 0, 268, 452, 453, 454, 269, 270,
	202, 0, 455, 271, 0, 0, 0, 0, 456, 457,
	272, 458, 459, 460, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 463,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 208, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	1636, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 261, 426, 427, 428, 262, 0, 431, 432,
	207, 433, 434, 435, 436, 437, 316, 438, 317, 439,
	440, 0, 263, 264, 265, 0, 0, 441, 442, 266,
	267, 0, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 0, 451, 0, 268, 452, 453, 454, 269,
	270, 202, 0, 455, 271, 0, 0, 0, 0, 456,
	457, 272, 458, 459, 460, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	463, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 208,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 430, 422, 423, 424,
	405, 425, 429, 261, 426, 427, 428, 262, 0, 431,
	432, 207, 433, 434, 435, 436, 437, 316, 438, 317,
	439, 440, 0, 263, 264, 265, 0, 0, 441, 442,
	266, 267, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 450, 0, 451, 0, 268, 452, 453, 454,
	269, 270, 475, 0, 455, 271, 0, 0, 0, 0,
	456, 457, 272, 458, 459, 460, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 463, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	478, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 0, 263, 264, 265, 0, 0, 441,
	442, 266, 267, 0, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 0, 451, 0, 268, 452, 453,
	454, 269, 270, 475, 0, 455, 271, 0, 0, 0,
	0, 456, 457, 272, 458, 459, 460, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 463, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 1915, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 1912, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 478, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 1987, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 1918, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 1985, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 1984, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 1917, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 262,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 0, 263, 264, 265, 0, 0,
	441, 442, 266, 267, 0, 443, 444, 445, 446, 0,
	1986, 447, 448, 449, 450, 0, 451, 0, 268, 452,
	453, 454, 269, 270, 475, 0, 455, 271, 0, 0,
	0, 0, 456, 457, 272, 458, 459, 460, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 1915, 286, 221,
	0, 0, 1909, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 1912, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 478, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 1918, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 1908, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 1917, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 261, 426, 427, 428,
	262, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 439, 440, 0, 263, 264, 265, 0,
	0, 441, 442, 266, 267, 0, 443, 444, 445, 446,
	0, 1916, 447, 448, 449, 450, 0, 451, 0, 268,
	452, 453, 454, 269, 270, 0, 0, 455, 271, 578,
	0, 475, 0, 456, 457, 272, 458, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	577, 559, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 562, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 478,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 563,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 564, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 430, 422, 423, 424,
	405, 425, 429, 261, 426, 427, 428, 262, 0, 431,
	432, 0, 433, 434, 435, 436, 437, 316, 438, 317,
	439, 440, 0, 263, 264, 265, 0, 0, 441, 442,
	266, 267, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 450, 0, 451, 0, 268, 452, 453, 454,
	269, 270, 0, 0, 455, 271, 558, 0, 475, 0,
	456, 457, 272, 458, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 559, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 562, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 478, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 563, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 564, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	261, 426, 427, 428, 262, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 439, 440, 0,
	263, 264, 265, 0, 0, 441, 442, 266, 267, 0,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	0, 451, 0, 268, 452, 453, 454, 269, 270, 475,
	0, 455, 271, 0, 0, 0, 0, 456, 457, 272,
	458, 459, 460, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 562, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 478, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 563, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 564, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 261, 426, 427, 428, 262, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 439, 440,
	0, 263, 264, 265, 0, 0, 441, 442, 266, 267,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 0, 451, 0, 268, 452, 453, 454, 269, 270,
	0, 0, 455, 271, 1078, 0, 475, 0, 456, 457,
	272, 458, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 478, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 896, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 261, 426,
	427, 428, 262, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 439, 440, 0, 263, 264,
	265, 0, 0, 441, 442, 266, 267, 0, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 0, 451,
	0, 268, 452, 453, 454, 269, 270, 0, 0, 455,
	271, 915, 0, 475, 0, 456, 457, 272, 458, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 478, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 917, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 896, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 262,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 0, 263, 264, 265, 0, 0,
	441, 442, 266, 267, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 0, 451, 0, 268, 452,
	453, 454, 269, 270, 0, 0, 455, 271, 912, 0,
	475, 0, 456, 457, 272, 458, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 478, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	914, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	896, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 261, 426, 427, 428, 262, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 439,
	440, 0, 263, 264, 265, 0, 0, 441, 442, 266,
	267, 0, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 0, 451, 0, 268, 452, 453, 454, 269,
	270, 0, 0, 455, 271, 908, 0, 475, 0, 456,
	457, 272, 458, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 478, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 910, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 896, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 0, 431, 432, 0, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 0, 263,
	264, 265, 0, 0, 441, 442, 266, 267, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 450, 0,
	451, 0, 268, 452, 453, 454, 269, 270, 0, 0,
	455, 271, 497, 0, 475, 0, 456, 457, 272, 458,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 496, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 478, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 495, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 261, 426, 427, 428,
	262, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 439, 440, 0, 263, 264, 265, 0,
	0, 441, 442, 266, 267, 0, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 0, 451, 0, 268,
	452, 453, 454, 269, 270, 475, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 1895, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 261, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 439, 440, 0, 263, 264, 265,
	0, 0, 441, 442, 266, 267, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	268, 452, 453, 454, 269, 270, 475, 2379, 455, 271,
	0, 0, 0, 0, 456, 457, 272, 458, 459, 460,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 478, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 261, 426,
	427, 428, 262, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 439, 440, 0, 263, 264,
	265, 0, 0, 441, 442, 266, 267, 0, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 0, 451,
	0, 268, 452, 453, 454, 269, 270, 475, 2379, 455,
	271, 0, 0, 0, 0, 456, 457, 272, 458, 459,
	460, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 478, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 2376,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 0, 431, 432, 0, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 0, 263,
	264, 265, 0, 0, 441, 442, 266, 267, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 450, 0,
	451, 0, 268, 452, 453, 454, 269, 270, 475, 0,
	455, 271, 0, 0, 0, 0, 456, 457, 272, 458,
	459, 460, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 478, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 896, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	261, 426, 427, 428, 262, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 439, 440, 0,
	263, 264, 265, 0, 0, 441, 442, 266, 267, 0,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	0, 451, 0, 268, 452, 453, 454, 269, 270, 0,
	0, 455, 271, 1656, 0, 475, 0, 456, 457, 272,
	458, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 261, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 439, 440, 0, 263, 264, 265,
	0, 0, 441, 442, 266, 267, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	268, 452, 453, 454, 269, 270, 0, 0, 455, 271,
	1654, 0, 475, 0, 456, 457, 272, 458, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	478, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 0, 263, 264, 265, 0, 0, 441,
	442, 266, 267, 0, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 0, 451, 0, 268, 452, 453,
	454, 269, 270, 0, 0, 455, 271, 1652, 0, 475,
	0, 456, 457, 272, 458, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 478, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 261, 426, 427, 428, 262, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 439, 440,
	0, 263, 264, 265, 0, 0, 441, 442, 266, 267,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 0, 451, 0, 268, 452, 453, 454, 269, 270,
	475, 0, 455, 271, 0, 0, 0, 0, 456, 457,
	272, 458, 459, 460, 0, 0, 273, 274, 275, 276,
	1629, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 478, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 261, 426, 427, 428, 262, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 439,
	440, 0, 263, 264, 265, 0, 0, 441, 442, 266,
	267, 0, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 0, 451, 0, 268, 452, 453, 454, 269,
	270, 0, 0, 455, 271, 1590, 0, 475, 0, 456,
	457, 272, 458, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 478, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 0, 431, 432, 0, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 0, 263,
	264, 265, 0, 0, 441, 442, 266, 267, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 450, 0,
	451, 0, 268, 452, 453, 454, 269, 270, 0, 0,
	455, 271, 1588, 0, 475, 0, 456, 457, 272, 458,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 478, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 261, 426, 427, 428,
	262, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 439, 440, 0, 263, 264, 265, 0,
	0, 441, 442, 266, 267, 0, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 0, 451, 0, 268,
	452, 453, 454, 269, 270, 0, 0, 455, 271, 604,
	0, 475, 0, 456, 457, 272, 458, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 1152, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 478,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 605, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	601, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 430, 422, 423, 424,
	405, 425, 429, 261, 426, 427, 428, 262, 0, 431,
	432, 0, 433, 434, 435, 436, 437, 316, 438, 317,
	439, 440, 0, 600, 264, 265, 0, 0, 441, 442,
	266, 267, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 450, 0, 451, 0, 268, 452, 453, 454,
	269, 270, 0, 0, 455, 271, 1488, 0, 475, 0,
	456, 457, 272, 458, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 478, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 1487, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	261, 426, 427, 428, 262, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 439, 440, 0,
	263, 264, 265, 0, 0, 441, 442, 266, 267, 0,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	0, 451, 0, 268, 452, 453, 454, 269, 270, 0,
	0, 455, 271, 604, 0, 475, 0, 456, 457, 272,
	458, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 1152, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 605, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 601, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 261, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 439, 440, 0, 600, 264, 265,
	0, 0, 441, 1153, 266, 267, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	268, 452, 453, 454, 269, 270, 0, 0, 455, 271,
	604, 0, 475, 0, 456, 457, 272, 458, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 594, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	478, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 605, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 601, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 1128, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 0, 600, 264, 265, 0, 0, 441,
	442, 266, 267, 0, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 0, 451, 0, 268, 452, 453,
	454, 269, 270, 0, 0, 455, 271, 1096, 0, 475,
	0, 456, 457, 272, 458, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 478, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 1095,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 261, 426, 427, 428, 262, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 439, 440,
	0, 263, 264, 265, 0, 0, 441, 442, 266, 267,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 0, 451, 0, 268, 452, 453, 454, 269, 270,
	0, 0, 455, 271, 1092, 0, 475, 0, 456, 457,
	272, 458, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 478, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 1091, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 261, 426,
	427, 428, 262, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 439, 440, 0, 263, 264,
	265, 0, 0, 441, 442, 266, 267, 0, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 0, 451,
	0, 268, 452, 453, 454, 269, 270, 0, 0, 455,
	271, 1089, 0, 475, 0, 456, 457, 272, 458, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 478, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 1088, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 262,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 0, 263, 264, 265, 0, 0,
	441, 442, 266, 267, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 0, 451, 0, 268, 452,
	453, 454, 269, 270, 0, 0, 455, 271, 1086, 0,
	475, 0, 456, 457, 272, 458, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 478, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	1085, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 261, 426, 427, 428, 262, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 439,
	440, 0, 263, 264, 265, 0, 0, 441, 442, 266,
	267, 0, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 0, 451, 0, 268, 452, 453, 454, 269,
	270, 0, 0, 455, 271, 1082, 0, 475, 0, 456,
	457, 272, 458, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 478, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 1081, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 0, 431, 432, 0, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 0, 263,
	264, 265, 0, 0, 441, 442, 266, 267, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 450, 0,
	451, 0, 268, 452, 453, 454, 269, 270, 475, 0,
	455, 271, 0, 0, 0, 0, 456, 457, 272, 458,
	459, 460, 0, 0, 273, 274, 275, 276, 1070, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 478, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	261, 426, 427, 428, 262, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 439, 440, 0,
	263, 264, 265, 0, 0, 441, 442, 266, 267, 0,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	0, 451, 0, 268, 452, 453, 454, 269, 270, 0,
	0, 455, 271, 1068, 0, 475, 0, 456, 457, 272,
	458, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 1067, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 261, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 439, 440, 0, 263, 264, 265,
	0, 0, 441, 442, 266, 267, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	268, 452, 453, 454, 269, 270, 0, 0, 455, 271,
	1062, 0, 475, 0, 456, 457, 272, 458, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	478, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 0, 263, 264, 265, 0, 0, 441,
	442, 266, 267, 0, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 0, 451, 0, 268, 452, 453,
	454, 269, 270, 0, 0, 455, 271, 1053, 0, 475,
	0, 456, 457, 272, 458, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 478, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 1052,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 261, 426, 427, 428, 262, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 439, 440,
	0, 263, 264, 265, 0, 0, 441, 442, 266, 267,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 0, 451, 0, 268, 452, 453, 454, 269, 270,
	0, 0, 455, 271, 1049, 0, 475, 0, 456, 457,
	272, 458, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 478, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 261, 426,
	427, 428, 262, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 439, 440, 0, 263, 264,
	265, 0, 0, 441, 442, 266, 267, 0, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 0, 451,
	0, 268, 452, 453, 454, 269, 270, 0, 0, 455,
	271, 1045, 0, 475, 0, 456, 457, 272, 458, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 478, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 1047, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 262,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 0, 263, 264, 265, 0, 0,
	441, 442, 266, 267, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 0, 451, 0, 268, 452,
	453, 454, 269, 270, 0, 0, 455, 271, 934, 0,
	475, 0, 456, 457, 272, 458, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 478, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	936, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 261, 426, 427, 428, 262, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 439,
	440, 0, 263, 264, 265, 0, 0, 441, 442, 266,
	267, 0, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 0, 451, 0, 268, 452, 453, 454, 269,
	270, 0, 0, 455, 271, 931, 0, 475, 0, 456,
	457, 272, 458, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 478, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 0, 431, 432, 0, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 0, 263,
	264, 265, 0, 0, 441, 442, 266, 267, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 450, 0,
	451, 0, 268, 452, 453, 454, 269, 270, 0, 0,
	455, 271, 604, 0, 475, 0, 456, 457, 272, 458,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 594, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 478, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 593, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 605, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 595, 402,
	0, 406, 407, 601, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 596, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 261, 426, 427, 428,
	262, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 439, 440, 0, 600, 264, 265, 0,
	0, 441, 598, 266, 267, 0, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 0, 451, 0, 268,
	452, 453, 454, 269, 270, 0, 0, 455, 271, 584,
	0, 475, 0, 456, 457, 272, 458, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 478,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 585, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 430, 422, 423, 424,
	405, 425, 429, 261, 426, 427, 428, 262, 0, 431,
	432, 0, 433, 434, 435, 436, 437, 316, 438, 317,
	439, 440, 0, 263, 264, 265, 0, 0, 441, 442,
	266, 267, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 450, 0, 451, 0, 268, 452, 453, 454,
	269, 270, 0, 0, 455, 271, 580, 0, 475, 0,
	456, 457, 272, 458, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 478, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	261, 426, 427, 428, 262, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 439, 440, 0,
	263, 264, 265, 0, 0, 441, 442, 266, 267, 0,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	0, 451, 0, 268, 452, 453, 454, 269, 270, 0,
	0, 455, 271, 570, 0, 475, 0, 456, 457, 272,
	458, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 261, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 439, 440, 0, 263, 264, 265,
	0, 0, 441, 442, 266, 267, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	268, 452, 453, 454, 269, 270, 0, 0, 455, 271,
	519, 0, 475, 0, 456, 457, 272, 458, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	478, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 430, 422, 423,
	424, 405, 425, 429, 261, 426, 427, 428, 262, 0,
	431, 432, 0, 433, 434, 435, 436, 437, 316, 438,
	317, 439, 440, 0, 263, 264, 265, 0, 0, 441,
	442, 266, 267, 0, 443, 444, 445, 446, 0, 0,
	447, 448, 449, 450, 0, 451, 0, 268, 452, 453,
	454, 269, 270, 475, 0, 455, 271, 0, 0, 0,
	0, 456, 457, 272, 458, 459, 460, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 478, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 430, 422,
	423, 424, 405, 425, 429, 261, 426, 427, 428, 262,
	0, 431, 432, 0, 433, 434, 435, 436, 437, 316,
	438, 317, 439, 440, 0, 263, 264, 265, 0, 0,
	441, 442, 266, 267, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 450, 0, 451, 0, 268, 452,
	453, 454, 269, 270, 475, 0, 455, 271, 0, 0,
	0, 0, 456, 457, 272, 458, 459, 460, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 478, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 2272, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 430,
	422, 423, 424, 405, 425, 429, 261, 426, 427, 428,
	262, 0, 431, 432, 0, 433, 434, 435, 436, 437,
	316, 438, 317, 439, 440, 0, 263, 264, 265, 0,
	0, 441, 442, 266, 267, 0, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 450, 0, 451, 0, 268,
	452, 453, 454, 269, 270, 475, 0, 455, 271, 0,
	0, 0, 0, 456, 457, 272, 458, 459, 460, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 478, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 2270, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	430, 422, 423, 424, 405, 425, 429, 261, 426, 427,
	428, 262, 0, 431, 432, 0, 433, 434, 435, 436,
	437, 316, 438, 317, 439, 440, 0, 263, 264, 265,
	0, 0, 441, 442, 266, 267, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 450, 0, 451, 0,
	268, 452, 453, 454, 269, 270, 475, 0, 455, 271,
	0, 0, 0, 0, 456, 457, 272, 458, 459, 460,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 478, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 2259, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 430, 422, 423, 424, 405, 425, 429, 261, 426,
	427, 428, 262, 0, 431, 432, 0, 433, 434, 435,
	436, 437, 316, 438, 317, 439, 440, 0, 263, 264,
	265, 0, 0, 441, 442, 266, 267, 0, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 450, 0, 451,
	0, 268, 452, 453, 454, 269, 270, 475, 0, 455,
	271, 0, 0, 0, 0, 456, 457, 272, 458, 459,
	460, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 478, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 585, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 430, 422, 423, 424, 405, 425, 429, 261,
	426, 427, 428, 262, 0, 431, 432, 0, 433, 434,
	435, 436, 437, 316, 438, 317, 439, 440, 0, 263,
	264, 265, 0, 0, 441, 442, 266, 267, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 450, 0,
	451, 0, 268, 452, 453, 454, 269, 270, 475, 0,
	455, 271, 0, 0, 0, 0, 456, 457, 272, 458,
	459, 460, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 1501, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 478, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 0, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 430, 422, 423, 424, 405, 425, 429,
	261, 426, 427, 428, 262, 0, 431, 432, 0, 433,
	434, 435, 436, 437, 316, 438, 317, 439, 440, 0,
	263, 264, 265, 0, 0, 441, 442, 266, 267, 0,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 450,
	0, 451, 0, 268, 452, 453, 454, 269, 270, 475,
	0, 455, 271, 0, 0, 0, 0, 456, 457, 272,
	458, 459, 460, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 478, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 1492,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 430, 422, 423, 424, 405, 425,
	429, 261, 426, 427, 428, 262, 0, 431, 432, 0,
	433, 434, 435, 436, 437, 316, 438, 317, 439, 440,
	0, 263, 264, 265, 0, 0, 441, 442, 266, 267,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	450, 0, 451, 0, 268, 452, 453, 454, 269, 270,
	475, 0, 455, 271, 0, 0, 0, 0, 456, 457,
	272, 458, 459, 460, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 478, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 869, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 430, 422, 423, 424, 405,
	425, 429, 261, 426, 427, 428, 262, 0, 431, 432,
	0, 433, 434, 435, 436, 437, 316, 438, 317, 439,
	440, 0, 263, 264, 265, 0, 0, 441, 442, 266,
	267, 0, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 450, 0, 451, 0, 268, 452, 453, 454, 269,
	270, 475, 0, 455, 271, 0, 0, 0, 0, 456,
	457, 272, 458, 459, 460, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 478,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 0, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 0,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 0, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 430, 422, 423, 424,
	405, 425, 429, 261, 426, 427, 428, 262, 0, 431,
	432, 0, 433, 434, 435, 436, 437, 316, 438, 317,
	439, 440, 0, 263, 264, 265, 0, 0, 441, 442,
	266, 267, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 450, 0, 451, 0, 268, 452, 453, 454,
	269, 270, 0, 0, 455, 271, 0, 0, 0, 0,
	456, 457, 272, 458, 459, 460, 1249, 1250, 0, 1282,
	1283, 1284, 1292, 1293, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 1252, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284,
	1292, 1293, 1294, 0, 0, 0, 1251, 0, 0, 0,
	0, 0, 1285, 0, 1271, 0, 0, 0, 0, 1252,
	0, 1268, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1251, 0, 0, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 1268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1274, 1275, 1276, 1277, 0, 0, 0, 0, 0,
	1257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1289, 1299, 0, 1279, 1280, 1281, 0, 1274,
	1275, 1276, 1277, 0, 0, 0, 0, 0, 1257, 0,
	0, 0, 0, 0, 0, 1295, 1296, 0, 0, 0,
	0, 0, 0, 1266, 1267, 0, 0, 0, 0, 0,
	1289, 1299, 0, 1279, 1280, 1281, 1287, 0, 0, 0,
	0, 0, 0, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 1296, 0, 0, 0, 0, 1297,
	0, 1266, 1267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1286, 1287, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1249, 1250,
	0, 1282, 1283, 1284, 1292, 1293, 1294, 1278, 0, 1290,
	0, 0, 0, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 1252, 1273, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 1251, 0,
	0, 0, 0, 0, 0, 0, 1271, 0, 0, 0,
	0, 0, 0, 1268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 1263, 1264,
	1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 2151, 1274, 1275, 1276, 1277, 0, 0, 0,
	0, 0, 1257, 1288, 0, 0, 1263, 1264, 1270, 1269,
	1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256,
	1258, 1259, 0, 0, 1289, 1299, 0, 1279, 1280, 1281,
	2150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1295, 1296, 0,
	0, 0, 0, 0, 0, 1266, 1267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 0,
	0, 0, 0, 0, 0, 1272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293,
	1294, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 1252, 1273, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294, 0,
	0, 1290, 1251, 0, 0, 0, 0, 0, 1285, 0,
	1271, 0, 0, 0, 0, 1252, 0, 1268, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1251, 0, 0, 0, 0, 0, 0, 0, 1271, 0,
	0, 0, 0, 0, 0, 1268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1274, 1275, 1276,
	1277, 0, 0, 0, 0, 0, 1257, 1288, 0, 0,
	1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261,
	1253, 1254, 1255, 1256, 1258, 1259, 0, 0, 1289, 1299,
	2940, 1279, 1280, 1281, 0, 1274, 1275, 1276, 1277, 0,
	0, 0, 0, 0, 1257, 0, 0, 0, 0, 0,
	0, 1295, 1296, 0, 0, 0, 0, 0, 0, 1266,
	1267, 0, 0, 0, 0, 0, 1289, 1299, 0, 1279,
	1280, 1281, 1287, 0, 0, 0, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	1296, 0, 0, 0, 0, 1297, 0, 1266, 1267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1286,
	1287, 0, 0, 0, 0, 0, 0, 1272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 0, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284,
	1292, 1293, 1294, 1278, 0, 1290, 0, 0, 0, 0,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 1252,
	1273, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 1251, 0, 0, 0, 0, 0,
	1249, 1250, 1271, 1282, 1283, 1284, 1292, 1293, 1294, 1268,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 1252, 0, 0, 1298, 0,
	0, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291,
	0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259,
	1251, 0, 0, 0, 2936, 0, 0, 0, 1271, 1274,
	1275, 1276, 1277, 0, 0, 1268, 0, 0, 1257, 1288,
	0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262,
	1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 0, 0,
	1289, 1299, 2876, 1279, 1280, 1281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 1296, 1274, 1275, 1276, 1277, 0,
	0, 1266, 1267, 0, 1257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 1289, 1299, 0, 1279,
	1280, 1281, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	1296, 1286, 0, 0, 0, 0, 0, 1266, 1267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 0, 0, 0, 0, 0, 0, 1272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 0, 0, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284,
	1292, 1293, 1294, 1278, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 1252,
	1273, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293,
	1294, 0, 0, 1290, 1251, 0, 0, 0, 0, 0,
	1285, 0, 1271, 0, 0, 0, 0, 1252, 0, 1268,
	1298, 0, 0, 1288, 0, 0, 1263, 1264, 1270, 1269,
	1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256,
	1258, 1259, 1251, 0, 0, 0, 2825, 0, 0, 0,
	1271, 0, 0, 0, 0, 0, 0, 1268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1274,
	1275, 1276, 1277, 0, 0, 0, 0, 0, 1257, 1288,
	0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262,
	1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 0, 0,
	1289, 1299, 2792, 1279, 1280, 1281, 0, 1274, 1275, 1276,
	1277, 0, 0, 0, 0, 0, 1257, 0, 0, 0,
	0, 0, 0, 1295, 1296, 0, 0, 0, 0, 0,
	0, 1266, 1267, 0, 0, 0, 0, 0, 1289, 1299,
	0, 1279, 1280, 1281, 1287, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1295, 1296, 0, 0, 0, 0, 1297, 0, 1266,
	1267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1286, 1287, 0, 0, 0, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1249, 1250, 0, 1282,
	1283, 1284, 1292, 1293, 1294, 1278, 0, 1290, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 1252, 1273, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1290, 1251, 0, 0, 0,
	0, 0, 1249, 1250, 1271, 1282, 1283, 1284, 1292, 1293,
	1294, 1268, 0, 0, 0, 0, 0, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 1252, 0, 0,
	1298, 0, 0, 1288, 0, 0, 1263, 1264, 1270, 1269,
	1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256,
	1258, 1259, 1251, 0, 0, 0, 2786, 0, 0, 0,
	1271, 1274, 1275, 1276, 1277, 0, 0, 1268, 0, 0,
	1257, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291,
	0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259,
	0, 0, 1289, 1299, 2780, 1279, 1280, 1281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 1296, 1274, 1275, 1276,
	1277, 0, 0, 1266, 1267, 0, 1257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 0, 0, 0,
	0, 0, 0, 1272, 0, 0, 0, 0, 1289, 1299,
	0, 1279, 1280, 1281, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1295, 1296, 1286, 0, 0, 0, 0, 0, 1266,
	1267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 0, 0, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 0, 0, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 1249, 1250, 0, 1282,
	1283, 1284, 1292, 1293, 1294, 1278, 0, 0, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 1252, 1273, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284,
	1292, 1293, 1294, 0, 0, 1290, 1251, 0, 0, 0,
	0, 0, 1285, 0, 1271, 0, 0, 0, 0, 1252,
	0, 1268, 1298, 0, 0, 1288, 0, 0, 1263, 1264,
	1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 1251, 0, 0, 0, 2698, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 1268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1274, 1275, 1276, 1277, 0, 0, 0, 0, 0,
	1257, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291,
	0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259,
	0, 0, 1289, 1299, 2653, 1279, 1280, 1281, 0, 1274,
	1275, 1276, 1277, 0, 0, 0, 0, 0, 1257, 0,
	0, 0, 0, 0, 0, 1295, 1296, 0, 0, 0,
	0, 0, 0, 1266, 1267, 0, 0, 0, 0, 0,
	1289, 1299, 0, 1279, 1280, 1281, 1287, 0, 0, 0,
	0, 0, 0, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 1296, 0, 0, 0, 0, 1297,
	0, 1266, 1267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1286, 1287, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1249, 1250,
	0, 1282, 1283, 1284, 1292, 1293, 1294, 1278, 0, 1290,
	0, 0, 0, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 1252, 1273, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 1251, 0,
	0, 0, 0, 0, 1249, 1250, 1271, 1282, 1283, 1284,
	1292, 1293, 1294, 1268, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 0, 0, 0, 0, 0, 0, 1252,
	0, 0, 1298, 0, 0, 1288, 0, 0, 1263, 1264,
	1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 1251, 0, 0, 0, 2652, 0,
	0, 0, 1271, 1274, 1275, 1276, 1277, 0, 0, 1268,
	0, 0, 1257, 1288, 0, 0, 1263, 1264, 1270, 1269,
	1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256,
	1258, 1259, 0, 0, 1289, 1299, 2624, 1279, 1280, 1281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1295, 1296, 1274,
	1275, 1276, 1277, 0, 0, 1266, 1267, 0, 1257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 0,
	0, 0, 0, 0, 0, 1272, 0, 0, 0, 0,
	1289, 1299, 0, 1279, 1280, 1281, 0, 0, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 1296, 1286, 0, 0, 0, 0,
	0, 1266, 1267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 1249, 1250,
	0, 1282, 1283, 1284, 1292, 1293, 1294, 1278, 0, 0,
	0, 0, 0, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 1252, 1273, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1249, 1250, 0, 1282,
	1283, 1284, 1292, 1293, 1294, 0, 0, 1290, 1251, 0,
	0, 0, 0, 0, 1285, 0, 1271, 0, 0, 0,
	0, 1252, 0, 1268, 1298, 0, 0, 1288, 0, 0,
	1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261,
	1253, 1254, 1255, 1256, 1258, 1259, 1251, 0, 0, 0,
	2446, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	0, 1268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1274, 1275, 1276, 1277, 0, 0, 0,
	0, 0, 1257, 1288, 0, 0, 1263, 1264, 1270, 1269,
	1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256,
	1258, 1259, 0, 0, 1289, 1299, 2419, 1279, 1280, 1281,
	0, 1274, 1275, 1276, 1277, 0, 0, 0, 0, 0,
	1257, 0, 0, 0, 0, 0, 0, 1295, 1296, 0,
	0, 1249, 1250, 0, 0, 1266, 1267, 1292, 1293, 1294,
	0, 0, 1289, 1299, 0, 1279, 1280, 1281, 1287, 0,
	0, 0, 0, 0, 0, 1272, 1252, 0, 0, 1298,
	0, 0, 0, 0, 0, 1295, 1296, 0, 0, 0,
	0, 1297, 0, 1266, 1267, 0, 0, 0, 0, 0,
	0, 1251, 0, 0, 0, 1286, 1287, 0, 0, 1271,
	0, 0, 0, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 0,
	0, 0, 0, 0, 0, 0, 1274, 1275, 1276, 1277,
	0, 0, 0, 0, 0, 1257, 0, 0, 0, 1278,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 1289, 1299, 0,
	1279, 1280, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 1249, 1250, 0, 1282,
	1283, 1284, 1292, 1293, 1294, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 1285, 0, 0, 0, 1272, 0,
	0, 1252, 0, 0, 1298, 0, 0, 1288, 0, 0,
	1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261,
	1253, 1254, 1255, 1256, 1258, 1259, 1251, 0, 0, 0,
	1766, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	0, 1268, 0, 0, 0, 1288, 0, 0, 1263, 1264,
	1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 1278, 0, 2119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1274, 1275, 1276, 1277, 0, 0, 0, 0, 0,
	1257, 3018, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294,
	0, 0, 1289, 1299, 0, 1279, 1280, 1281, 0, 1285,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 1298,
	0, 0, 0, 0, 0, 1295, 1296, 0, 0, 0,
	0, 0, 0, 1266, 1267, 0, 0, 0, 0, 0,
	0, 1251, 0, 0, 0, 0, 1287, 0, 0, 1271,
	0, 0, 0, 1272, 0, 0, 1268, 0, 0, 0,
	1288, 0, 0, 0, 0, 0, 0, 0, 1291, 1297,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 0,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3017, 0, 0, 0, 0, 1274, 1275, 1276, 1277,
	0, 0, 0, 0, 0, 1257, 0, 2199, 0, 1278,
	2198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 1289, 1299, 0,
	1279, 1280, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	1295, 1296, 0, 0, 0, 0, 0, 0, 1266, 1267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 1263, 1264,
	1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 1278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 1249, 1250, 0, 1282, 1283, 1284,
	1292, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 0, 1290, 0, 0, 2092, 0, 1252,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1251, 0, 0, 0, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 1864, 0, 1268,
	0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292,
	1293, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 1863, 2093, 0, 1252, 0,
	1288, 1298, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 1274,
	1275, 1276, 1277, 1251, 0, 0, 0, 0, 1257, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1289, 1299, 0, 1279, 1280, 1281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 1296, 0, 0, 0, 0, 0,
	0, 1266, 1267, 0, 0, 0, 0, 0, 1274, 1275,
	1276, 1277, 0, 0, 1287, 0, 0, 1257, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 1289,
	1299, 0, 1279, 1280, 1281, 0, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 1296, 0, 0, 0, 0, 0, 0,
	1266, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 1278, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1249, 1250, 0,
	1282, 1283, 1284, 1292, 1293, 1294, 1278, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 1252, 1273, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 1251, 0, 0,
	0, 0, 0, 1288, 0, 1271, 1263, 1264, 1270, 1269,
	1265, 1291, 1268, 1262, 1260, 1261, 1253, 1254, 1255, 1256,
	1258, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1274, 1275, 1276, 1277, 0, 0, 0, 0,
	0, 1257, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 0, 0, 1289, 1299, 0, 1279, 1280, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1295, 1296, 0, 0,
	0, 0, 0, 0, 1266, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1252, 1273, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1249,
	1250, 0, 1282, 1283, 1284, 1292, 1293, 1294, 0, 0,
	1290, 1251, 0, 0, 0, 0, 0, 1285, 0, 1271,
	0, 0, 0, 0, 1252, 0, 1268, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1251,
	0, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 1268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1274, 1275, 1276, 1277,
	0, 0, 0, 0, 0, 1257, 1288, 0, 0, 1263,
	1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 0, 0, 1289, 1299, 0,
	1279, 1280, 1281, 0, 1274, 1275, 1276, 1277, 0, 0,
	0, 0, 0, 1257, 0, 0, 0, 0, 2208, 0,
	1295, 1296, 0, 0, 0, 0, 0, 0, 1266, 1267,
	0, 0, 0, 0, 0, 1289, 1299, 0, 1279, 1280,
	1281, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1296,
	0, 0, 0, 0, 1297, 0, 1266, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1286, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292,
	1293, 1294, 1278, 0, 1290, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 2203, 0, 0, 1252, 1273,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2423, 0, 0, 0,
	0, 0, 1290, 1251, 0, 0, 0, 0, 0, 1249,
	1250, 1271, 1282, 1283, 1284, 1292, 1293, 1294, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 1252, 0, 0, 1298, 0, 0,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 1251,
	0, 0, 0, 0, 0, 0, 0, 1271, 1274, 1275,
	1276, 1277, 0, 0, 1268, 0, 0, 1257, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 0, 0, 1289,
	1299, 0, 1279, 1280, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 1296, 1274, 1275, 1276, 1277, 0, 0,
	1266, 1267, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 1289, 1299, 0, 1279, 1280,
	1281, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1296,
	1286, 0, 0, 0, 0, 0, 1266, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2165, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292,
	1293, 1294, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 2149, 0, 0, 1252, 1273,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294,
	0, 0, 1290, 1251, 0, 0, 0, 0, 0, 1285,
	0, 1271, 0, 0, 0, 0, 1252, 0, 1268, 1298,
	0, 0, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 1251, 0, 0, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 1268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1274, 1275,
	1276, 1277, 0, 0, 0, 0, 0, 1257, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 0, 0, 1289,
	1299, 0, 1279, 1280, 1281, 0, 1274, 1275, 1276, 1277,
	0, 0, 0, 0, 0, 1257, 0, 0, 0, 0,
	0, 0, 1295, 1296, 0, 0, 0, 0, 0, 0,
	1266, 1267, 0, 0, 0, 0, 0, 1289, 1299, 0,
	1279, 1280, 1281, 1287, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 1296, 0, 0, 0, 0, 1297, 0, 1266, 1267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1249, 1250, 0, 1282, 1283,
	1284, 1292, 1293, 1294, 1278, 0, 1290, 0, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	1252, 1273, 0, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 1251, 0, 0, 0, 0,
	0, 1249, 1250, 1271, 1282, 1283, 1284, 1292, 1293, 1294,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 1298,
	0, 0, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 1251, 0, 0, 0, 0, 0, 0, 0, 1271,
	1274, 1275, 1276, 1277, 0, 0, 1268, 0, 0, 1257,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 0,
	0, 1289, 1299, 0, 1279, 1280, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 1296, 1274, 1275, 1276, 1277,
	0, 0, 1266, 1267, 0, 1257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 1289, 1299, 0,
	1279, 1280, 1281, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 1296, 0, 0, 0, 0, 0, 0, 1266, 1267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 1249, 1250,
	0, 1282, 1283, 1284, 1292, 1293, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 1252, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1251, 0,
	0, 1273, 0, 0, 0, 0, 1271, 0, 0, 0,
	0, 0, 0, 1268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 0, 0, 1263, 1264, 1270,
	1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255,
	1256, 1258, 1259, 1274, 1275, 1276, 1277, 0, 0, 0,
	0, 0, 1257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1551, 0, 1289, 1299, 0, 1279, 1280, 1281,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 0,
	0, 0, 0, 0, 0, 1266, 1267, 1562, 1547, 1552,
	1535, 1572, 1571, 0, 0, 1537, 1536, 0, 1287, 0,
	0, 0, 1580, 1579, 0, 1272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1573, 0, 1569, 1568, 0, 0, 0, 0,
	0, 0, 0, 0, 1567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 0, 1566,
	1564, 1565, 0, 0, 0, 0, 0, 0, 1273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1546, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 1555, 1550, 1556, 1557,
	1558, 1559, 1560, 0, 1554, 0, 0, 0, 0, 0,
	0, 0, 0, 1577, 1578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1570, 0, 0, 0, 1548,
	1549, 0, 0, 0, 0, 0, 1551, 1288, 0, 0,
	1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261,
	1253, 1254, 1255, 1256, 1258, 1259, 0, 0, 0, 0,
	0, 0, 1563, 0, 0, 0, 1687, 1685, 1686, 1689,
	1688, 1562, 1547, 1552, 1535, 1572, 1571, 0, 0, 1537,
	1536, 0, 0, 0, 0, 0, 1580, 1579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1540,
	1541, 1542, 1543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1561, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1582, 0, 1573, 0, 1569, 1568,
	0, 0, 0, 0, 0, 0, 0, 0, 1567, 0,
	0, 1538, 0, 0, 1574, 1575, 1576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1566, 1564, 1565, 0, 1545, 0, 0,
	0, 0, 1581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1555, 1550, 1556, 1557, 1558, 1559, 1560, 0, 1554, 0,
	0, 0, 0, 0, 0, 0, 0, 1577, 1578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1570,
	0, 0, 0, 1548, 1549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1540, 1541, 1542, 1543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1561, 1544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1538, 0, 0, 1574, 1575,
	1576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1545, 0, 0, 0, 0, 1581,
}
var sqlPact = [...]int{

	5306, -1000, 10, -1000, -1000, -1000, 235, -1000, -1000, -1000,
	-1000, 232, 226, 225, -1000, 220, 217, 216, 215, 208,
	205, 204, 202, 201, 199, 198, -1000, -1000, 195, -1000,
	-1000, -1000, -1000, 194, 193, 190, -1000, 189, 1491, 29545,
	188, 187, 1566, 46809, 1442, 184, 180, -1000, 179, 1308,
	34410, 1069, 1349, -1000, 177, 176, 1513, 46438, 421, 32154,
	1310, 1844, 46061, 29168, 1834, 31777, 45684, -1000, -1000, 1040,
	-1000, -1000, 45307, 174, 173, 155, 154, 145, -1000, 137,
	44930, 130, 129, 127, 125, 123, 120, 118, 117, -1000,
	116, 115, 112, 111, 97, 95, 93, 92, 90, 87,
	86, 84, 81, 78, 70, 68, -1000, 5733, 67, 66,
	65, -1000, 1309, 64, 63, 62, 61, 60, -1000, -1000,
	59, 58, 56, 54, 52, 47, 135, 46, 44, 42,
	41, 38, -1000, 1082, 374, 3193, 11895, 1212, 1208, 1203,
	1196, 1180, 741, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49406, 46809, 37, -10, 36, -1000, 2332, 814, 22336,
	5306, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 34033, 33656, 33279, 27678, 44553, 44176, 9493, 9493,
	932, -1000, -1000, -1000, -1000, -1000, 8, 30658, 46809, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 290, -1000, -1000, -1000, -1000, -1000, 18450, 18036,
	424, -1000, -1000, -1000, 280, -1000, -1000, -1000, -1000, 1254,
	-1000, -1000, -1000, -1000, 43799, 43422, 43045, 27291, 26904, 42668,
	1686, 1681, 42291, -1000, -1000, 41914, -1000, -1000, 2177, 1871,
	1860, 32902, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41543, 41166, 40789, 40412, 40035, 26517, 26130, 586, -1000,
	-1000, -1000, -1000, 23090, -1000, -1000, -1000, -1000, -1000, 35,
	-1000, 34, 33, -1000, 30, 29, 28, 27, 26, 25,
	24, 23, -1000, 22, 18, -1000, 17, 16, -1000, 15,
	14, 1479, 1418, 1484, 39658, 1009, 1399, -15, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 46809, -1000, 18850, -1000, 584,
	-1000, 1786, -1000, 18850, -1000, 1392, 158, 1247, -1000, -1000,
	-1000, 1321, 1036, -1000, -1000, 46809, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2470, 1355, 581, 39281, -1000, 1547, -1000,
	694, 12695, -1000, 901, -1000, 12695, 278, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1807, 2007, 2411, 25743, 1408, 2265, 2130,
	2466, 1487, 2095, 2054, 1994, 1973, 1951, 2464, 1088, 2463,
	996, 838, 2461, 1910, 1900, 2442, 1386, 847, 2460, 2459,
	1882, 1778, -1000, -1000, -1000, -1000, 1056, -1000, -1000, -1000,
	-1000, -1000, -1000, 35894, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1082, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1573, 2200, 2200, 2200,
	2298, 408, 403, -1000, 135, -1000, 1580, -1000, 1328, -1000,
	-1000, -1000, 54491, -1000, -1000, 18850, 18850, 18850, 18850, 18850,
	1209, -1000, -1000, -1000, 619, -1000, 578, 577, 10280, -1000,
	-1000, 2383, -1000, -1000, -1000, 416, -1000, -1000, 18850, -1000,
	277, -1000, -1000, -1000, -1000, 576, 2452, -1000, 813, -1000,
	-1000, -1000, 715, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1851, 531, 530, -1000, 529, 526, -1000, -1000, -1000, 574,
	573, 571, 568, 567, 565, -1000, 1141, -1000, 779, -1000,
	-1000, 779, 779, -1000, 509, 509, 563, 555, 511, -1000,
	-1000, 554, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	550, 509, 549, 548, -1000, -1000, -1000, 545, 713, 672,
	-1000, 544, 540, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1441, -1000, -1000, 1441, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 931, 48293, -1000, -1000, -1000, 2, 46809,
	-1000, 424, 2, -1000, -1000, 537, -1000, 13509, 13509, 13509,
	-1000, -1000, 1388, 18850, -1000, 2014, -1000, 302, -212, 534,
	23467, 667, 667, -1000, 21205, 631, 25356, -1000, 531, 530,
	529, 526, -1000, 275, -1000, -1000, -1000, -1000, -1000, 1362,
	2064, 952, -1000, 1103, 2063, -1000, 1709, 2062, 1100, -1000,
	-1000, 746, 2052, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1339, -1000, -1000, 1481, 2043, -200, 1887, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1465, -1000, 28049, 30658,
	-1, -1000, -1000, -84, -1000, 9108, 54491, -1000, 54491, -1000,
	1777, 46809, 9493, 46809, 46809, -1000, 525, 1549, 1368, -1000,
	-1000, 1709, 1545, -1000, -1000, 728, 1544, -1000, -1000, 1541,
	-1000, 424, -1000, -1000, 38904, 49035, 728, 1538, -1000, -1000,
	-1000, 35894, -1000, 46809, -1000, 46809, -1000, 1035, -1000, 48664,
	140, 2034, -1000, -1000, 140, 2032, -1000, 140, 2029, -1000,
	134, 2016, -1000, -1000, 1324, 2010, -1000, -101, 2005, -1000,
	-1000, -101, 2004, -1000, -1000, 18850, -9, -1000, -1000, -1000,
	814, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38527, 30287,
	46809, 32525, 702, 54491, 2334, 55412, 28049, 54491, 30287, 46809,
	1846, -1000, 38150, 37773, 2179, 693, -1000, -1000, 46809, -1000,
	18850, -1000, 2331, 1497, -30, -1000, -1000, -1000, -1000, -1000,
	1590, 1576, 860, 939, -1000, 12695, 12695, 2126, -1000, 274,
	9493, -1000, -1000, 980, -1000, -1000, -1000, -1000, -1000, 37396,
	-1000, -1000, -1000, 1366, 46809, -1000, -1000, 1831, -1000, 29916,
	46809, -1000, 46809, -1000, 46809, -1000, 46809, -1000, 46809, -1000,
	-1000, -1000, -1000, -1000, 1946, 1214, 1806, -1000, 46809, -1000,
	46809, -1000, -1000, -1000, 1588, -1000, -1000, -1000, 37025, 36648,
	36271, -1000, -1000, 1133, -1000, 974, -1000, -1000, 141, -1000,
	-1000, 1573, -1000, 1365, 1674, 17622, 1641, 18850, 135, -1000,
	-1000, 135, 135, 11481, -1000, -1000, -1000, 46809, -1000, 55178,
	55412, 9493, 945, 18850, 18850, 18850, 18850, 18850, 18850, 18850,
	18850, 18850, 18850, 18850, 18850, 18850, 18850, 18850, 18850, 18850,
	18850, 18850, 18850, 18850, 18850, 18850, 18850, 18850, 18850, 18850,
	18850, 18850, 18850, 18850, 18850, 18850, 18850, 18850, 1857, 18850,
	930, 18850, 18850, 18850, 18850, 1931, -1000, -1000, 1288, 446,
	1305, -1000, 2401, 2401, 2401, 54801, 54801, 444, 619, -1000,
	18850, -1000, 368, 18850, 403, 52508, 6, 9880, -1000, -1000,
	-1000, -1000, 17208, 766, 54491, 8723, 6284, -1000, 2430, 1063,
	1862, 1732, 524, 684, 569, 552, 546, 18850, 18850, 18850,
	18850, 18850, 18850, -1000, -1000, -1000, -1000, -1000, -1000, 2383,
	-1000, 16808, 16394, -1000, 2428, 15980, 15566, -1000, 15152, 20050,
	14738, 944, 943, 940, 18850, 10680, -1000, -30, -1000, 48293,
	-1000, 46809, 2, 2327, 18850, 157, -1000, 53343, -1000, 157,
	157, 523, -16, 54491, 1648, 1646, 22713, 1583, 1229, 1229,
	1229, -1000, 521, 612, 667, 6779, 14324, 520, 667, 667,
	186, 34781, 1217, 34781, 293, 402, 20828, 2014, -1000, -1000,
	46809, 9493, -21, 1145, -1000, 31400, 2223, 2178, 2142, 1030,
	-1000, 2297, 35894, 2313, 368, 2227, 1776, -1000, -1000, 928,
	35894, 1709, -1000, 55412, -1000, 1731, 2293, 1027, 1025, 1027,
	1027, 1032, 35894, 923, 1199, 28049, 2196, 909, -22, 2310,
	368, 2182, 1775, 900, -1000, -1000, 46809, 9493, 2162, 971,
	664, -1, 30658, 46809, 269, -1000, 994, -23, 268, 1655,
	1649, 186, -1000, 31029, 2326, 1995, 46809, -1000, 1709, 1987,
	-1000, 1150, -1000, 1985, 1981, 2325, 1361, 1525, -1000, -1000,
	-1000, 1356, 1524, 897, 1979, 731, 307, 2320, 307, 24602,
	-1000, 46809, -1000, 46809, -1000, -1000, 46809, -1000, 46809, -1000,
	46809, -1000, 46809, 46809, -1000, 46809, 28049, 28049, 28049, -24,
	528, 28791, 898, -72, -1000, 798, 31029, 3093, -31, -1000,
	989, -1000, -1000, -1000, 372, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 779, 519, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 511, 1141, 509, 509,
	509, -1000, -1000, -1000, 713, 672, -1000, -1000, -1000, 779,
	779, -1000, -1000, -180, 1764, -84, 32525, 664, -1000, 664,
	-1000, 1800, -1000, 2235, 701, -38, 834, -30, -1000, 1441,
	-1000, 1074, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2448, -1000, 2424, -1000, -1000,
	2426, -2, -1000, -2, -1000, 9493, -1000, 46809, -1000, -1000,
	-1000, -1000, -1000, -1000, 46809, -1000, 46809, -1000, -1000, -1000,
	-1000, -1000, -1000, 283, -1000, 1798, -1000, 528, 264, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 46809, 46809, 46809,
	-1000, 35894, -1000, -1000, -1000, -1000, 54491, -1000, 420, -1000,
	-1000, 54491, 1073, 1662, -1000, 1662, -4, -1000, 53274, 1635,
	46809, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 691, 849, 849, 917, 917, 917, 917,
	2357, 3346, 3413, 685, 52681, 52681, 52681, 52681, 52681, 52681,
	52681, 52681, 3433, 510, 510, 3433, 3433, 3433, 3433, 3433,
	510, 510, 510, 52681, 52681, 52681, 54801, 54745, 3963, 18850,
	18850, 892, 1285, 446, 3963, 18850, 3963, 3963, 3963, 3963,
	-1000, 2243, -1000, -1000, -1000, -1000, 1762, 508, 20050, 20050,
	-1000, -1000, -1000, 10280, 18850, -1000, -1000, -1000, -1000, 500,
	18850, -1000, 52546, -234, 401, -128, -1000, 18850, 611, -87,
	-1000, 1042, -1000, 18850, 263, -1000, -1000, -34, 18850, 18850,
	18850, 397, -1000, 395, -1000, 891, -1000, 888, 884, 882,
	-1000, 495, 1213, 494, 493, 18850, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 54453, 50194, 50156, 5826, 4996, -39,
	-41, 392, -1000, 1761, -128, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 390, -1000, 389, -44, -1000, -46, -1000, 388,
	-1000, 54199, -128, 387, 5249, -1000, 20050, 20050, 20050, 10280,
	492, 384, -1000, 52991, -1000, 690, 689, 687, 54143, 13910,
	13910, 13910, 383, 53889, 18850, -128, -1000, -1000, 491, -47,
	731, 13509, 21959, 9493, -1000, 731, 731, 18850, -1000, 18850,
	22713, 22713, 1396, 1645, 22713, -1000, -1000, -1000, -1000, 34781,
	496, 667, 34781, -1000, 2383, 1597, -1000, 381, -1000, 13109,
	34781, 34781, 9493, -1000, -1000, 46809, 424, -1000, -1000, 667,
	380, 255, 1318, 46809, 46809, 46809, -1000, -1000, 1516, 47922,
	1511, 55412, 46809, -1000, -1000, 488, 487, 1619, 1615, 46809,
	46809, 47551, 47180, 46809, 1218, 1514, 1260, 368, -1000, 682,
	485, 46809, 1095, -1000, -1000, -1000, -1000, -1000, 46809, -1000,
	-1000, 2422, -1000, 1027, -1000, -1000, -1000, 1027, 1709, 1085,
	46809, 28049, 745, 680, 46809, 1146, 368, -1000, 676, 484,
	9493, 1144, -1000, 675, 46809, 1717, -1000, 1464, -1000, -1000,
	8338, -1000, -1000, 9493, 1482, 1482, 379, -5, -1000, -1000,
	-1000, -1000, -1000, -1000, 1680, 46809, 551, 46809, 368, 46809,
	107, 46809, 28049, 28049, 28049, 368, 46809, 1976, 46809, 1952,
	2011, 647, 46809, 1233, 18850, 1138, -1000, 23844, 789, 46809,
	1072, 94, -1000, -1000, -1000, 32, 46809, -1000, -1000, 140,
	140, 140, -1000, 134, 1324, -1000, -101, -101, -1000, -1000,
	-1000, 46809, 2361, 28049, -52, -1000, 802, 904, 885, -1000,
	55412, -1000, 616, 887, -1000, 2415, 482, 2383, -1000, 726,
	35523, 46809, 89, -1000, 734, 1443, -1000, 12695, 12695, -1000,
	1441, -1000, -1000, 1117, -1000, 1123, -1000, -1000, -1000, -1000,
	12695, -1000, -1000, -84, -84, -1000, -1000, 185, -1000, 46809,
	-1000, -1000, -1000, -1000, 1073, -1000, 18850, -1000, -1000, -1000,
	11481, -1000, -1000, -1000, 46809, -211, 18850, 3963, 3963, 18850,
	20050, 20050, -1000, 3963, -1000, -1000, -1000, -1000, -1000, 1759,
	480, 18850, 55412, 5118, 4685, -53, 3433, 18850, -6, -1000,
	18850, -1000, 52254, -1000, -1000, 512, 2017, -1000, 18850, 53851,
	7953, 375, 12295, -1000, 53597, -49, -49, -1000, 2443, 1574,
	1215, 1143, 1039, 2400, -1000, 24979, 732, 1233, 52198, 55178,
	55412, 18850, 18850, 18850, -1000, -1000, 2383, -1000, 18850, -1000,
	-1000, -1000, -1000, -1000, 1755, 18850, -1000, 55178, 55412, 20050,
	20050, 20050, 20050, 20050, 20050, 20050, 20050, 20050, 20050, 20050,
	20050, 20050, 20050, 20050, 20050, 20050, 20050, 20050, 1586, 20050,
	2388, 2388, 2388, -8, 18850, -1000, 1797, 1755, 18850, 18850,
	-1000, -1000, -1000, 55412, 370, 364, 363, -1000, 18850, -128,
	3093, -1000, 1729, -1000, -65, -1000, 2014, -1000, -1000, 1729,
	1729, -54, 54491, -1000, 1396, -1000, 479, 18850, 22713, -1000,
	608, -1000, -69, -1000, 34781, -1000, 591, -235, -1000, 660,
	-1000, 667, 362, -1000, -1000, -1000, 254, 424, -1000, 34781,
	-1000, 9493, -1000, -1000, 881, 880, -1000, 1920, -1000, 1504,
	-1000, 793, -1000, 1122, 18850, 21582, 478, 477, 1238, -1000,
	1912, 1324, 1898, 1324, -1000, -1000, 697, -1000, 476, 475,
	-1000, -21, 1142, -1000, 24231, 18850, -1000, 879, -1000, -1000,
	-1000, 1709, 877, -1000, -1000, 1140, 24231, -1000, -1000, -1000,
	24231, 18850, -1000, -22, 873, 24231, 1886, 726, 1747, 984,
	-1000, -1000, -1000, -1000, -1000, -1000, 1689, 31029, 46809, 471,
	46809, 470, -1000, -1000, 469, 46809, 1709, -1000, 728, -1000,
	-1000, 797, 9493, 468, 9493, 1598, 647, 28420, -1000, 728,
	1674, 54491, -1000, 1072, 11080, 2149, -70, -1000, 241, -1000,
	-1000, -1000, 731, 24602, 22713, 18850, 2458, -75, -1000, -1000,
	-1000, -1000, -1000, -84, 1243, 2132, 2132, -1000, 2398, -1000,
	590, 361, 2383, 360, -1000, -29, 467, -1000, 655, 653,
	-84, 46809, -1000, 1236, 9493, 46809, 46809, 9493, 46809, -1000,
	-1000, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1251,
	51944, -1000, 2176, 9493, 2321, 3963, 4401, 3980, 18850, 55412,
	55028, -77, 18850, 18850, -1000, 356, 18850, 588, 54491, -1000,
	-1000, -1000, 54491, 18850, 237, -1000, 2435, 18850, 353, 351,
	350, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 349,
	-1000, -1000, 49777, -1000, 18850, 348, -1000, 345, 341, 610,
	51906, 51652, 340, 54491, 1797, 54491, -1000, -1000, 729, 729,
	1013, 1013, 1013, 1013, 2388, 257, 320, 700, 718, 718,
	718, 862, 566, 566, 718, 718, 718, 1743, 1529, 466,
	5300, 18850, 337, -1000, -1000, 54491, 54491, 334, -1000, -1000,
	-1000, -128, 331, 1724, 2291, -1000, 22713, 1724, 1724, -1000,
	-1000, 46809, 54491, -1000, -212, -1000, 2383, -1000, -1000, 1597,
	-1000, 7178, 34781, 667, 9493, -1000, -1000, 136, 46809, 46809,
	46809, 1894, -1000, 3954, -1000, 51596, -88, -1000, 2262, 2262,
	18850, 186, -1000, -1000, 465, 21582, 46809, -1000, 1644, 1690,
	827, 46809, -1000, 46809, -1000, -1000, 46809, 46809, 46809, 46809,
	46809, -1000, 457, -91, 46809, 46809, 28049, -1000, -1000, -94,
	9493, -1000, 2157, -1000, 28049, 938, 1146, 1696, -1000, 456,
	21582, 455, 46809, 31029, 2319, -1000, -1000, -1000, 453, 1735,
	1268, 21582, 1264, 1609, 647, 28420, -1000, 897, 1072, -1000,
	-1000, -37, -1000, 515, 368, 46809, 2457, 1233, -1000, -59,
	54491, -1000, 652, -1000, 2108, -1000, 2105, 570, -1000, -1000,
	322, -1000, 35152, 35152, 28049, 28049, -84, 1400, -1000, -1000,
	1197, 1371, -1000, -1000, -1000, -1000, 2176, 18850, 18850, 55028,
	-96, -1000, 3963, 3963, -1000, 51342, -1000, 54491, 7568, -1000,
	53597, -1000, -1000, -1000, -1000, 1201, -1000, 51304, -1000, -1000,
	-1000, 18850, -1000, -1000, -1000, -1000, 20050, 1742, 450, 55412,
	51050, -1000, -1000, -1000, 692, 18850, 18850, 2014, 692, 692,
	-99, 667, -1000, -1000, -1000, 2383, -1000, 34781, 136, 9493,
	-1000, -1000, -1000, 46809, -1000, 46809, -1000, 9493, 46809, 1736,
	1478, -1000, -1000, 1602, 447, 20050, 46809, 740, -1000, 1250,
	21582, 2176, 9493, 2176, 50994, 6284, -109, -110, 1475, -1000,
	1471, 18850, -1000, 55412, 1324, 1324, -118, -126, -1000, 868,
	859, 18850, 853, -1000, -1000, -1000, 852, -1000, 671, -101,
	24231, -1000, -1000, 1205, 21582, -129, 21582, -131, 319, 368,
	21582, -1000, 46809, -132, 46809, -1000, 647, 28420, -1000, 2011,
	-1000, 2082, 46809, 2141, -1000, -1000, -1000, 1674, 446, 445,
	443, -1000, -1000, -1000, -140, -1000, -1000, -111, -1000, 730,
	727, -1000, -1000, -1000, 9493, 958, -1000, 3963, 3963, -1000,
	-1000, -1000, -1000, 304, 1233, 2279, -1000, 50740, 3510, 20050,
	55412, -141, -1000, -1000, 46809, 54491, -128, -1000, -1000, -1000,
	34781, 547, -1000, -1000, 2172, -1000, -1000, -1000, 46809, 1498,
	-1000, -1000, 18850, 5300, 442, 18850, -1000, 1689, 440, -1000,
	-1000, -1000, -1000, -1000, -1000, 2262, -34, -1000, 1116, -1000,
	-1000, 54491, 2246, -1000, -1000, 439, 437, 46809, 46809, -49,
	432, 431, 24231, -1000, 46809, -142, 1250, -147, -1000, 1689,
	-1000, -150, 797, -1000, 430, 28420, -1000, 1598, 950, -155,
	46809, 1072, -1000, 28049, 28049, -1000, 1400, -1000, 46809, -1000,
	46809, -1000, 46809, -1000, 1093, 18850, -1000, 3510, -156, -1000,
	-121, -1000, 2318, -1000, -1000, -1000, -1000, 1891, 50702, 1577,
	46809, 50448, 1146, 46809, 2176, 300, 46809, 796, 9493, 1197,
	1197, -1000, -1000, 297, 18850, 18850, -1000, 428, -1000, 1689,
	1250, 1146, 1250, 427, 21582, -1000, 1609, 1023, -1000, 731,
	-1000, -1000, -157, -158, -1000, -163, -165, -1000, 295, 19650,
	19650, -128, -1000, 46809, 425, 1875, -1000, 1257, 1206, 294,
	825, -1000, -168, -1000, -1000, 424, -1000, 18850, -1000, -171,
	-1000, 788, -173, -1000, 787, 2435, -178, -185, 46809, 1146,
	1689, -1000, 1689, 21582, -187, -1000, 24602, -1000, 726, 726,
	-1000, -1000, -1000, -1000, -1000, 20435, 1306, 1062, 52856, -1000,
	-1000, -1000, 46809, -1000, 1262, 1259, 1076, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1577, 54491, -1000, 1197, 1695, -1000,
	1197, 1739, -1000, -1000, -190, -1000, 1146, 1146, -192, -1000,
	-193, -1000, -1000, 2341, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2093, -1000, 811, 1452, 1452, 1257, -1000, 419, -1000,
	417, 1312, -1000, -1000, 1250, -1000, 19250, -1000, 2359, -1000,
	-1000, 1596, -1000, -1000, 18850, 18850, -1000, -1000, -1000, 1689,
	-1000, -1000, -1000, -1000, -197, -198, 1146, 1146, 843, -1000,
	-1000, 413, 18850, -209, 1146, -1000,
}
var sqlPgo = [...]int{

	0, 2898, 2896, 1872, 2895, 2283, 2892, 2890, 2889, 2886,
	2883, 2279, 2882, 2879, 2877, 2876, 2872, 2870, 2860, 2859,
	2857, 2853, 2852, 2848, 2846, 2844, 2843, 2842, 2837, 2835,
	2834, 2833, 2274, 2832, 2263, 2829, 2828, 2826, 2825, 2822,
	2821, 2816, 11, 2813, 2811, 2810, 2808, 2257, 2807, 2806,
	2231, 2804, 2802, 2226, 2799, 2793, 2202, 2191, 2790, 2784,
	2189, 2777, 2774, 2182, 2773, 2124, 2771, 2770, 2121, 2769,
	92, 103, 2110, 2768, 2767, 2105, 2102, 2067, 2766, 2054,
	2765, 2763, 1980, 1963, 2758, 118, 2756, 2755, 2750, 2747,
	1959, 1957, 2746, 2744, 2740, 180, 2739, 1930, 2738, 2737,
	2735, 2734, 2733, 2732, 2729, 2728, 2727, 2722, 2719, 2718,
	2716, 2715, 2709, 2708, 2705, 2704, 2700, 2699, 2698, 2695,
	2694, 2693, 2692, 2691, 178, 111, 2687, 2685, 1928, 1907,
	2683, 2681, 47, 42, 19, 59, 264, 166, 4039, 164,
	2679, 2677, 2676, 2675, 2674, 2671, 21, 120, 113, 110,
	109, 2669, 147, 2667, 2665, 49, 29, 16, 15, 74,
	2664, 2663, 2662, 1775, 76, 2658, 2654, 172, 183, 2647,
	849, 24, 69, 75, 88, 140, 57, 2646, 93, 9,
	2644, 116, 237, 2643, 56, 28, 14, 3363, 55, 83,
	78, 176, 148, 146, 145, 122, 651, 2642, 169, 84,
	138, 2635, 2633, 2631, 54, 137, 18, 17, 117, 8,
	2626, 1, 2622, 3, 2621, 2617, 2610, 2609, 52, 102,
	96, 27, 2608, 190, 250, 135, 2607, 150, 2606, 68,
	170, 139, 355, 99, 2604, 70, 13, 71, 2603, 2602,
	89, 161, 2601, 31, 114, 79, 91, 175, 154, 90,
	149, 152, 2600, 2599, 2597, 127, 2595, 128, 104, 2594,
	2593, 108, 22, 2592, 38, 151, 33, 2591, 2589, 100,
	2588, 142, 2583, 2582, 177, 105, 126, 34, 46, 82,
	2, 157, 95, 61, 53, 2581, 1772, 2655, 1779, 23,
	2580, 101, 62, 35, 77, 94, 167, 36, 2571, 2570,
	160, 2562, 2560, 2559, 2558, 2553, 125, 2552, 2546, 2545,
	86, 136, 159, 2543, 97, 30, 213, 143, 155, 171,
	123, 2541, 129, 98, 134, 2540, 50, 2539, 1328, 2538,
	132, 2536, 2535, 2534, 2532, 301, 2531, 2530, 2529, 1061,
	2528, 87, 2527, 130, 124, 133, 65, 115, 158, 153,
	112, 2525, 131, 32, 2524, 144, 20, 0, 3165, 3109,
	2518, 141, 85, 2516, 2510, 2509, 2508, 25, 5, 43,
	45, 6, 4, 48, 41, 72, 2507, 2506, 80, 106,
	2504, 182, 156, 2503, 2499, 2498, 37, 2496, 10, 2493,
	7, 2487, 2486, 12, 26, 2485, 2484, 168, 2483, 2482,
	2481, 2328, 2480, 173, 2478, 2477, 2476, 2000, 2475, 2474,
	39, 121,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 403, 403, 27, 13, 21,
	19, 19, 28, 17, 17, 24, 24, 148, 148, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 402, 402, 150, 150,
	149, 145, 145, 152, 152, 152, 154, 154, 151, 151,
	144, 144, 32, 32, 83, 83, 83, 135, 76, 76,
	76, 355, 355, 356, 356, 131, 131, 132, 132, 132,
	132, 133, 133, 134, 134, 134, 45, 34, 34, 34,
	34, 34, 35, 35, 36, 36, 43, 43, 125, 125,
	46, 46, 46, 46, 46, 46, 46, 46, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 56, 56, 57, 57, 58, 58, 58, 58, 58,
	58, 59, 59, 59, 59, 59, 59, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 66, 66, 66,
	67, 67, 67, 64, 64, 64, 62, 62, 62, 61,
	61, 61, 65, 65, 65, 63, 63, 63, 231, 231,
	68, 68, 68, 68, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 325, 325,
	69, 69, 298, 298, 72, 72, 256, 256, 73, 73,
	73, 73, 73, 74, 74, 74, 74, 84, 84, 84,
	84, 401, 401, 225, 225, 167, 167, 167, 167, 79,
	79, 79, 79, 80, 80, 80, 81, 81, 130, 130,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	37, 37, 37, 38, 38, 39, 39, 40, 40, 41,
	41, 42, 42, 42, 42, 42, 91, 91, 91, 93,
	90, 90, 90, 92, 92, 92, 92, 94, 94, 95,
	95, 95, 95, 95, 95, 96, 96, 349, 349, 234,
	234, 347, 347, 348, 348, 202, 202, 202, 202, 202,
	203, 203, 203, 354, 354, 354, 354, 354, 354, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	115, 115, 115, 124, 124, 124, 124, 124, 124, 124,
	117, 117, 108, 108, 98, 98, 104, 104, 104, 104,
	104, 99, 99, 105, 105, 107, 107, 109, 109, 109,
	109, 109, 109, 100, 100, 100, 100, 111, 111, 111,
	111, 110, 110, 120, 120, 120, 120, 120, 120, 120,
	313, 313, 116, 116, 116, 116, 119, 119, 119, 119,
	114, 114, 114, 118, 118, 121, 121, 121, 121, 101,
	101, 102, 102, 103, 103, 122, 122, 113, 113, 123,
	123, 123, 123, 123, 123, 123, 112, 112, 112, 404,
	404, 106, 399, 399, 397, 397, 397, 397, 397, 397,
	397, 398, 398, 400, 400, 77, 77, 51, 51, 52,
	52, 204, 204, 205, 205, 279, 279, 279, 279, 206,
	206, 153, 153, 153, 209, 210, 210, 207, 207, 208,
	208, 208, 212, 212, 211, 214, 214, 213, 278, 365,
	365, 366, 366, 366, 366, 366, 366, 366, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 363, 363,
	363, 364, 361, 361, 362, 362, 362, 362, 405, 405,
	277, 277, 218, 218, 368, 368, 368, 368, 369, 369,
	369, 369, 369, 372, 371, 370, 370, 370, 370, 370,
	309, 309, 309, 55, 55, 55, 245, 245, 244, 244,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 127, 127, 53, 53, 53, 159, 159,
	50, 50, 50, 54, 54, 49, 49, 49, 49, 49,
	262, 262, 260, 260, 223, 223, 315, 315, 315, 171,
	171, 146, 146, 146, 20, 22, 22, 16, 16, 16,
	16, 16, 16, 29, 29, 30, 30, 26, 26, 261,
	261, 263, 263, 78, 78, 82, 82, 88, 88, 126,
	126, 126, 126, 126, 126, 126, 33, 33, 33, 33,
	44, 44, 44, 44, 86, 408, 408, 408, 87, 87,
	407, 407, 166, 166, 166, 166, 168, 168, 274, 274,
	275, 275, 409, 409, 276, 276, 276, 161, 160, 162,
	162, 48, 48, 48, 155, 155, 156, 156, 157, 157,
	158, 158, 410, 410, 75, 75, 75, 129, 129, 198,
	198, 271, 271, 271, 219, 219, 176, 176, 273, 273,
	272, 272, 272, 243, 243, 243, 128, 128, 228, 228,
	236, 236, 237, 237, 321, 321, 238, 85, 85, 138,
	138, 136, 136, 136, 136, 136, 136, 137, 137, 137,
	139, 139, 139, 139, 139, 139, 139, 142, 142, 142,
	142, 143, 143, 143, 141, 141, 379, 379, 379, 381,
	381, 382, 378, 378, 380, 380, 406, 406, 247, 247,
	247, 216, 217, 215, 215, 221, 221, 220, 222, 222,
	314, 314, 314, 241, 241, 241, 241, 266, 266, 264,
	264, 265, 265, 267, 267, 268, 268, 268, 269, 269,
	270, 270, 240, 240, 294, 294, 140, 140, 140, 227,
	227, 227, 229, 229, 284, 284, 284, 285, 285, 283,
	283, 283, 283, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 395, 395, 395, 396,
	396, 312, 312, 317, 317, 317, 317, 317, 317, 310,
	310, 311, 311, 322, 323, 323, 250, 250, 250, 250,
	248, 248, 249, 249, 318, 318, 318, 318, 242, 242,
	319, 319, 319, 280, 280, 326, 326, 326, 341, 341,
	226, 226, 226, 336, 336, 327, 327, 327, 327, 327,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 330, 330, 330, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 340, 340, 340, 340, 340, 331, 331,
	337, 338, 332, 333, 339, 339, 339, 339, 343, 343,
	334, 334, 334, 334, 334, 334, 334, 335, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 258, 258, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 288, 288, 288, 288, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 373,
	373, 373, 373, 373, 373, 373, 373, 376, 376, 377,
	377, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 383, 383, 384, 384, 386, 386, 387,
	387, 388, 389, 389, 389, 390, 391, 391, 385, 385,
	392, 392, 392, 393, 393, 394, 394, 394, 394, 394,
	300, 300, 301, 302, 308, 308, 308, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 169, 169, 169, 169, 169, 233, 233,
	232, 232, 297, 297, 295, 295, 299, 299, 251, 251,
	342, 342, 342, 342, 342, 342, 342, 252, 252, 252,
	259, 253, 253, 254, 254, 254, 254, 254, 291, 292,
	255, 255, 255, 293, 293, 303, 307, 307, 306, 305,
	305, 304, 304, 281, 281, 282, 282, 239, 239, 411,
	411, 235, 235, 320, 320, 320, 320, 200, 200, 230,
	230, 199, 199, 193, 193, 194, 194, 194, 194, 224,
	224, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 344, 344, 344, 345, 346, 296, 186, 185,
	173, 174, 184, 183, 182, 172, 175, 179, 180, 181,
	177, 178, 189, 188, 187, 324, 195, 195, 196, 196,
	196, 197, 197, 197, 197, 170, 170, 190, 190, 191,
	192, 192, 163, 163, 163, 164, 164, 165, 165, 353,
	353, 351, 351, 351, 352, 352, 352, 352, 350, 350,
	350, 350, 350, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 1, 1, 5, 7, 7,
	7, 10, 7, 4, 12, 4, 12, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 3,
	3, 3, 6, 4, 3, 1, 2, 1, 1, 3,
	1, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 2, 5, 6, 2, 1, 12, 12,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 7, 3, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 3,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 3, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 5, 6, 5,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 2, 3, 2, 3, 7,
	7, 8, 10, 7, 4, 5, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 2, 8, 11, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 4, 7, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 7, 3, 1, 0, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 6, 3, 13, 16, 9, 12, 4,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 7, 3, 4, 3,
	4, 3, 4, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	5, 2, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 414, -4, -32, -34, -45, -43,
	-46, -73, -57, -58, -59, -72, -68, -74, -75, -76,
	-77, -69, -83, -82, -84, -88, -37, -85, -78, -79,
	-89, -97, -126, -127, -128, -129, -5, -11, 25, 36,
	-35, -36, 50, 76, 64, -53, -50, -47, -56, 78,
	99, -380, 103, -60, -63, -65, 107, 114, 119, 142,
	151, 250, 257, 278, 280, 282, 291, -39, -38, 115,
	-136, -138, 276, -80, -81, -90, -91, -92, -93, -130,
	309, -98, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, 312, -33, -44,
	-87, -86, 356, -6, -7, -8, -9, -10, -12, -22,
	-48, -49, -51, -52, -54, -55, -379, -61, -62, -64,
	-66, -67, -139, -137, 411, 277, 365, 37, 321, 65,
	110, 286, 20, -14, -18, -15, -17, -19, -16, -23,
	-27, -25, -24, -26, -28, -29, -30, -31, -20, -21,
	-13, 382, 390, -142, -140, -141, -143, 298, 373, 334,
	415, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 2, 334, 376, 299, 366, 92, 163, 262, 248,
	-397, 2, 4, -359, -357, -194, -193, 334, 92, 30,
	38, 39, 40, 41, 43, 44, 47, 48, 54, 55,
	56, 59, 94, 96, 97, 113, 120, 121, 131, 132,
	133, 144, 146, 154, 155, 158, 168, 170, 171, 172,
	173, 174, 176, 185, 186, 196, 214, 225, 227, 240,
	244, 254, 256, 264, 288, 301, 302, 303, 304, 315,
	316, 326, 330, 346, 347, 348, 353, 354, 369, 373,
	374, 378, 385, 20, 21, 22, 23, 25, 35, 36,
	37, 42, 46, 49, 50, 51, 58, 63, 64, 65,
	66, 67, 72, 69, 70, 71, 74, 76, 77, 80,
	81, 82, 90, 91, 93, 95, 99, 101, 103, 106,
	107, 109, 114, 115, 118, 116, 340, 342, 117, 119,
	129, 130, 135, 137, 141, 143, 148, 149, 150, 151,
	152, 153, 164, 167, 169, 162, 178, 181, 182, 183,
	189, 190, 191, 194, 193, 198, 199, 202, 203, 206,
	208, 211, 212, 215, 213, 217, 218, 220, 219, 226,
	228, 229, 231, 232, 235, 236, 239, 242, 245, 246,
	247, 248, 249, 250, 251, 253, 255, 257, 259, 260,
	261, 262, 263, 265, 266, 268, 269, 270, 271, 272,
	276, 274, 275, 277, 278, 279, 280, 282, 284, 285,
	286, 287, 289, 310, 311, 323, 291, 292, 293, 294,
	295, 296, 297, 305, 299, 300, 306, 307, 309, 312,
	314, 317, 320, 321, 322, 324, 327, 328, 329, 325,
	319, 332, 333, 335, 336, 337, 338, 339, 341, 343,
	344, 351, 352, 356, 357, 358, 359, 362, 363, 364,
	365, 367, 370, 371, 372, 377, 383, 384, 386, 387,
	388, -192, -163, 404, -191, 414, 414, 2, 182, 261,
	-187, -190, -191, -192, -163, 4, -357, -359, 92, 233,
	414, 414, 414, 2, 334, 322, 299, 366, 284, 376,
	-260, 178, 92, 361, -163, 257, 24, 2, 101, 167,
	364, 363, 24, 253, 300, 336, 338, 2, 414, 414,
	2, 376, 299, 334, 163, 92, 366, 284, -181, 2,
	-163, -71, 2, 411, -70, -5, -47, -56, -60, -72,
	-68, -11, -32, -34, -53, -50, -57, -63, -65, -76,
	-75, -77, -79, -83, -82, -85, -90, -91, -97, -128,
	-129, 78, 25, 107, 309, 115, -401, -225, 2, 24,
	-167, -163, 78, 142, 298, 334, 2, 182, 2, -181,
	2, -397, 2, 182, 2, -401, -225, 23, 2, -163,
	2, 295, 312, -168, 2, 291, -163, 414, 414, 414,
	414, 414, 414, 203, 58, 288, 306, -95, 352, -94,
	346, 293, -96, -349, 2, 215, -163, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 2, -124, 306, 322, 149, 36, 58, 24, 63,
	93, 143, 163, 164, 190, 73, 74, 260, 203, 183,
	-313, 117, 307, 335, 294, 332, 352, 78, 367, 285,
	-404, 116, 4, 92, 215, 308, 346, 67, 339, 340,
	414, 414, 414, -406, 2, 334, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, -137, -139, -138,
	414, 414, 414, 414, 414, -220, -221, 360, 175, 112,
	238, -136, -138, 2, -379, -124, 306, 2, 58, 24,
	-347, 2, -286, 233, -288, 402, 403, 397, 221, 389,
	-300, 98, 210, 209, -290, -303, 113, 288, 411, -197,
	-289, 417, 9, -376, -138, 31, -301, -302, 52, -195,
	-163, 7, 8, 5, 6, -170, -328, -296, -335, 355,
	122, 224, -373, -374, -196, 4, -357, -351, -329, -338,
	-333, -334, -336, 42, 48, 47, 343, 214, 301, 302,
	303, 304, 316, 369, 158, 40, 231, 232, 169, 176,
	61, 84, 85, 83, 88, 89, 86, 308, 366, 53,
	30, 154, 225, 155, 59, -375, 106, 39, 41, 43,
	44, 54, 55, 94, 96, 97, 120, 121, 131, 132,
	133, 144, 168, 170, 171, 172, 173, 174, 185, 186,
	196, 227, 244, 254, 264, 315, 326, 330, 346, 347,
	348, 353, 354, 374, -358, -339, 79, 123, 140, 166,
	156, 179, 180, 184, 197, 200, 216, 223, 241, 243,
	283, 313, -407, 2, 352, 352, 2, -407, 2, -407,
	2, -166, 2, 352, 349, -408, 352, 385, -381, 265,
	-382, -181, -381, 414, 414, 416, 414, -215, -216, -217,
	2, 24, 104, 411, 2, -316, 2, 409, -318, -170,
	192, -375, -138, -317, 411, -187, 234, -196, 84, 85,
	88, 89, 4, -163, 61, 210, 209, -3, 2, -318,
	154, -187, 2, -318, 154, 2, -188, 154, -318, -190,
	2, -355, 154, -353, 9, -352, 5, 4, -357, -359,
	-358, 2, -172, -163, 2, -199, 154, -187, -184, -350,
	4, -357, -359, -358, -360, 24, 26, 27, 28, 29,
	31, 32, 33, 34, 45, 52, 53, 57, 60, 62,
	73, 78, 83, 84, 86, 85, 87, 88, 89, 98,
	100, 102, 104, 105, 108, 110, 112, 122, 124, 136,
	138, 139, 142, 145, 147, 157, 163, 165, 175, 177,
	192, 195, 201, 204, 205, 221, 222, 224, 230, 233,
	234, 237, 238, 252, 258, 267, 281, 298, 308, 318,
	331, 334, 345, 349, 350, 355, 360, 361, 366, 368,
	375, 376, 379, 380, 381, 382, -185, -350, 349, 416,
	-230, -193, -194, -224, -163, 413, -286, 2, -286, 2,
	-218, 411, 413, 334, 62, 2, -187, 154, -177, 2,
	-163, -188, 154, 2, -190, -355, 154, 2, -355, 154,
	2, -189, 2, -187, 163, 163, -172, 154, 2, -163,
	24, 139, 2, 177, 2, 177, 2, -319, 2, -318,
	-231, 154, 2, -187, -231, 154, 2, -231, 154, 2,
	-200, 154, 2, -199, -172, 154, 2, -356, 154, 2,
	-355, -356, 154, 2, -256, 411, -325, 2, -324, -352,
	373, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 306, 233,
	349, 416, -187, -286, -298, 411, 139, -286, 233, 139,
	235, 2, 92, 334, 388, 24, -163, 2, 310, 2,
	411, -95, 56, 352, -275, 2, -276, -160, -161, -162,
	181, 259, 263, 388, -347, 349, 394, 139, -347, -234,
	413, -124, 2, 136, 2, 7, 2, -355, 2, 310,
	2, 260, 307, 58, 139, 2, 2, -399, 2, 233,
	139, 2, 139, 2, 139, 2, 139, 2, 139, 2,
	2, 260, 307, 2, 351, 191, 351, 2, 139, 2,
	139, 2, 5, 2, 181, 259, 323, 2, 334, 376,
	299, 2, 2, 139, 2, 139, 388, 2, -242, -318,
	-220, -221, -241, -264, -265, 201, 124, 230, -247, 24,
	104, -247, -247, 46, 412, 412, -124, 310, 2, 10,
	11, 60, 35, 402, 403, 404, 405, 134, 406, 407,
	400, 401, 399, 392, 393, 396, 187, 188, 75, 395,
	394, 68, 207, 290, 125, 126, 127, 128, 273, 159,
	160, 161, 13, 14, 15, 28, 237, 200, 389, 156,
	313, 397, 16, 17, 18, 179, 180, 223, 38, 157,
	-169, -201, -286, -286, -286, -286, -286, 243, -239, -281,
	409, -138, 411, 411, -138, -286, -232, 411, -346, 7,
	-138, -295, 409, -304, -286, 413, 411, 5, 411, 5,
	-383, 383, 136, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 256, -343, 377, -343, -343, -330, 411,
	-330, 411, 411, -331, 411, 411, 411, -330, 411, 411,
	411, 384, 384, 390, 411, 411, -274, -275, -274, 349,
	-168, 416, -381, -218, 411, -235, -320, -286, 404, -235,
	-235, 233, -232, -286, 79, -250, 184, 216, 140, 197,
	283, 166, -346, -71, -283, 417, 411, -170, -375, -138,
	-163, -312, 390, -312, -138, -317, 411, -316, 404, -187,
	411, 413, -148, 274, -147, 22, 25, 107, 371, 118,
	-208, 248, 113, 319, -403, 115, 292, 341, 342, 274,
	113, -244, -246, 32, 90, 218, 245, 49, 152, 209,
	210, 321, 113, 274, 382, 113, 115, 274, -150, 319,
	-403, 115, 292, 274, -149, -208, 113, 417, 115, 228,
	-355, -230, 416, 416, -350, 404, 139, -224, -350, -187,
	-195, -163, -196, 411, -218, 221, 233, -245, -244, 221,
	-159, -378, 382, 221, 221, -218, -174, 154, 2, -164,
	-163, -174, 154, -378, 221, -319, -198, -187, -198, 309,
	-181, 32, -152, 416, 51, 279, 113, -152, 113, -152,
	113, -152, 416, 113, -152, 113, 416, 113, 113, -232,
	412, 416, -397, -224, -167, 78, 411, 32, -297, -326,
	-327, -328, -337, -332, -335, 42, 48, 47, 343, 214,
	301, 302, 303, 304, 316, 369, 158, 40, 231, 232,
	169, 4, 41, -339, 176, 168, 170, 171, 172, 173,
	174, 315, 39, 264, 132, 133, 131, 106, 97, 96,
	227, 44, 43, 94, 346, 347, 348, 185, 186, 55,
	54, 374, 326, -356, -397, -224, 136, -172, 2, -187,
	2, 69, 70, 388, -349, -232, 32, -275, 2, -409,
	416, 199, -203, 206, 220, 148, 234, 386, -354, 5,
	4, -296, -309, 98, 203, -335, 8, 403, -344, 7,
	402, -348, -347, -348, 82, 413, -350, 334, -349, 24,
	311, 2, -187, -400, 136, -398, 284, -397, -187, -187,
	-187, -187, -187, 136, 2, 351, 2, 136, -163, -163,
	199, -187, 2, -189, 2, -188, 2, 334, 163, 334,
	-152, 416, -241, -265, -264, -267, -286, 24, -270, 130,
	217, -286, -288, -137, -137, -137, -222, -314, -286, 258,
	163, -349, -341, -326, -340, 269, 270, 268, 272, 271,
	-326, -186, -350, 346, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, 200,
	156, 313, 38, 157, -286, 349, -286, -286, -286, -286,
	213, 221, 224, 355, 122, 362, 104, 228, -411, 331,
	34, -293, -138, 411, -308, 29, 318, 24, -300, 288,
	411, -281, -286, -282, -233, -232, 412, 416, -233, -299,
	-295, -307, -306, 379, -350, 404, 412, -232, 375, 24,
	104, 404, 2, 7, -257, 387, 212, 95, 150, 211,
	-258, 297, -384, 129, 145, 411, 412, 2, 412, 2,
	412, 2, 412, 2, -286, -286, -286, -286, -286, -232,
	-346, -251, 2, -342, -232, 4, 387, 212, 95, 150,
	211, 297, -251, 2, 7, -232, 2, -232, 2, -252,
	2, -286, -232, -253, -287, -288, 402, 403, 397, 411,
	288, -254, 2, -286, -233, 346, 346, 346, -286, 45,
	195, 350, -255, -286, 139, -232, -168, -382, 32, -232,
	-227, 416, 139, 32, 4, -227, -227, 411, 412, 416,
	184, 184, -316, -250, 184, -248, 241, -248, -248, -395,
	411, 410, -312, -173, 409, 418, -350, -233, 2, 411,
	-312, -312, 413, -311, -310, 32, -181, 239, -311, 412,
	-187, -350, 416, 349, -261, 73, 62, -278, 154, 62,
	-361, -175, 73, -362, -163, 57, 361, 258, 138, -261,
	73, -261, 73, 73, 309, 46, -318, 35, -85, 71,
	139, 349, -318, -246, -326, 90, 209, 210, 46, -345,
	-344, 403, -345, 46, -345, -345, -345, 382, -188, -318,
	349, 249, -355, 71, 349, 416, 35, -85, 71, 139,
	349, -199, -173, 71, 334, -323, -322, 391, -193, -163,
	413, 324, 412, 413, 179, 179, -204, -205, -163, -279,
	-278, -363, -364, -361, 178, 163, 361, 123, 32, 113,
	-224, 113, 249, 113, 113, 32, 233, 221, 233, 221,
	-155, 337, 113, -280, 380, -271, -85, 411, 98, 32,
	-271, -236, -237, -321, -238, -175, 411, -181, -187, -231,
	-231, -231, -199, -200, -172, -355, -356, -356, 412, -71,
	-324, 349, 382, 368, -205, -70, 25, 78, 107, 412,
	416, -226, 31, 409, -257, 411, -343, 411, -134, -322,
	382, 139, -225, -323, -323, 136, 70, 394, 349, 412,
	352, -276, -202, 263, 317, 275, 305, 8, 7, 7,
	416, -350, -187, -224, -224, 306, -71, 136, -71, 413,
	-187, -199, -187, -318, -268, -344, 411, -269, 288, 289,
	416, -146, 33, 102, 189, -187, 388, -286, -286, 349,
	-411, 331, -293, -286, 213, 224, 355, 122, 362, 104,
	228, 139, 411, -287, -287, -232, -286, 411, -232, 410,
	420, 412, -286, 410, 410, 416, -305, -306, 108, -286,
	413, -221, 416, -220, -286, -232, -232, 412, 412, 349,
	349, 349, 349, 411, -389, 242, 411, 411, -286, 32,
	416, 416, 416, 416, 412, 412, 416, 412, 139, 412,
	412, 412, 412, 412, -259, 252, 412, 10, 11, 402,
	403, 404, 405, 134, 406, 407, 400, 401, 399, 392,
	393, 394, 68, 207, 290, 13, 14, 15, 179, 157,
	-287, -287, -287, -232, 411, 412, -291, -292, 139, 136,
	388, 388, 388, 32, -255, -255, -255, 412, 139, -232,
	411, 412, -280, -320, -229, 2, -316, -183, -350, -280,
	-280, -232, -286, -316, -316, -249, 368, 233, 184, -316,
	-310, 412, -396, -346, -312, -311, -346, -285, -284, 137,
	219, 412, -233, 2, -311, -311, -350, -181, -218, -312,
	412, 413, -147, -187, -175, -182, -163, 221, -278, 154,
	-154, 221, -326, -182, 411, 411, 189, 189, -175, -182,
	154, -175, 154, -182, -182, -402, 263, 229, 202, 262,
	222, -148, 274, -85, 388, 411, -189, 274, -195, -345,
	-345, -244, 274, -188, -355, 382, 388, -172, -149, -85,
	388, 411, -173, -150, 274, 388, -187, -131, 153, 228,
	404, -350, -125, 5, 224, -125, 412, 416, 163, -174,
	163, -180, -164, -85, -187, 139, -188, -355, -355, -355,
	-85, -187, 113, -187, 113, -156, 109, -410, 394, -172,
	-221, -286, -243, -273, 281, 233, -219, -176, -175, 373,
	-181, -243, -228, 416, 139, 394, 413, -219, -152, -152,
	-152, -152, -152, -224, 23, -355, 412, -326, 409, 410,
	7, 7, 411, -346, -134, -133, 236, -132, -163, 5,
	-224, 139, -40, 382, 262, 92, 334, 248, 163, -347,
	-347, -275, 359, 66, 263, -347, 306, -71, -163, -269,
	-286, -314, -187, 417, -286, -286, -287, -287, 139, 411,
	-286, -297, 28, 28, 412, -233, 416, -282, -286, 412,
	-295, 110, -286, 345, -350, 404, 412, 375, -221, -221,
	-221, 5, 212, 150, 211, -258, 211, -258, -258, 7,
	-390, -178, 411, -163, 380, -220, 412, -341, -326, -286,
	-286, -286, -346, -286, -291, -286, -341, -326, -287, -287,
	-287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
	-287, -287, -287, -287, -287, -287, -287, 104, 221, 228,
	-287, 416, -233, -292, -291, -286, -286, -326, 412, 412,
	412, -232, -70, -240, 145, -323, 416, -240, -240, 412,
	-249, 411, -286, -316, 410, 412, 416, -311, 410, 416,
	419, 394, -312, 412, 413, -218, -310, -350, 349, 349,
	113, 221, 370, -365, -362, -286, -223, -315, -175, -377,
	411, -163, -373, -374, -170, 411, 411, -145, 107, 309,
	-263, 113, -152, 113, -152, 386, 411, 411, 349, -261,
	73, -289, -170, -232, 349, 349, 249, -289, -289, -232,
	349, -289, 115, -134, 139, 333, -206, 162, -279, -164,
	411, -174, 411, 411, -218, -187, -245, -159, -262, 368,
	-173, 411, -173, -157, 194, -410, -353, -378, -266, -264,
	-243, -235, 222, 72, 412, 416, 413, -280, -237, -229,
	-286, 2, 412, 235, -135, 80, -135, 7, 410, 412,
	-346, 412, 416, 411, 394, 394, -224, 236, -184, -172,
	-187, -185, -199, 234, 412, -146, -173, 28, 28, -286,
	-297, 412, -286, -286, 412, -286, 410, -286, 413, 5,
	-286, 412, 412, 412, 412, -391, -163, -286, 412, 412,
	412, 416, 412, 412, 412, -292, 139, 104, 228, 411,
	-286, 412, 412, 412, -294, 147, 46, -316, -294, -294,
	-224, -283, -346, -284, -173, 409, -311, -312, -350, 413,
	-175, -182, -278, 113, -366, 73, -367, 60, 123, 78,
	221, 224, 361, 258, 57, 98, 267, 32, 412, 412,
	416, -171, 60, -171, -286, 411, -223, -224, 221, 98,
	221, 98, 91, 357, -175, -182, -224, -224, -187, -175,
	-182, 411, 412, -189, -188, -355, 412, -173, 71, -356,
	346, -207, -208, 157, 411, -223, 411, -224, -204, 32,
	411, 141, 233, -223, 233, -158, 193, -410, -353, -155,
	-243, -272, 411, 233, -85, -176, 2, -221, 394, 91,
	91, 410, 412, -132, -133, -355, -355, -41, -42, 163,
	73, 251, -210, -209, 248, 228, -146, -286, -286, 412,
	412, -350, 404, -221, -385, 248, 412, -286, -287, 139,
	411, -297, 412, -386, 381, -286, -232, -386, -386, 412,
	-312, -346, -311, -278, -182, -186, -179, -163, 123, 154,
	224, 189, 411, -287, -187, 411, 2, -277, -405, 77,
	329, -315, -146, -186, -146, 412, -232, 412, 412, 224,
	224, -286, -326, -152, -152, 412, 412, 349, 349, -232,
	349, 349, 388, -289, 246, -223, 412, -223, 412, 412,
	-85, -223, -187, 412, -187, -410, -353, -156, 105, -224,
	73, -266, -293, 411, 411, 412, 416, 24, 411, 24,
	411, -185, 334, 412, -221, 46, 412, -287, -297, 412,
	-387, -388, -178, -311, 410, -367, -179, 221, -286, -165,
	411, -286, -206, 411, -171, -221, 267, -151, 60, 411,
	411, -175, -182, -221, 411, 411, -289, -187, 412, -277,
	412, -206, 412, -262, 411, -353, -157, 363, 222, 412,
	-182, -243, -356, -356, -42, -224, -224, -187, -392, 262,
	289, -232, 412, 416, 32, 113, 412, -368, 208, -163,
	412, -207, -224, -146, 412, -187, -144, 368, -186, -212,
	-211, -209, -214, -213, -209, 412, -232, -232, 411, -206,
	-277, -207, -277, 411, -223, -158, 309, -280, 412, 412,
	412, 412, 412, -393, -394, 38, 358, 82, -286, -393,
	-388, -390, 123, -369, -372, -371, 233, 140, 247, 314,
	412, 328, 378, 412, -218, -286, 412, 416, 373, 412,
	416, 373, 412, 412, -224, -207, -206, -206, -223, 412,
	-236, -134, -134, -394, 255, 135, 288, 255, 135, -179,
	-371, 233, -372, 233, 363, 101, -368, -211, 157, -213,
	139, 412, -207, -207, 412, -280, 28, -370, 218, 279,
	51, 309, -370, -369, 411, 411, -153, 51, 279, -277,
	-394, 21, 224, 98, -232, -232, -206, 412, 412, -207,
	-207, 349, 411, -232, 412, -207,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	177, 179, 0, 0, 0, 190, 192, 194, 195, -2,
	0, 0, 0, 221, 222, 224, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 361, 0,
	827, -2, 0, 339, 341, 350, 352, 354, 356, 357,
	0, 419, 421, 423, 425, 427, 429, 431, 433, 435,
	436, 438, 440, 442, 444, 446, 448, 450, 452, 454,
	456, 458, 460, 462, 464, 466, 468, -2, 739, 741,
	743, 745, -2, 60, 62, 64, 66, 68, 70, 85,
	198, 200, 202, 204, 207, 209, 864, 227, 229, 231,
	233, 235, -2, 876, 0, 0, 0, -2, 0, -2,
	-2, -2, 757, 71, 72, 73, 74, 75, 76, 91,
	92, 93, 94, 95, 96, 78, 80, 81, 87, 88,
	90, 0, 0, 840, 842, 844, 846, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 44, 50, 52, 54,
	58, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, -2, -2, -2, -2, 0, 0, 1484, 1642,
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
	1703, 1704, 1705, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
	1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1641, 1375, 1429, 1378, 1373, 178, 180, 181, 0, 0,
	643, 1414, 1427, 1428, 1429, 1432, 1433, 1434, 1484, 0,
	191, 193, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 318, 1558, 320, 322, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 220, 223, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 317, 315,
	1409, 260, 261, 0, 300, 301, 302, 303, 304, 305,
	307, 264, 266, 268, 269, 271, 273, 275, 277, 279,
	281, 283, 285, 286, 288, 290, 291, 293, 295, 296,
	298, 703, 0, 0, 0, 0, 0, 332, 326, 331,
	333, 335, 336, 337, 338, 0, 160, 0, 576, 313,
	311, 0, 156, 0, 736, 0, 332, 1456, 330, 737,
	738, 0, 0, 733, 734, 1587, 767, 340, 342, 351,
	353, 355, 358, -2, -2, 1687, -2, 381, -2, 389,
	1696, 1589, 392, 0, 394, -2, 397, 420, 422, 424,
	426, 428, 430, 432, 434, 437, 439, 441, 443, 445,
	447, 449, 451, 453, 455, 457, 459, 461, 463, 465,
	467, 469, 470, 0, 0, 0, 0, 0, 474, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 473, 475, 476, 477, 0, 520, 559, 560,
	740, 742, 744, 0, 684, 866, 61, 63, 65, 67,
	69, 199, 201, 203, 205, 208, 210, -2, 838, 839,
	228, 230, 232, 234, 236, -2, 0, 870, 870, 870,
	0, 0, 839, 837, 0, 343, 0, 345, 0, 474,
	348, 349, 401, 402, 1074, 0, 0, 0, 0, 0,
	0, 1152, -2, -2, 1184, 1186, 1658, 1687, 0, 1188,
	1189, 0, 1191, 1193, 1194, 0, 1197, 1198, 1352, 1421,
	1416, 1381, 1382, 1383, 1384, 0, 0, 1387, 0, 1389,
	1390, 1391, 1254, 1208, -2, -2, -2, 1425, 990, 991,
	992, 993, 994, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1706, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 0,
	1642, 1666, 1680, 1667, 1654, 1226, 1490, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1659, 1660, -2, -2,
	-2, 1664, -2, -2, -2, -2, -2, -2, -2, -2,
	1678, -2, 1683, 1684, -2, -2, -2, 1695, -2, -2,
	-2, 1699, 1700, -2, 1443, 1043, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1719, 1720, 1721, 1722,
	1723, 1724, 769, 747, 760, 769, 749, 750, 751, 752,
	753, 758, 759, 762, 0, 754, 755, 756, 856, 1564,
	859, 643, 857, 841, 843, 0, 845, 0, 0, 0,
	850, 873, 871, 0, 907, 854, 855, 865, 922, 0,
	0, 942, 942, 933, 0, 964, 0, 1426, 0, 0,
	0, 0, -2, 1429, 1706, 1717, 1718, 2, 77, 0,
	1666, 964, 79, 0, 1666, 82, 0, 1666, 0, -2,
	86, 0, 1666, 161, 162, 1439, 1440, 1444, 1445, 1446,
	1447, 89, 0, 1405, 97, 0, 1666, 1372, 0, 1402,
	1448, 1449, 1450, 1451, 1452, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 0, 1399, 0, 0,
	569, 1369, 1374, 570, 1379, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 206, 643, 1666, 0, 212,
	1410, 667, 1666, 665, 1413, -2, 1666, 687, 690, 1666,
	692, 643, 694, 1412, -2, 1436, 863, 1666, 783, 319,
	321, 0, 214, 0, 796, 0, 798, 0, 817, 970,
	145, 1666, 239, 258, 145, 1666, 242, 145, 1666, 245,
	145, 1666, 248, 1367, 145, 1666, 251, 252, 1666, 254,
	163, 255, 1666, 257, 314, 0, 0, -2, 308, 1415,
	-2, 306, 265, 267, 270, 272, 274, 276, 278, 280,
	282, 284, 287, 289, 292, 294, 297, 299, -2, 0,
	0, 0, 0, 575, 0, 0, 0, 735, 0, 0,
	0, 362, 0, 0, 0, 0, 766, 359, 0, 378,
	0, 380, 1653, -2, -2, 384, 770, 774, 775, 776,
	0, 0, 0, 0, 391, 0, 0, 0, 395, 398,
	0, 471, 472, 0, 481, 482, 483, 484, 485, 0,
	488, 509, 524, 0, 0, 492, 494, 574, 496, 0,
	0, 498, 0, 500, 0, 502, 0, 504, 0, 506,
	508, 510, 525, 512, 0, 0, 0, 523, 0, 529,
	0, 532, 533, 534, 0, 536, 537, 538, 0, 0,
	0, 546, 548, 0, 558, 0, 478, 479, 145, 968,
	-2, 0, 833, 885, 886, 0, 0, 0, 0, 868,
	869, 0, 0, 0, 829, 830, 344, 0, 347, 0,
	0, 0, 0, 1287, 1288, 1289, 1290, 1291, 1292, 1295,
	1296, 1293, 1294, 1297, 1298, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 0, 0, 1304, 0, 1306,
	0, 0, 0, 0, 0, 0, 1131, 1133, 1360, 0,
	0, 1303, 1079, 1080, 1081, 1116, 1117, 0, 1185, 1357,
	1356, 1187, 0, 1309, -2, 1310, 0, 0, 1190, 1396,
	1195, 1196, 1309, 0, 1351, 0, 0, 1386, 0, 1071,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1027, 1041, 1048, 1045, 1044, 1029, 0,
	1028, 0, 0, 1026, 0, 0, 0, 1030, 0, 1332,
	-2, 0, 0, 0, 0, 0, 746, -2, 748, 0,
	764, 0, 858, 0, 0, 911, 1361, 1365, 1366, 911,
	911, 0, 0, 1310, 0, 0, 0, 0, 961, 961,
	961, 959, 936, 0, 942, 0, -2, 0, 942, 942,
	0, 952, 0, 952, -2, 933, 0, 0, 965, 966,
	0, 0, 98, 730, 117, 0, 730, 730, 0, 0,
	135, 0, 0, 0, 0, 0, 113, 105, 106, 0,
	0, 83, 668, 0, 671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 115, 0, 138, 140, 0, 0, 0, 0,
	955, 568, 0, 0, 1430, 1377, 0, 0, 1430, 0,
	0, 1416, 1417, 582, 0, 0, 0, 663, 666, 0,
	685, 0, 862, 0, 0, 0, 0, 1666, 699, 1401,
	1435, 0, 1666, 785, 0, 974, 0, 799, 0, 0,
	971, 0, 237, 0, 143, 144, 0, 240, 0, 243,
	0, 246, 0, 0, 249, 0, 0, 0, 0, 0,
	865, 0, 0, 324, 334, 0, 0, 865, 0, 1312,
	982, 985, 986, 987, 1071, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1049, 1043, 1057, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1039, 0, 1014, 1014,
	1014, 1031, 1032, 1050, 1051, 1053, 1055, 983, 984, 1049,
	1049, 1046, 1047, 175, 0, 328, 0, 955, 364, 955,
	366, 0, 554, 0, 0, 0, 0, -2, 386, 0,
	772, 0, 777, 410, 411, 412, 779, 780, 390, 413,
	414, 415, 416, 417, 418, 0, 660, 0, 662, 1392,
	0, 387, 403, 388, 393, 0, 399, 0, 486, 487,
	489, 490, 491, 495, 0, 562, 1579, 572, 497, 499,
	501, 503, 505, 865, 514, 0, 516, 865, 527, 530,
	535, 539, 540, 541, 542, 543, 544, 0, 0, 0,
	683, 0, 836, 883, 884, 889, 893, 894, 897, 900,
	901, 891, 1074, 851, 852, 853, 877, 878, 713, 0,
	0, 346, 1075, 978, 979, 1033, 1034, 1035, 1036, 1037,
	1076, 1077, 1398, 0, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, -2, -2, -2, -2, -2, -2,
	-2, -2, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, -2, -2, -2, 1114, 1115, -2, 1305,
	1307, 0, 1360, 0, -2, 0, -2, -2, -2, -2,
	1128, 0, 1130, 1135, 1137, 1139, 0, 0, 0, 0,
	1359, 1149, 1343, 0, 0, 1284, 1285, 1286, 1134, 0,
	0, 1358, 1355, 0, 0, 1308, 1192, 0, 0, 0,
	1316, 1350, 1346, 0, 1418, 1424, 1199, 876, 0, 0,
	0, 0, 1206, 0, 1397, 1058, 1059, 1060, 1061, 1062,
	1063, 1072, 1264, 0, 0, 0, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 0, 1319, -2, -2, -2, -2, -2,
	-2, -2, 0, 1238, 0, 0, 1250, 0, 1252, 0,
	1240, 1310, 1329, 0, 0, 1155, 0, 0, 0, 0,
	1687, 0, 1243, 1310, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 1342, 763, 860, 0, 0,
	974, 0, 0, 0, 1364, 974, 974, 0, 906, 0,
	0, 0, 0, 0, 0, 956, 960, 957, 958, 0,
	0, 942, 952, 919, 0, 0, 1400, 0, 927, -2,
	952, 952, 0, 929, 951, 0, 643, 941, 931, -2,
	0, -2, 0, 0, 0, 0, 729, 119, 1666, 0,
	147, 0, 0, 633, 1406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 669, 670, 672, 678, 680, 0, 674,
	1395, 0, 675, 0, 677, 679, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 1371, 0, 0, 166, 954, 0, 1370, 1380,
	0, 176, 642, 0, 0, 0, 0, 581, -2, 583,
	585, 586, 587, 588, 1517, 1436, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	787, 793, 0, 876, 0, 815, 801, 0, 0, 0,
	815, 819, 820, 822, 823, 0, 0, 972, 259, 145,
	145, 145, 1368, 145, 145, 164, 253, 256, 316, 262,
	309, 0, 0, 0, 0, 310, 0, 0, 0, 312,
	0, 975, 977, 0, 988, 0, 1041, 0, 154, 175,
	0, 0, 0, 363, 368, 0, 555, 0, 0, 379,
	0, 771, 778, 0, 407, 0, 409, 661, 1394, 1393,
	0, 400, 480, 573, 571, 513, 517, 865, 519, 0,
	556, 557, 561, 969, 0, 895, 0, 892, 898, 899,
	0, 880, 711, 712, 0, 0, 0, -2, -2, 0,
	0, 0, 1150, -2, 1129, 1132, 1136, 1138, 1140, 0,
	0, 0, 0, 0, 0, 0, 1151, 1309, 0, 1353,
	1356, -2, 1311, 1314, 1315, 0, 0, 1347, 0, 0,
	0, 0, 0, 875, 876, 876, 876, 1205, 0, 0,
	0, 0, 0, 0, 1207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1225, 1012, 0, 1235, 0, 1237,
	1038, 1249, 1251, 1239, 0, 0, 1241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1158, 1159, 1160, 0, 1309, 1242, 1335, 1336, 0, 0,
	1052, 1054, 1056, 0, 0, 0, 0, 1248, 0, 1341,
	865, 908, 903, 1362, 955, 910, 912, 1363, 1403, 903,
	903, 0, 1311, 944, 0, 946, 0, 0, 0, 948,
	0, 937, 0, 939, 952, 924, 0, 0, 917, 0,
	916, 942, 0, 928, 930, 932, 1418, 643, 950, 0,
	967, 0, 118, 717, 0, 0, 1404, 0, 121, 1666,
	129, 0, 610, 0, 0, 0, 0, 0, 732, 130,
	1666, 145, 1666, 145, 131, 134, 0, 137, 0, 0,
	601, 99, 730, 102, 0, 0, 723, 0, 673, 676,
	682, 84, 0, 725, 715, 0, 0, 714, 139, 103,
	0, 0, 727, 101, 0, 0, 0, 175, 0, 0,
	1376, 1431, 186, 188, 189, 187, 590, 0, 1436, 0,
	1436, 0, 1408, 579, 643, 0, 667, 688, -2, 691,
	693, 701, 0, 0, 0, 789, 793, 0, 792, 863,
	888, 973, 794, 815, 0, 0, 0, 804, 806, 803,
	800, 797, 974, 0, 0, 0, 0, 0, 238, 241,
	244, 247, 250, 323, 0, 0, 0, 1313, 0, 980,
	0, 0, 0, 0, 155, 173, 1546, 171, 168, 170,
	327, 0, 365, 0, 0, 0, 0, 0, 0, 376,
	377, -2, 405, 406, 408, 404, 515, 518, 526, 0,
	0, 879, 713, 0, 1078, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1344, 0, 0, 0, 1355, -2,
	1317, 1345, 1349, 0, 1419, 1423, 1200, 0, 0, 0,
	0, 1388, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 0,
	1262, 1263, 1267, 1411, 0, 0, 1211, 0, 0, 0,
	0, 0, 0, 1318, 1328, 1330, 1156, 1157, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, -2, -2,
	-2, 1174, 1175, 1176, -2, -2, -2, 0, 0, 0,
	1331, 0, 0, 1333, 1334, 1338, 1339, 0, 1245, 1246,
	1247, 1340, 0, 905, 0, 909, 0, 905, 905, 872,
	945, 0, 963, 947, 922, 938, 0, 935, 920, 0,
	921, 0, 952, 942, 0, 949, 934, -2, 0, 0,
	0, 0, 146, 608, 632, 0, 0, 704, 710, 710,
	0, 1406, 1209, 1210, 0, 0, 0, 123, 0, 0,
	0, 0, 127, 0, 133, 136, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 109, 112, 0,
	0, 108, 0, 152, 0, 0, 598, 0, 584, 0,
	0, 0, 0, 582, 0, 211, 664, 686, 0, 0,
	0, 0, 0, 791, 793, 0, 784, 785, 815, 887,
	795, 813, 814, 812, 0, 0, 0, 876, 821, 818,
	824, 825, 0, 325, 0, 157, 0, 0, 981, 989,
	0, 1042, 0, 0, 0, 0, 329, 0, 549, 550,
	596, 0, 553, 890, 896, 881, 713, 0, 0, -2,
	0, 1143, -2, -2, 1280, 1311, 1354, 1348, 0, 1385,
	876, 1201, 1203, 1204, 1073, 1269, 1266, 0, 1253, 1220,
	1221, 0, 1223, 1224, 1013, 1327, 0, 0, 0, 0,
	1311, 1282, 1244, 861, 1258, 0, 0, 913, 1258, 1258,
	0, 942, 940, 918, 914, 0, 925, 952, 1419, 0,
	719, 721, 120, 0, 609, 0, 612, 0, 0, 0,
	0, 619, 620, 0, 0, 0, 0, 0, 634, 641,
	0, 713, 0, 713, 0, 0, 0, 0, 0, 142,
	0, 0, 731, 0, 145, 145, 0, 0, 718, 0,
	0, 0, 0, 724, 726, 716, 0, 728, 0, 165,
	0, 577, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 781, 793, 0, 786, 787,
	213, 0, 0, 0, 802, 805, 807, 888, 0, 0,
	0, 976, 1040, 172, 0, 167, 169, 367, 369, 0,
	0, 375, 551, 595, 0, 0, 882, -2, -2, 1144,
	1281, 1420, 1422, 0, 876, 0, 1255, 0, -2, 0,
	0, 0, 1283, 847, 0, 904, 902, 848, 849, 962,
	952, 0, 926, 122, 0, 613, 614, 1407, 616, 0,
	618, 621, 0, 623, 1438, 0, 627, 590, 0, 638,
	639, 705, 706, 709, 707, 710, 876, 636, 0, 124,
	125, 141, 149, 126, 132, 0, 0, 0, 0, 876,
	0, 0, 0, 953, 0, 0, 641, 0, 631, 590,
	580, 0, 701, 697, 0, 0, 788, 789, 0, 0,
	0, 815, 826, 0, 0, 174, 0, 371, 0, 373,
	0, 594, 0, 1202, 1272, 0, 1222, -2, 0, 1182,
	1257, 1259, 0, 923, 915, 611, 615, 0, 0, 647,
	0, 0, 598, 0, 713, 0, 0, 151, 0, 0,
	0, 720, 722, 0, 0, 0, 111, 0, 630, 590,
	641, 598, 641, 0, 0, 790, 791, 0, 809, 974,
	811, 816, 0, 0, 370, 0, 0, 552, 0, 0,
	0, 1268, 1183, 0, 0, 0, 622, 652, 0, 0,
	0, 635, 0, 708, 1200, 643, 128, 0, 148, 0,
	602, 0, 0, 605, 0, 0, 0, 0, 0, 598,
	590, 578, 590, 0, 0, 782, 0, 810, 175, 175,
	372, 374, 1265, 1270, 1273, -2, 1626, 1481, 0, 1271,
	1260, 1261, 0, 624, 648, 649, 0, 644, 645, 646,
	1437, 625, 626, 640, 647, 150, 599, 0, 0, 600,
	0, 0, 114, 116, 0, 628, 598, 598, 0, 698,
	974, 158, 159, 0, 1275, 1276, 1277, 1278, 1279, 617,
	650, 0, 651, 0, 0, 0, 652, 603, 0, 606,
	0, 593, 629, 695, 641, 808, 0, 653, 0, 656,
	657, 0, 654, 637, 0, 0, 589, 591, 592, 590,
	1274, 655, 658, 659, 0, 0, 598, 598, 0, 696,
	604, 0, 0, 0, 598, 607,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 400, 3, 406, 401, 3,
	411, 412, 404, 402, 416, 403, 413, 405, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 420, 415,
	392, 394, 393, 396, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 409, 3, 410, 407, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 418, 399, 419, 397,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 395,
	57735, 398, 57736, 408, 57737, 414, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1057
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1068
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1231
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1241
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1247
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1256
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1265
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1274
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1286
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1357
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1380
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = nil
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1486
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplemented(sqllex, "alter using")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.str = "CSV"
		}
	case 158:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1654
		{
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1698
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1702
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.str = ""
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "CREATE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			return helpWith(sqllex, "DROP")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "DELETE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "INSERT")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{ /* SKIP DOC */
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "GRANT")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "RESET")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "RESET")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "USE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{ /* SKIP DOC */
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "USE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			return unimplemented(sqllex, "set local")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			return unimplemented(sqllex, "set from current")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = tree.Low
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = tree.Normal
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = tree.High
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			return helpWith(sqllex, "SHOW")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2595
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.str = "client_encoding"
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.str = "timezone"
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2677
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2688
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = true
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = false
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2868
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2900
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2933
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2973
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3000
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3026
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.str = ""
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3574
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 628:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			return unimplemented(sqllex, "match full")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			return unimplemented(sqllex, "match partial")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplemented(sqllex, "match simple")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3804
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3812
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3831
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3835
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = nil
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3979
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = true
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = false
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = true
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = false
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4021
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4025
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = tree.Descending
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4076
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4078
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4122
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4198
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4229
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4233
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.str = ""
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.str = ""
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4294
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4358
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.str = ""
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.str = ""
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.str = ""
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4402
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			return helpWith(sqllex, "INSERT")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4516
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4520
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 816:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4570
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4594
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4693
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4728
		{
			return helpWith(sqllex, "SELECT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4729
		{
			return helpWith(sqllex, "VALUES")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4730
		{
			return helpWith(sqllex, "TABLE")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			return helpWith(sqllex, "SELECT")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4835
		{
			return helpWith(sqllex, "TABLE")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4874
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4881
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4885
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = true
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = false
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = false
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = true
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4915
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4986
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5042
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5101
		{
			return helpWith(sqllex, "VALUES")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5103
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5140
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5218
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5238
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5240
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5250
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = nil
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = true
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = false
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5395
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5396
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5470
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5484
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5541
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = nil
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5698
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5782
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5834
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5835
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = tree.Year
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = tree.Month
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = tree.Day
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = tree.Month
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = nil
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = tree.Second
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5938
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5973
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6201
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6263
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6267
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6429
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6437
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6478
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6492
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6497
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6501
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6505
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6513
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6528
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6529
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6535
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6539
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6542
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6553
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6560
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6569
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6570
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6574
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6576
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6580
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6586
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6590
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6594
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6604
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6608
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6612
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6616
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6620
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6624
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6628
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6632
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6639
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6642
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6647
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6649
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6652
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6654
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6657
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6659
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6662
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6664
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6667
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6669
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6672
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6674
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6678
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6681
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6682
		{
			return unimplemented(sqllex, "treat")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6684
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6688
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6692
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6696
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6700
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6703
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6705
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6708
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6713
		{
			return unimplemented(sqllex, "within group")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6714
		{
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6718
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6722
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6729
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6733
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6739
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6749
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6757
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6761
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6765
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6772
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6791
		{
			sqlVAL.str = ""
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6797
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6801
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6811
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6812
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6813
		{
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6816
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6817
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6823
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6824
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6825
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6826
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6827
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6838
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6842
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6848
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6854
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6860
		{
			sqlVAL.union.val = tree.Any
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6864
		{
			sqlVAL.union.val = tree.Some
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6868
		{
			sqlVAL.union.val = tree.All
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6873
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6874
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6875
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6876
		{
			sqlVAL.union.val = tree.Div
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6877
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6878
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6879
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6880
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6881
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6882
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6883
		{
			sqlVAL.union.val = tree.LT
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6884
		{
			sqlVAL.union.val = tree.GT
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6885
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6886
		{
			sqlVAL.union.val = tree.LE
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6887
		{
			sqlVAL.union.val = tree.GE
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6888
		{
			sqlVAL.union.val = tree.NE
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6892
		{
			sqlVAL.union.val = tree.Like
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6893
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6894
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6895
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6907
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6913
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6923
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6933
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6937
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6943
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6953
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6957
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6979
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6983
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6987
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6993
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7000
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7004
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7021
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7025
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7029
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7033
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7037
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7043
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7049
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7055
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7059
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7063
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7069
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7073
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7084
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7091
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7101
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7107
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7111
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7118
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7124
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7128
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7135
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7141
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7150
		{
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7151
		{
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7155
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7165
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7174
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7178
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7182
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7190
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7200
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7210
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7217
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7245
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7249
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7253
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7259
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7270
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7274
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7278
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7282
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7285
		{
			return unimplemented(sqllex, "func const")
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7287
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7291
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7294
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7296
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7300
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7304
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7311
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7315
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7324
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7335
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7345
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7441
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7448
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7452
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7456
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7470
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7474
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7478
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7491
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7509
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7519
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7523
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7537
		{
			sqlVAL.str = ""
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7543
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7547
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
