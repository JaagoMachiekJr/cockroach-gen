// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:549
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7970

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	415, 55,
	-2, 865,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	163, 703,
	-2, 0,
	-1, 58,
	101, 865,
	167, 865,
	363, 865,
	364, 865,
	-2, 0,
	-1, 71,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 828,
	-1, 107,
	191, 521,
	351, 521,
	-2, 0,
	-1, 112,
	4, 867,
	20, 867,
	21, 867,
	22, 867,
	23, 867,
	25, 867,
	30, 867,
	35, 867,
	36, 867,
	37, 867,
	38, 867,
	39, 867,
	40, 867,
	41, 867,
	42, 867,
	43, 867,
	44, 867,
	46, 867,
	47, 867,
	48, 867,
	49, 867,
	50, 867,
	51, 867,
	54, 867,
	55, 867,
	56, 867,
	58, 867,
	59, 867,
	63, 867,
	64, 867,
	65, 867,
	66, 867,
	67, 867,
	69, 867,
	70, 867,
	71, 867,
	72, 867,
	74, 867,
	76, 867,
	77, 867,
	80, 867,
	81, 867,
	82, 867,
	90, 867,
	91, 867,
	92, 867,
	93, 867,
	94, 867,
	95, 867,
	96, 867,
	97, 867,
	99, 867,
	101, 867,
	103, 867,
	106, 867,
	107, 867,
	109, 867,
	113, 867,
	114, 867,
	115, 867,
	116, 867,
	117, 867,
	118, 867,
	119, 867,
	120, 867,
	121, 867,
	129, 867,
	130, 867,
	131, 867,
	132, 867,
	133, 867,
	135, 867,
	137, 867,
	141, 867,
	143, 867,
	144, 867,
	146, 867,
	148, 867,
	149, 867,
	150, 867,
	151, 867,
	152, 867,
	153, 867,
	154, 867,
	155, 867,
	158, 867,
	162, 867,
	164, 867,
	167, 867,
	168, 867,
	169, 867,
	170, 867,
	171, 867,
	172, 867,
	173, 867,
	174, 867,
	176, 867,
	178, 867,
	181, 867,
	182, 867,
	183, 867,
	185, 867,
	186, 867,
	189, 867,
	190, 867,
	191, 867,
	193, 867,
	194, 867,
	196, 867,
	198, 867,
	199, 867,
	202, 867,
	203, 867,
	206, 867,
	208, 867,
	211, 867,
	212, 867,
	213, 867,
	214, 867,
	215, 867,
	217, 867,
	218, 867,
	219, 867,
	220, 867,
	225, 867,
	226, 867,
	227, 867,
	228, 867,
	229, 867,
	231, 867,
	232, 867,
	234, 867,
	235, 867,
	236, 867,
	239, 867,
	240, 867,
	242, 867,
	244, 867,
	245, 867,
	246, 867,
	247, 867,
	248, 867,
	249, 867,
	250, 867,
	251, 867,
	253, 867,
	254, 867,
	255, 867,
	256, 867,
	257, 867,
	259, 867,
	260, 867,
	261, 867,
	262, 867,
	263, 867,
	264, 867,
	265, 867,
	266, 867,
	268, 867,
	269, 867,
	270, 867,
	271, 867,
	272, 867,
	274, 867,
	275, 867,
	276, 867,
	277, 867,
	278, 867,
	279, 867,
	280, 867,
	282, 867,
	284, 867,
	285, 867,
	286, 867,
	287, 867,
	288, 867,
	289, 867,
	291, 867,
	292, 867,
	293, 867,
	294, 867,
	295, 867,
	296, 867,
	297, 867,
	299, 867,
	300, 867,
	301, 867,
	302, 867,
	303, 867,
	304, 867,
	305, 867,
	306, 867,
	307, 867,
	309, 867,
	310, 867,
	311, 867,
	312, 867,
	314, 867,
	315, 867,
	316, 867,
	317, 867,
	319, 867,
	320, 867,
	321, 867,
	322, 867,
	323, 867,
	324, 867,
	325, 867,
	326, 867,
	327, 867,
	329, 867,
	330, 867,
	332, 867,
	333, 867,
	335, 867,
	336, 867,
	337, 867,
	338, 867,
	339, 867,
	340, 867,
	341, 867,
	342, 867,
	343, 867,
	344, 867,
	346, 867,
	347, 867,
	348, 867,
	351, 867,
	352, 867,
	353, 867,
	354, 867,
	356, 867,
	357, 867,
	358, 867,
	359, 867,
	362, 867,
	363, 867,
	364, 867,
	365, 867,
	367, 867,
	369, 867,
	370, 867,
	371, 867,
	372, 867,
	373, 867,
	374, 867,
	377, 867,
	378, 867,
	383, 867,
	384, 867,
	385, 867,
	386, 867,
	387, 867,
	388, 867,
	-2, 0,
	-1, 132,
	112, 838,
	124, 838,
	175, 838,
	201, 838,
	230, 838,
	238, 838,
	360, 838,
	-2, 831,
	-1, 137,
	1, 761,
	181, 761,
	259, 761,
	263, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 139,
	1, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 140,
	1, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 141,
	1, 765,
	414, 765,
	415, 765,
	-2, 0,
	-1, 167,
	4, 874,
	5, 874,
	6, 874,
	7, 874,
	8, 874,
	9, 874,
	20, 874,
	21, 874,
	22, 874,
	23, 874,
	25, 874,
	30, 874,
	31, 874,
	35, 874,
	36, 874,
	37, 874,
	38, 874,
	39, 874,
	40, 874,
	41, 874,
	42, 874,
	43, 874,
	44, 874,
	46, 874,
	47, 874,
	48, 874,
	49, 874,
	50, 874,
	51, 874,
	52, 874,
	53, 874,
	54, 874,
	55, 874,
	56, 874,
	58, 874,
	59, 874,
	61, 874,
	63, 874,
	64, 874,
	65, 874,
	66, 874,
	67, 874,
	69, 874,
	70, 874,
	71, 874,
	72, 874,
	74, 874,
	76, 874,
	77, 874,
	79, 874,
	80, 874,
	81, 874,
	82, 874,
	83, 874,
	84, 874,
	85, 874,
	86, 874,
	88, 874,
	89, 874,
	90, 874,
	91, 874,
	92, 874,
	93, 874,
	94, 874,
	95, 874,
	96, 874,
	97, 874,
	98, 874,
	99, 874,
	101, 874,
	103, 874,
	106, 874,
	107, 874,
	109, 874,
	113, 874,
	114, 874,
	115, 874,
	116, 874,
	117, 874,
	118, 874,
	119, 874,
	120, 874,
	121, 874,
	122, 874,
	123, 874,
	129, 874,
	130, 874,
	131, 874,
	132, 874,
	133, 874,
	135, 874,
	137, 874,
	140, 874,
	141, 874,
	143, 874,
	144, 874,
	146, 874,
	148, 874,
	149, 874,
	150, 874,
	151, 874,
	152, 874,
	153, 874,
	154, 874,
	155, 874,
	156, 874,
	158, 874,
	162, 874,
	164, 874,
	166, 874,
	167, 874,
	168, 874,
	169, 874,
	170, 874,
	171, 874,
	172, 874,
	173, 874,
	174, 874,
	176, 874,
	178, 874,
	179, 874,
	180, 874,
	181, 874,
	182, 874,
	183, 874,
	184, 874,
	185, 874,
	186, 874,
	189, 874,
	190, 874,
	191, 874,
	193, 874,
	194, 874,
	196, 874,
	197, 874,
	198, 874,
	199, 874,
	200, 874,
	202, 874,
	203, 874,
	206, 874,
	208, 874,
	209, 874,
	210, 874,
	211, 874,
	212, 874,
	213, 874,
	214, 874,
	215, 874,
	216, 874,
	217, 874,
	218, 874,
	219, 874,
	220, 874,
	221, 874,
	223, 874,
	224, 874,
	225, 874,
	226, 874,
	227, 874,
	228, 874,
	229, 874,
	231, 874,
	232, 874,
	235, 874,
	236, 874,
	239, 874,
	240, 874,
	241, 874,
	242, 874,
	243, 874,
	244, 874,
	245, 874,
	246, 874,
	247, 874,
	248, 874,
	249, 874,
	250, 874,
	251, 874,
	253, 874,
	254, 874,
	255, 874,
	256, 874,
	257, 874,
	259, 874,
	260, 874,
	261, 874,
	262, 874,
	263, 874,
	264, 874,
	265, 874,
	266, 874,
	268, 874,
	269, 874,
	270, 874,
	271, 874,
	272, 874,
	274, 874,
	275, 874,
	276, 874,
	277, 874,
	278, 874,
	279, 874,
	280, 874,
	282, 874,
	283, 874,
	284, 874,
	285, 874,
	286, 874,
	287, 874,
	288, 874,
	289, 874,
	291, 874,
	292, 874,
	293, 874,
	294, 874,
	295, 874,
	296, 874,
	297, 874,
	299, 874,
	300, 874,
	301, 874,
	302, 874,
	303, 874,
	304, 874,
	305, 874,
	306, 874,
	307, 874,
	308, 874,
	309, 874,
	310, 874,
	311, 874,
	312, 874,
	313, 874,
	314, 874,
	315, 874,
	316, 874,
	317, 874,
	319, 874,
	320, 874,
	321, 874,
	322, 874,
	323, 874,
	324, 874,
	325, 874,
	326, 874,
	327, 874,
	329, 874,
	330, 874,
	332, 874,
	333, 874,
	335, 874,
	336, 874,
	337, 874,
	338, 874,
	339, 874,
	340, 874,
	341, 874,
	342, 874,
	343, 874,
	344, 874,
	346, 874,
	347, 874,
	348, 874,
	351, 874,
	352, 874,
	353, 874,
	354, 874,
	355, 874,
	356, 874,
	357, 874,
	358, 874,
	359, 874,
	362, 874,
	363, 874,
	364, 874,
	365, 874,
	366, 874,
	367, 874,
	369, 874,
	370, 874,
	371, 874,
	372, 874,
	373, 874,
	374, 874,
	377, 874,
	378, 874,
	383, 874,
	384, 874,
	385, 874,
	386, 874,
	387, 874,
	388, 874,
	389, 874,
	397, 874,
	402, 874,
	403, 874,
	404, 874,
	411, 874,
	417, 874,
	-2, 0,
	-1, 170,
	1, 55,
	415, 55,
	-2, 865,
	-1, 202,
	413, 1428,
	416, 1428,
	-2, 564,
	-1, 203,
	413, 1430,
	416, 1430,
	-2, 565,
	-1, 204,
	413, 1429,
	416, 1429,
	-2, 566,
	-1, 205,
	416, 1370,
	-2, 567,
	-1, 592,
	139, 1525,
	349, 1525,
	394, 1525,
	413, 1525,
	-2, 0,
	-1, 593,
	139, 1462,
	349, 1462,
	394, 1462,
	413, 1462,
	-2, 0,
	-1, 595,
	139, 1593,
	349, 1593,
	394, 1593,
	413, 1593,
	-2, 0,
	-1, 597,
	139, 1618,
	349, 1618,
	394, 1618,
	413, 1618,
	-2, 0,
	-1, 604,
	139, 1530,
	349, 1530,
	394, 1530,
	413, 1530,
	-2, 396,
	-1, 639,
	1, 493,
	410, 493,
	412, 493,
	414, 493,
	415, 493,
	-2, 0,
	-1, 640,
	1, 563,
	136, 563,
	410, 563,
	412, 563,
	414, 563,
	415, 563,
	-2, 0,
	-1, 646,
	1, 507,
	410, 507,
	412, 507,
	414, 507,
	415, 507,
	-2, 0,
	-1, 648,
	1, 511,
	410, 511,
	412, 511,
	414, 511,
	415, 511,
	-2, 0,
	-1, 651,
	1, 522,
	410, 522,
	412, 522,
	414, 522,
	415, 522,
	-2, 0,
	-1, 652,
	1, 528,
	410, 528,
	412, 528,
	414, 528,
	415, 528,
	-2, 0,
	-1, 653,
	1, 531,
	410, 531,
	412, 531,
	414, 531,
	415, 531,
	-2, 0,
	-1, 657,
	1, 545,
	410, 545,
	412, 545,
	414, 545,
	415, 545,
	-2, 0,
	-1, 658,
	1, 547,
	410, 547,
	412, 547,
	414, 547,
	415, 547,
	-2, 0,
	-1, 686,
	124, 876,
	201, 876,
	230, 876,
	-2, 834,
	-1, 694,
	124, 875,
	201, 875,
	230, 875,
	-2, 832,
	-1, 721,
	411, 1712,
	-2, 1149,
	-1, 722,
	411, 1713,
	-2, 1150,
	-1, 753,
	411, 1422,
	-2, 1413,
	-1, 754,
	5, 1007,
	411, 1437,
	-2, 1428,
	-1, 755,
	411, 1438,
	-2, 1429,
	-1, 762,
	5, 991,
	-2, 1457,
	-1, 763,
	5, 992,
	-2, 1645,
	-1, 764,
	5, 993,
	-2, 1644,
	-1, 765,
	5, 994,
	-2, 1615,
	-1, 766,
	5, 995,
	-2, 1674,
	-1, 767,
	5, 996,
	-2, 1683,
	-1, 768,
	5, 997,
	-2, 1684,
	-1, 769,
	5, 998,
	-2, 1685,
	-1, 770,
	5, 999,
	-2, 1686,
	-1, 771,
	5, 1000,
	-2, 1688,
	-1, 772,
	5, 1001,
	-2, 1696,
	-1, 773,
	5, 1002,
	-2, 1663,
	-1, 774,
	5, 1003,
	-2, 1640,
	-1, 775,
	5, 1004,
	-2, 1539,
	-1, 776,
	5, 1005,
	-2, 1540,
	-1, 777,
	5, 1006,
	-2, 1511,
	-1, 778,
	5, 1053,
	411, 1053,
	-2, 1670,
	-1, 796,
	5, 1018,
	-2, 1639,
	-1, 797,
	5, 1045,
	-2, 1641,
	-1, 798,
	5, 1028,
	-2, 1642,
	-1, 799,
	5, 1027,
	-2, 1643,
	-1, 800,
	5, 1045,
	-2, 1646,
	-1, 801,
	5, 1045,
	-2, 1647,
	-1, 802,
	5, 1046,
	-2, 1650,
	-1, 803,
	5, 1010,
	-2, 1651,
	-1, 804,
	5, 1010,
	-2, 1652,
	-1, 807,
	5, 1035,
	-2, 1656,
	-1, 808,
	5, 1020,
	-2, 1657,
	-1, 809,
	5, 1021,
	-2, 1658,
	-1, 811,
	5, 1011,
	-2, 1664,
	-1, 812,
	5, 1012,
	-2, 1665,
	-1, 813,
	5, 1013,
	-2, 1666,
	-1, 814,
	5, 1014,
	-2, 1667,
	-1, 815,
	5, 1015,
	-2, 1668,
	-1, 816,
	5, 1016,
	-2, 1669,
	-1, 817,
	5, 979,
	-2, 1671,
	-1, 818,
	5, 980,
	-2, 1672,
	-1, 820,
	5, 1010,
	-2, 1676,
	-1, 823,
	5, 1019,
	-2, 1681,
	-1, 824,
	5, 1017,
	-2, 1687,
	-1, 825,
	5, 1043,
	-2, 1689,
	-1, 827,
	5, 1047,
	-2, 1691,
	-1, 828,
	5, 1049,
	-2, 1692,
	-1, 829,
	5, 1051,
	-2, 1693,
	-1, 832,
	5, 1042,
	-2, 1698,
	-1, 900,
	411, 1437,
	-2, 1428,
	-1, 917,
	274, 1410,
	404, 1410,
	-2, 1409,
	-1, 1054,
	249, 863,
	-2, 689,
	-1, 1063,
	233, 1432,
	-2, 0,
	-1, 1106,
	1, 263,
	410, 263,
	412, 263,
	414, 263,
	415, 263,
	-2, 837,
	-1, 1109,
	4, 1697,
	10, 1697,
	11, 1697,
	13, 1697,
	14, 1697,
	15, 1697,
	16, 1697,
	17, 1697,
	18, 1697,
	20, 1697,
	21, 1697,
	22, 1697,
	23, 1697,
	25, 1697,
	28, 1697,
	30, 1697,
	32, 1697,
	35, 1697,
	36, 1697,
	37, 1697,
	38, 1697,
	39, 1697,
	40, 1697,
	41, 1697,
	42, 1697,
	43, 1697,
	44, 1697,
	46, 1697,
	47, 1697,
	48, 1697,
	49, 1697,
	50, 1697,
	51, 1697,
	54, 1697,
	55, 1697,
	56, 1697,
	58, 1697,
	59, 1697,
	60, 1697,
	63, 1697,
	64, 1697,
	65, 1697,
	66, 1697,
	67, 1697,
	68, 1697,
	69, 1697,
	70, 1697,
	71, 1697,
	72, 1697,
	74, 1697,
	75, 1697,
	76, 1697,
	77, 1697,
	79, 1697,
	80, 1697,
	81, 1697,
	82, 1697,
	90, 1697,
	91, 1697,
	92, 1697,
	93, 1697,
	94, 1697,
	95, 1697,
	96, 1697,
	97, 1697,
	99, 1697,
	101, 1697,
	103, 1697,
	106, 1697,
	107, 1697,
	109, 1697,
	113, 1697,
	114, 1697,
	115, 1697,
	116, 1697,
	117, 1697,
	118, 1697,
	119, 1697,
	120, 1697,
	121, 1697,
	125, 1697,
	126, 1697,
	127, 1697,
	128, 1697,
	129, 1697,
	130, 1697,
	131, 1697,
	132, 1697,
	133, 1697,
	134, 1697,
	135, 1697,
	137, 1697,
	140, 1697,
	141, 1697,
	143, 1697,
	144, 1697,
	146, 1697,
	148, 1697,
	149, 1697,
	150, 1697,
	151, 1697,
	152, 1697,
	153, 1697,
	154, 1697,
	155, 1697,
	156, 1697,
	157, 1697,
	158, 1697,
	159, 1697,
	160, 1697,
	161, 1697,
	162, 1697,
	164, 1697,
	166, 1697,
	167, 1697,
	168, 1697,
	169, 1697,
	170, 1697,
	171, 1697,
	172, 1697,
	173, 1697,
	174, 1697,
	176, 1697,
	178, 1697,
	179, 1697,
	180, 1697,
	181, 1697,
	182, 1697,
	183, 1697,
	184, 1697,
	185, 1697,
	186, 1697,
	187, 1697,
	188, 1697,
	189, 1697,
	190, 1697,
	191, 1697,
	193, 1697,
	194, 1697,
	196, 1697,
	197, 1697,
	198, 1697,
	199, 1697,
	200, 1697,
	202, 1697,
	203, 1697,
	206, 1697,
	207, 1697,
	208, 1697,
	211, 1697,
	212, 1697,
	213, 1697,
	214, 1697,
	215, 1697,
	216, 1697,
	217, 1697,
	218, 1697,
	219, 1697,
	220, 1697,
	223, 1697,
	225, 1697,
	226, 1697,
	227, 1697,
	228, 1697,
	229, 1697,
	231, 1697,
	232, 1697,
	235, 1697,
	236, 1697,
	237, 1697,
	239, 1697,
	240, 1697,
	242, 1697,
	244, 1697,
	245, 1697,
	246, 1697,
	247, 1697,
	248, 1697,
	249, 1697,
	250, 1697,
	251, 1697,
	253, 1697,
	254, 1697,
	255, 1697,
	256, 1697,
	257, 1697,
	259, 1697,
	260, 1697,
	261, 1697,
	262, 1697,
	263, 1697,
	264, 1697,
	265, 1697,
	266, 1697,
	268, 1697,
	269, 1697,
	270, 1697,
	271, 1697,
	272, 1697,
	273, 1697,
	274, 1697,
	275, 1697,
	276, 1697,
	277, 1697,
	278, 1697,
	279, 1697,
	280, 1697,
	282, 1697,
	283, 1697,
	284, 1697,
	285, 1697,
	286, 1697,
	287, 1697,
	288, 1697,
	289, 1697,
	290, 1697,
	291, 1697,
	292, 1697,
	293, 1697,
	294, 1697,
	295, 1697,
	296, 1697,
	297, 1697,
	299, 1697,
	300, 1697,
	301, 1697,
	302, 1697,
	303, 1697,
	304, 1697,
	305, 1697,
	306, 1697,
	307, 1697,
	309, 1697,
	310, 1697,
	311, 1697,
	312, 1697,
	313, 1697,
	314, 1697,
	315, 1697,
	316, 1697,
	317, 1697,
	319, 1697,
	320, 1697,
	321, 1697,
	322, 1697,
	323, 1697,
	324, 1697,
	325, 1697,
	326, 1697,
	327, 1697,
	329, 1697,
	330, 1697,
	332, 1697,
	333, 1697,
	335, 1697,
	336, 1697,
	337, 1697,
	338, 1697,
	339, 1697,
	340, 1697,
	341, 1697,
	342, 1697,
	343, 1697,
	344, 1697,
	346, 1697,
	347, 1697,
	348, 1697,
	351, 1697,
	352, 1697,
	353, 1697,
	354, 1697,
	356, 1697,
	357, 1697,
	358, 1697,
	359, 1697,
	362, 1697,
	363, 1697,
	364, 1697,
	365, 1697,
	367, 1697,
	369, 1697,
	370, 1697,
	371, 1697,
	372, 1697,
	373, 1697,
	374, 1697,
	377, 1697,
	378, 1697,
	383, 1697,
	384, 1697,
	385, 1697,
	386, 1697,
	387, 1697,
	388, 1697,
	389, 1697,
	390, 1697,
	392, 1697,
	393, 1697,
	394, 1697,
	395, 1697,
	396, 1697,
	397, 1697,
	399, 1697,
	400, 1697,
	401, 1697,
	402, 1697,
	403, 1697,
	404, 1697,
	405, 1697,
	406, 1697,
	407, 1697,
	409, 1697,
	412, 1697,
	413, 1697,
	416, 1697,
	417, 1697,
	-2, 0,
	-1, 1127,
	139, 1593,
	349, 1593,
	394, 1593,
	413, 1593,
	-2, 0,
	-1, 1152,
	139, 1618,
	349, 1618,
	394, 1618,
	413, 1618,
	-2, 0,
	-1, 1153,
	181, 773,
	259, 773,
	263, 773,
	-2, 383,
	-1, 1229,
	124, 875,
	201, 875,
	230, 875,
	-2, 835,
	-1, 1313,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 1190,
	-1, 1359,
	412, 1305,
	-2, 0,
	-1, 1366,
	181, 773,
	259, 773,
	263, 773,
	-2, 768,
	-1, 1395,
	412, 1305,
	-2, 0,
	-1, 1399,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 938,
	-1, 1592,
	181, 773,
	259, 773,
	263, 773,
	-2, 385,
	-1, 1699,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1088,
	-1, 1700,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1089,
	-1, 1701,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1090,
	-1, 1702,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1091,
	-1, 1703,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1092,
	-1, 1704,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1093,
	-1, 1705,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1094,
	-1, 1706,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1095,
	-1, 1718,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1107,
	-1, 1719,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1108,
	-1, 1720,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1109,
	-1, 1723,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1114,
	-1, 1729,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1116,
	-1, 1731,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1120,
	-1, 1732,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1121,
	-1, 1733,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1122,
	-1, 1734,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1123,
	-1, 1810,
	5, 1007,
	139, 1316,
	411, 1437,
	-2, 1428,
	-1, 1811,
	139, 1317,
	-2, 1635,
	-1, 1812,
	139, 1318,
	-2, 1529,
	-1, 1813,
	139, 1319,
	-2, 1482,
	-1, 1814,
	139, 1320,
	-2, 1505,
	-1, 1815,
	139, 1321,
	-2, 1528,
	-1, 1816,
	139, 1322,
	-2, 1589,
	-1, 1890,
	1, 939,
	79, 939,
	112, 939,
	124, 939,
	140, 939,
	145, 939,
	147, 939,
	166, 939,
	175, 939,
	184, 939,
	197, 939,
	201, 939,
	216, 939,
	230, 939,
	233, 939,
	238, 939,
	281, 939,
	283, 939,
	360, 939,
	368, 939,
	380, 939,
	381, 939,
	391, 939,
	410, 939,
	412, 939,
	414, 939,
	415, 939,
	416, 939,
	-2, 938,
	-1, 1892,
	411, 1414,
	-2, 1426,
	-1, 1970,
	412, 1375,
	416, 1375,
	-2, 1402,
	-1, 2089,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1115,
	-1, 2090,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1117,
	-1, 2095,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1118,
	-1, 2113,
	243, 1276,
	-2, 1278,
	-1, 2316,
	249, 863,
	-2, 689,
	-1, 2379,
	181, 773,
	259, 773,
	263, 773,
	-2, 382,
	-1, 2393,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1119,
	-1, 2398,
	179, 0,
	180, 0,
	223, 0,
	-2, 1137,
	-1, 2407,
	243, 1277,
	-2, 1279,
	-1, 2456,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1167,
	-1, 2457,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1168,
	-1, 2458,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1169,
	-1, 2462,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1173,
	-1, 2463,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1174,
	-1, 2464,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1175,
	-1, 2503,
	411, 1415,
	-2, 1427,
	-1, 2617,
	179, 0,
	180, 0,
	223, 0,
	-2, 1138,
	-1, 2620,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1141,
	-1, 2621,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1143,
	-1, 2764,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1142,
	-1, 2765,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1144,
	-1, 2775,
	179, 0,
	-2, 1176,
	-1, 2863,
	179, 0,
	-2, 1177,
	-1, 2961,
	38, 0,
	156, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1638,
}

const sqlPrivate = 57344

const sqlLast = 55513

var sqlAct = [...]int{

	755, 2960, 2718, 1760, 2969, 2554, 2803, 3023, 1995, 2936,
	2937, 2939, 2970, 2923, 2971, 2003, 2428, 2792, 2040, 2867,
	2732, 2959, 2755, 1686, 729, 2083, 2672, 2571, 2330, 1523,
	1039, 2687, 1025, 2566, 2323, 1462, 2513, 747, 1972, 1746,
	204, 2576, 2780, 1398, 475, 2363, 921, 2365, 1060, 2335,
	834, 475, 1992, 2230, 1232, 1968, 2512, 2325, 475, 2189,
	475, 1374, 1393, 475, 204, 752, 475, 475, 936, 544,
	27, 1096, 1884, 475, 2592, 1317, 2206, 2652, 2004, 1475,
	1472, 475, 1484, 1476, 1904, 1885, 2217, 1971, 1895, 1481,
	1956, 2125, 1427, 470, 2188, 1785, 1677, 523, 914, 1320,
	1758, 1092, 2868, 1672, 2079, 1366, 930, 2481, 520, 2514,
	751, 2334, 1443, 1409, 2299, 695, 1449, 1375, 738, 70,
	1617, 703, 126, 1767, 1743, 1155, 887, 1407, 1931, 1957,
	1847, 1347, 1345, 1473, 1878, 556, 1779, 1969, 1089, 1079,
	1881, 923, 1997, 1107, 1975, 1759, 744, 205, 206, 1870,
	1384, 1806, 472, 2719, 891, 869, 582, 719, 1930, 1233,
	1308, 602, 475, 475, 471, 1231, 1855, 200, 1616, 746,
	559, 132, 1076, 745, 1491, 1029, 596, 1419, 133, 1365,
	126, 867, 631, 2497, 2112, 1237, 2498, 1887, 794, 699,
	1996, 699, 460, 475, 475, 475, 926, 475, 475, 939,
	939, 575, 1499, 1499, 463, 2042, 1499, 3050, 475, 475,
	1394, 1864, 2116, 3044, 1958, 3043, 460, 1864, 2117, 1864,
	3020, 1958, 1402, 3017, 2686, 694, 2341, 1458, 463, 2995,
	2989, 570, 2988, 2686, 1864, 1864, 1864, 2985, 2982, 1511,
	27, 2986, 2983, 2979, 1032, 517, 2484, 1458, 2957, 2391,
	568, 2956, 1458, 2242, 700, 1458, 2955, 709, 2954, 2918,
	1511, 2369, 1511, 2032, 2905, 1248, 1249, 2898, 1458, 2896,
	2894, 2686, 2865, 2686, 2686, 1099, 2032, 2851, 2839, 2834,
	2832, 2600, 2686, 1458, 2686, 2822, 2342, 2821, 917, 1458,
	1251, 1458, 126, 2024, 2000, 2313, 2814, 713, 687, 933,
	1458, 170, 1452, 1248, 1249, 686, 1281, 1282, 1283, 1291,
	1292, 1293, 1857, 2813, 1138, 1250, 888, 2686, 704, 907,
	911, 916, 2786, 1270, 2919, 2766, 1458, 1458, 1251, 2032,
	2712, 1297, 2708, 2685, 1864, 2852, 1864, 2686, 2619, 937,
	1026, 2590, 2032, 2582, 871, 2583, 1511, 2583, 2493, 870,
	870, 1458, 2494, 1250, 2484, 1031, 1030, 1856, 889, 2487,
	460, 1270, 2402, 1864, 1595, 1129, 1864, 1864, 1267, 2124,
	2354, 2203, 463, 2154, 2305, 1864, 873, 1864, 874, 1524,
	1273, 1274, 1275, 1276, 2153, 2600, 1946, 2147, 1864, 1256,
	1497, 2148, 884, 1893, 2469, 2146, 2404, 2159, 2160, 1864,
	2177, 2178, 2179, 2051, 2031, 2020, 1963, 1864, 2032, 1864,
	1458, 2305, 2082, 1863, 1278, 1279, 1280, 1864, 1273, 1274,
	1275, 1276, 2062, 1782, 1515, 2159, 2160, 1256, 1516, 1457,
	1500, 1500, 1130, 1370, 1500, 1762, 1028, 2343, 1126, 1125,
	1124, 1123, 1122, 167, 1121, 1120, 2159, 2160, 1119, 1288,
	1298, 1118, 1278, 1279, 1280, 2174, 2344, 1318, 1117, 1614,
	1116, 167, 1271, 1115, 1114, 1113, 1112, 1111, 1110, 875,
	872, 919, 693, 692, 691, 690, 689, 685, 1783, 169,
	1265, 1266, 684, 683, 475, 475, 475, 926, 926, 475,
	682, 681, 475, 1286, 167, 475, 680, 169, 679, 678,
	1271, 475, 677, 676, 2174, 675, 671, 670, 669, 629,
	628, 475, 475, 475, 475, 475, 926, 926, 168, 627,
	626, 2165, 551, 926, 625, 2159, 2160, 161, 1277, 624,
	169, 623, 622, 39, 621, 162, 168, 620, 1130, 1784,
	1781, 619, 618, 617, 616, 1272, 615, 42, 614, 2165,
	613, 612, 2159, 2160, 475, 611, 134, 610, 609, 2740,
	608, 1798, 607, 2341, 606, 475, 1277, 1507, 1498, 168,
	2165, 1656, 1458, 591, 134, 550, 590, 2665, 161, 1053,
	702, 589, 588, 1272, 1050, 475, 162, 1967, 1100, 1856,
	587, 1130, 586, 508, 2175, 507, 475, 481, 1065, 480,
	479, 1318, 465, 464, 552, 190, 1289, 1999, 189, 188,
	2626, 57, 554, 187, 186, 185, 58, 184, 183, 551,
	182, 1093, 2175, 181, 180, 1786, 179, 1078, 1248, 1249,
	39, 178, 177, 176, 175, 174, 926, 173, 172, 171,
	2584, 2553, 700, 2175, 42, 2238, 2122, 2071, 60, 2165,
	1964, 1083, 1086, 1251, 1261, 1259, 1260, 1252, 1253, 1254,
	1255, 1257, 1258, 1961, 1108, 1620, 1406, 1796, 1794, 1397,
	1792, 1324, 550, 475, 1169, 1041, 2165, 2176, 1250, 1034,
	2976, 2958, 1287, 753, 2941, 1262, 1263, 1269, 1268, 1264,
	1290, 1244, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 552, 2930, 1153, 2859, 2176, 2855, 2853, 57, 554,
	1248, 1249, 2835, 58, 2749, 1780, 1291, 1292, 1293, 2651,
	2650, 1163, 2175, 2802, 2649, 1167, 2176, 2159, 2160, 2642,
	2638, 1315, 2637, 2636, 2632, 1251, 2631, 2739, 1297, 2037,
	2308, 2630, 2629, 2622, 2599, 60, 2597, 61, 2478, 2175,
	2477, 2476, 1256, 2414, 2304, 2237, 2233, 2199, 2187, 2158,
	1250, 2155, 1054, 1057, 2152, 2151, 2149, 2130, 1270, 2129,
	2113, 1890, 1150, 1244, 135, 63, 1754, 64, 1229, 2171,
	2172, 2173, 1520, 1243, 3048, 1328, 2170, 2168, 2169, 2161,
	2162, 2163, 2164, 2166, 2167, 167, 883, 3031, 1321, 1228,
	1311, 3030, 1230, 2384, 1040, 2176, 553, 2430, 2949, 107,
	2944, 2900, 2891, 2890, 2886, 1170, 2169, 2161, 2162, 2163,
	2164, 2166, 2167, 2885, 2879, 1273, 1274, 1275, 1276, 2159,
	2160, 169, 2176, 2876, 1256, 2170, 2168, 2169, 2161, 2162,
	2163, 2164, 2166, 2167, 61, 2159, 2160, 700, 2850, 2849,
	1748, 2165, 2798, 895, 1615, 1932, 1288, 1298, 2777, 1278,
	1279, 1280, 2223, 2078, 475, 2727, 2723, 2721, 2707, 475,
	168, 135, 63, 2691, 64, 687, 167, 1248, 1249, 161,
	2647, 2601, 686, 1240, 1241, 2569, 1381, 162, 1245, 2561,
	2560, 2558, 167, 2533, 2532, 475, 2522, 2521, 2489, 1755,
	1286, 1372, 1251, 553, 2397, 2360, 107, 1271, 134, 2358,
	2288, 1176, 169, 2272, 2170, 2168, 2169, 2161, 2162, 2163,
	2164, 2166, 2167, 2252, 2175, 2251, 2870, 1250, 169, 2202,
	1343, 2186, 2139, 1396, 1346, 2138, 1349, 2135, 2109, 1378,
	1379, 2104, 2168, 2169, 2161, 2162, 2163, 2164, 2166, 2167,
	1348, 168, 1356, 2165, 1248, 1249, 1353, 2039, 1875, 1862,
	161, 1790, 1391, 1468, 1335, 1334, 1333, 168, 162, 2165,
	2748, 1797, 1332, 1277, 1605, 1604, 161, 1614, 1611, 1251,
	1395, 1373, 1364, 1363, 162, 1359, 1358, 1357, 2252, 134,
	1272, 1355, 1354, 1351, 1350, 1392, 1341, 1340, 1339, 1338,
	1337, 1256, 1336, 1325, 1250, 134, 1312, 2176, 126, 1311,
	1149, 1134, 700, 1289, 1104, 2624, 2596, 2496, 2492, 2115,
	1369, 1876, 1254, 1255, 1257, 1258, 2034, 1166, 926, 475,
	2159, 2160, 1321, 2356, 1367, 939, 1309, 1614, 1403, 888,
	2050, 475, 939, 475, 475, 2326, 2745, 1400, 1426, 1614,
	1371, 2603, 2602, 1420, 2499, 1614, 870, 1361, 1958, 1397,
	1226, 1415, 2828, 1362, 475, 475, 2292, 2287, 1608, 2283,
	1144, 475, 2271, 475, 2194, 475, 1469, 1795, 1793, 475,
	1791, 889, 2193, 2192, 2088, 2049, 1588, 1450, 1934, 1287,
	1162, 1480, 1601, 2856, 2854, 1782, 2531, 1290, 1360, 1261,
	1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 1514, 1330,
	2042, 1445, 865, 1477, 2371, 1521, 2282, 1439, 2781, 2161,
	2162, 2163, 2164, 2166, 2167, 1996, 2432, 2120, 475, 204,
	475, 475, 2801, 2977, 1768, 1344, 926, 2987, 204, 475,
	2984, 2337, 475, 475, 2508, 866, 1549, 2933, 475, 1488,
	1783, 1219, 2567, 1590, 1486, 2025, 516, 195, 3010, 2699,
	859, 2381, 1465, 487, 2052, 1518, 509, 1205, 1204, 3047,
	939, 2827, 1529, 1609, 1580, 1459, 1031, 1030, 2904, 475,
	497, 460, 1463, 2978, 475, 1548, 1217, 2826, 2824, 204,
	475, 1327, 475, 463, 475, 1897, 475, 1078, 475, 3011,
	1610, 857, 2823, 2547, 1456, 882, 2536, 1578, 475, 2542,
	475, 1784, 1781, 2541, 1906, 2505, 2716, 2504, 475, 475,
	475, 2161, 2162, 2163, 2164, 2166, 2167, 191, 1218, 855,
	1421, 852, 2134, 2133, 2132, 2131, 2091, 1164, 515, 2163,
	2164, 2166, 2167, 1490, 1602, 486, 498, 475, 1582, 1493,
	1410, 939, 2023, 1411, 1641, 1951, 514, 1418, 1592, 1945,
	1941, 1922, 1730, 1368, 1027, 1741, 1495, 1648, 1842, 1252,
	1253, 1254, 1255, 1257, 1258, 1841, 1840, 1688, 1993, 1422,
	1423, 460, 1165, 1739, 1653, 1043, 1529, 1529, 1659, 2858,
	460, 1613, 1955, 463, 673, 1909, 1517, 1786, 1654, 1548,
	1548, 1519, 463, 1455, 1150, 1579, 565, 1622, 1526, 1589,
	1621, 2552, 2357, 1053, 1216, 1745, 2805, 196, 1650, 2903,
	1315, 698, 861, 1962, 581, 939, 1897, 513, 1203, 1772,
	1745, 580, 1606, 2524, 1618, 1412, 2952, 1896, 1140, 2424,
	1623, 460, 1403, 1626, 1410, 1804, 1414, 1411, 581, 1915,
	1494, 1258, 1752, 463, 1809, 1809, 1632, 1750, 1820, 1822,
	1247, 1827, 1786, 2055, 2080, 2081, 482, 1200, 1850, 475,
	3002, 475, 1615, 1612, 1735, 2057, 2973, 1854, 2332, 2279,
	2274, 2882, 1736, 1148, 697, 1737, 3033, 1780, 197, 1742,
	1410, 1687, 1658, 1411, 1438, 939, 1657, 475, 1768, 475,
	1424, 1441, 2382, 1342, 2035, 2058, 475, 939, 1676, 687,
	1416, 475, 687, 687, 1201, 1908, 1668, 2056, 475, 1669,
	1670, 1765, 1526, 1526, 1805, 1786, 475, 2167, 1141, 1412,
	1938, 700, 1615, 1932, 1143, 2915, 700, 1877, 475, 2543,
	1414, 926, 500, 499, 1615, 1932, 1225, 699, 516, 1898,
	1615, 1932, 475, 939, 2380, 1652, 491, 491, 475, 475,
	2264, 3010, 2916, 511, 1753, 1769, 1529, 1763, 1756, 475,
	1984, 1889, 475, 199, 1502, 1412, 1416, 1504, 3001, 1548,
	1506, 2333, 2534, 2974, 1509, 1179, 1414, 198, 2761, 1919,
	1942, 466, 2772, 1213, 2263, 475, 514, 475, 512, 475,
	1910, 1912, 475, 1817, 475, 1839, 475, 1982, 475, 475,
	853, 475, 926, 926, 926, 1948, 1738, 926, 1907, 1924,
	1902, 700, 475, 1740, 194, 1851, 1852, 1306, 1416, 2332,
	515, 917, 888, 2830, 1667, 2525, 1939, 1868, 1872, 1873,
	510, 1882, 490, 490, 1917, 1860, 1861, 1892, 888, 1499,
	2975, 853, 1923, 1952, 2291, 1901, 1400, 1042, 870, 192,
	1442, 1998, 196, 1998, 1940, 2101, 1924, 513, 2806, 696,
	1416, 1214, 2137, 1871, 889, 3026, 895, 1888, 1902, 854,
	2265, 853, 475, 2099, 2018, 2019, 699, 1953, 2757, 2421,
	889, 195, 1933, 1935, 1936, 1937, 2269, 2605, 3000, 1413,
	2267, 193, 1526, 1640, 2007, 1031, 1959, 2591, 1867, 2014,
	460, 1829, 2093, 1894, 3034, 1593, 1416, 2016, 1655, 1139,
	2027, 939, 463, 475, 2021, 2373, 674, 1744, 1678, 1685,
	475, 1902, 475, 197, 2611, 1215, 2002, 126, 564, 2972,
	2266, 2011, 1408, 2012, 126, 2013, 1751, 2015, 487, 487,
	2422, 3009, 1625, 475, 475, 475, 1830, 475, 1108, 2026,
	2022, 1187, 3007, 485, 485, 2065, 2036, 2066, 1246, 863,
	1142, 467, 862, 2045, 2096, 2046, 475, 2731, 2756, 2729,
	2038, 1990, 1727, 1988, 2009, 2097, 484, 484, 516, 2102,
	2683, 1147, 706, 1413, 661, 1349, 2376, 1356, 483, 483,
	1471, 1380, 1154, 511, 1383, 1137, 1446, 1346, 2041, 1128,
	478, 1235, 1236, 2465, 708, 2680, 1943, 2044, 199, 1387,
	2053, 2645, 1171, 2762, 661, 492, 492, 1467, 1159, 2296,
	486, 486, 198, 661, 1454, 3039, 1786, 2816, 512, 1413,
	488, 488, 3024, 1180, 708, 1390, 2815, 2068, 707, 2796,
	468, 2070, 2107, 708, 2300, 2073, 2681, 2873, 2507, 2110,
	126, 2063, 2695, 1869, 126, 1387, 2758, 2248, 2094, 194,
	515, 1600, 2244, 1991, 1989, 1489, 1388, 1500, 2127, 2128,
	510, 2375, 662, 2075, 1479, 1478, 1474, 2017, 1234, 2698,
	1181, 1390, 2077, 1178, 1159, 2372, 2697, 1470, 2231, 1664,
	1725, 1728, 2420, 3025, 192, 506, 1160, 1926, 1925, 1385,
	1161, 2924, 662, 1645, 1596, 2572, 2098, 1236, 2797, 2733,
	2254, 662, 1388, 2100, 2253, 1235, 2220, 501, 2086, 1598,
	2466, 1866, 1865, 3027, 573, 567, 195, 2467, 2185, 1416,
	697, 1386, 1966, 1599, 1724, 2646, 193, 1965, 1850, 1850,
	1850, 2306, 2092, 2201, 1075, 1073, 549, 35, 2219, 939,
	1064, 3038, 1389, 3, 2204, 1448, 2213, 2374, 700, 2211,
	2212, 1063, 1160, 2555, 2295, 475, 1161, 2653, 475, 2676,
	2232, 1159, 2677, 1447, 3014, 2694, 1665, 475, 2123, 2720,
	2119, 2794, 1188, 548, 34, 475, 475, 475, 2482, 1789,
	2728, 475, 1234, 3016, 475, 663, 2776, 2191, 1389, 2644,
	1444, 475, 475, 475, 475, 475, 2679, 2551, 2235, 2696,
	2226, 2190, 2795, 475, 1223, 2682, 1927, 1928, 547, 31,
	475, 1210, 1422, 1423, 2236, 663, 546, 76, 2396, 2245,
	1529, 1208, 475, 926, 663, 2150, 475, 1198, 2103, 2043,
	2227, 2225, 939, 1548, 700, 2228, 475, 1726, 1196, 1160,
	2222, 1194, 939, 1161, 1950, 939, 545, 75, 939, 1921,
	1461, 2273, 2069, 2301, 2205, 2196, 2197, 2198, 475, 1224,
	475, 851, 475, 1135, 475, 926, 926, 926, 2270, 475,
	2047, 475, 1639, 2218, 1173, 475, 705, 1642, 664, 2210,
	475, 1629, 475, 1581, 888, 2241, 1192, 2239, 1190, 475,
	1902, 1184, 888, 888, 572, 566, 888, 2286, 1331, 2678,
	2255, 1788, 2258, 2968, 475, 2549, 926, 35, 664, 1074,
	1072, 2339, 542, 22, 905, 1053, 665, 664, 543, 23,
	2280, 1830, 1830, 475, 475, 2268, 889, 1415, 2275, 1453,
	2311, 2921, 2284, 1071, 889, 889, 502, 2318, 889, 2351,
	2362, 1222, 2310, 2285, 34, 2290, 665, 2307, 1209, 895,
	1529, 1415, 475, 2278, 2234, 665, 1526, 1053, 1207, 2368,
	2208, 2302, 2314, 1548, 1197, 895, 2289, 475, 2215, 2216,
	2669, 2529, 2221, 2276, 2527, 1195, 739, 2277, 1193, 31,
	1450, 2327, 2298, 503, 2506, 2298, 1450, 76, 2303, 2336,
	2322, 2328, 541, 29, 2320, 2361, 540, 20, 2336, 700,
	2345, 856, 858, 939, 538, 19, 1638, 1383, 1172, 1830,
	1830, 1830, 1994, 1986, 2399, 1985, 461, 75, 475, 504,
	473, 505, 1529, 1191, 1983, 1189, 1981, 493, 1183, 1513,
	1512, 1510, 1508, 1505, 519, 1548, 560, 2250, 2379, 519,
	461, 2324, 560, 578, 2409, 2256, 1503, 2260, 2261, 585,
	2377, 2378, 1501, 539, 18, 528, 15, 605, 2385, 1529,
	1529, 2387, 1451, 2383, 529, 16, 2389, 1440, 1387, 2338,
	1070, 126, 1548, 1548, 537, 55, 1437, 1529, 1529, 1425,
	1417, 2844, 3011, 22, 2479, 2747, 1526, 536, 54, 23,
	1548, 1548, 2084, 2405, 1390, 527, 53, 2408, 2281, 2746,
	1619, 2593, 1238, 1897, 2440, 1897, 2846, 475, 2423, 2425,
	2426, 2433, 1385, 1529, 1913, 893, 1911, 475, 2435, 939,
	2429, 1914, 2416, 2417, 2418, 1388, 1548, 2581, 2471, 2714,
	2048, 2442, 535, 12, 1954, 2403, 2444, 1949, 519, 519,
	2315, 2316, 2317, 2412, 1386, 2501, 901, 526, 48, 533,
	45, 534, 46, 525, 47, 1944, 2540, 2500, 1526, 469,
	1920, 2085, 2249, 29, 2472, 532, 7, 20, 555, 473,
	473, 473, 2546, 931, 473, 19, 2537, 2483, 2884, 2495,
	2480, 2353, 1239, 2488, 461, 1033, 475, 475, 2544, 475,
	531, 6, 2545, 2550, 475, 1526, 1526, 2548, 2519, 2485,
	2486, 939, 2502, 939, 126, 2688, 926, 530, 37, 1182,
	879, 1389, 2470, 1526, 1526, 2510, 2861, 524, 36, 1586,
	1587, 2654, 475, 2562, 18, 1929, 15, 1248, 1249, 2585,
	1916, 1242, 880, 1947, 574, 16, 1918, 2920, 2535, 2726,
	2578, 2001, 1987, 2518, 1980, 55, 1853, 888, 1591, 1526,
	475, 1924, 2574, 939, 475, 475, 939, 475, 54, 2503,
	1522, 3022, 2573, 2577, 2352, 3037, 53, 2159, 2160, 2557,
	1830, 1830, 939, 2556, 2579, 2564, 2565, 1250, 2559, 2520,
	1248, 1249, 2346, 2347, 2348, 2604, 2349, 2350, 2609, 889,
	2627, 2575, 2355, 1248, 1249, 1902, 2613, 1318, 2538, 2587,
	2586, 2060, 2059, 12, 2595, 1251, 2427, 2618, 909, 2594,
	2538, 475, 881, 935, 2538, 1529, 2598, 2359, 48, 2538,
	45, 2606, 46, 2491, 47, 2060, 2061, 1175, 1548, 1819,
	1250, 2007, 1174, 1778, 2419, 2568, 7, 2570, 1328, 1830,
	1830, 1830, 1830, 1830, 1830, 1830, 1830, 1830, 1830, 1830,
	1830, 1830, 1830, 1830, 1830, 1830, 1830, 1830, 2610, 1830,
	2607, 6, 1212, 1326, 2743, 1211, 2589, 1221, 1220, 888,
	475, 1206, 1202, 1199, 1185, 1146, 1594, 864, 37, 672,
	939, 475, 2643, 2804, 659, 475, 475, 475, 36, 2262,
	1628, 1186, 1630, 937, 2224, 1874, 1026, 2914, 2633, 2136,
	2866, 1678, 2436, 475, 2771, 2658, 2614, 1787, 475, 1329,
	475, 889, 51, 475, 475, 475, 475, 475, 2515, 1678,
	2445, 895, 475, 475, 926, 2668, 732, 2689, 939, 895,
	895, 2661, 926, 895, 939, 2659, 2670, 2509, 2693, 1974,
	1973, 475, 475, 2656, 2657, 2208, 942, 1603, 2702, 2703,
	2660, 1526, 756, 2664, 926, 2475, 1808, 1679, 2692, 758,
	473, 1049, 473, 1527, 475, 473, 761, 2519, 931, 760,
	2709, 1068, 759, 1528, 1352, 757, 2724, 473, 1525, 1105,
	2005, 475, 475, 926, 926, 2737, 649, 473, 473, 473,
	473, 931, 1607, 1467, 2666, 2722, 1902, 2725, 1749, 2760,
	2735, 1766, 2118, 2715, 2519, 1322, 2730, 939, 2736, 724,
	2734, 888, 2518, 2742, 2662, 2519, 1053, 2700, 736, 735,
	2763, 2710, 1764, 1133, 723, 2705, 2229, 2751, 2750, 2528,
	605, 2530, 2741, 2331, 2738, 1663, 2076, 1660, 2783, 2526,
	489, 473, 2156, 1103, 1836, 1828, 939, 1824, 2520, 2518,
	475, 1902, 475, 889, 939, 475, 1227, 2778, 1307, 2006,
	2518, 1145, 2713, 475, 1168, 1529, 2340, 2033, 1671, 939,
	878, 877, 605, 2336, 2717, 2812, 876, 2791, 1548, 2784,
	2785, 2744, 2938, 2787, 2935, 2520, 2759, 2655, 2789, 1597,
	2054, 2825, 2809, 2808, 1300, 2810, 2520, 728, 2209, 1045,
	2309, 1047, 1299, 2807, 1062, 860, 2875, 1158, 1157, 1156,
	475, 2247, 475, 3032, 2883, 926, 2523, 1529, 2932, 2788,
	475, 2829, 166, 163, 2770, 165, 1082, 1082, 1082, 935,
	1548, 164, 2519, 2294, 79, 33, 32, 106, 105, 2667,
	104, 103, 939, 102, 101, 100, 99, 2768, 98, 473,
	97, 2843, 96, 95, 94, 2845, 93, 92, 2831, 1902,
	2833, 2842, 475, 2701, 2837, 2848, 2847, 2519, 475, 2519,
	2706, 2841, 91, 2519, 2857, 475, 2836, 2518, 90, 2577,
	1131, 89, 88, 87, 86, 85, 2768, 2864, 84, 2878,
	83, 82, 2872, 81, 1687, 1529, 601, 2871, 598, 2711,
	78, 1526, 77, 30, 475, 475, 25, 110, 1548, 1687,
	111, 475, 2518, 2520, 2518, 24, 74, 73, 2518, 2895,
	28, 2897, 926, 2880, 17, 11, 21, 475, 131, 130,
	926, 926, 129, 2892, 128, 475, 127, 475, 14, 475,
	2869, 13, 125, 2538, 124, 2917, 123, 122, 2520, 121,
	2520, 2902, 2899, 1526, 2520, 2910, 2907, 475, 2752, 2753,
	475, 2927, 120, 475, 10, 939, 8, 2860, 2901, 109,
	2911, 9, 2912, 2754, 2942, 2943, 2370, 2940, 67, 68,
	2947, 2945, 1026, 2946, 895, 2948, 2929, 26, 2934, 41,
	40, 108, 157, 156, 2953, 2928, 155, 154, 150, 153,
	475, 2908, 2909, 2951, 151, 2790, 152, 149, 2881, 119,
	1428, 159, 158, 2887, 147, 144, 895, 2967, 2965, 2966,
	146, 2889, 1830, 148, 145, 475, 143, 1432, 2991, 160,
	118, 1526, 2992, 475, 2993, 895, 117, 2950, 116, 115,
	585, 114, 2980, 2999, 113, 519, 2519, 895, 2996, 475,
	5, 895, 2, 2997, 2998, 2538, 895, 1, 0, 1830,
	2990, 0, 0, 0, 3008, 3006, 3005, 0, 1429, 901,
	0, 473, 0, 3013, 3012, 3018, 3019, 2940, 3015, 0,
	0, 0, 0, 0, 0, 3021, 2994, 0, 0, 0,
	0, 2518, 0, 0, 0, 2519, 0, 3029, 0, 3028,
	0, 0, 0, 0, 3036, 1687, 895, 3035, 0, 2683,
	0, 0, 0, 0, 3040, 3041, 0, 0, 0, 0,
	0, 3042, 0, 0, 551, 3045, 3046, 2520, 0, 0,
	1433, 0, 3049, 3051, 2680, 39, 0, 2673, 0, 0,
	2518, 0, 2007, 0, 0, 0, 0, 0, 0, 42,
	2671, 0, 0, 0, 1830, 2675, 0, 0, 2888, 2818,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2819, 2820, 0, 0, 2681, 2520, 550, 0, 0,
	2906, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 0,
	2674, 0, 0, 0, 0, 461, 552, 0, 521, 0,
	1404, 0, 0, 57, 554, 0, 0, 1033, 58, 473,
	1466, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 1485, 39, 0, 0, 0, 0, 473, 895, 473,
	60, 473, 476, 0, 0, 519, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 550, 895, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 2676, 1436,
	0, 2677, 0, 0, 605, 461, 1033, 560, 0, 0,
	0, 0, 0, 552, 461, 1033, 203, 0, 931, 473,
	57, 554, 895, 0, 605, 58, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 2679, 0, 0, 0, 0,
	0, 0, 0, 0, 2682, 0, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 605, 0, 60, 1464, 0,
	473, 0, 0, 0, 0, 461, 473, 0, 473, 0,
	473, 0, 473, 0, 473, 0, 135, 63, 0, 64,
	0, 0, 0, 0, 1643, 0, 1644, 0, 1492, 0,
	1492, 0, 0, 0, 473, 473, 473, 167, 0, 0,
	0, 0, 0, 0, 0, 2067, 551, 0, 553, 0,
	0, 107, 0, 0, 0, 0, 0, 39, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 0, 0,
	0, 42, 0, 169, 0, 2105, 2106, 0, 2678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	895, 940, 940, 0, 0, 0, 61, 0, 1584, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 0, 0, 0, 0, 0, 0, 0,
	895, 161, 0, 135, 63, 895, 64, 895, 552, 162,
	0, 895, 0, 0, 0, 57, 554, 0, 0, 1627,
	58, 0, 0, 0, 167, 1633, 0, 1634, 0, 1635,
	134, 1636, 0, 1637, 0, 553, 0, 0, 107, 0,
	0, 0, 0, 2182, 2183, 2184, 0, 0, 0, 0,
	0, 0, 60, 1646, 1062, 0, 0, 1382, 0, 0,
	169, 0, 0, 0, 0, 585, 0, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 2159, 2160, 0, 2177, 2178,
	2179, 0, 0, 519, 0, 519, 0, 0, 901, 168,
	0, 0, 473, 2616, 0, 0, 0, 1905, 161, 0,
	0, 0, 895, 0, 473, 0, 162, 0, 0, 0,
	0, 0, 473, 0, 2159, 2160, 0, 2177, 2178, 2179,
	0, 0, 0, 0, 473, 0, 0, 522, 0, 0,
	0, 0, 2615, 2174, 0, 0, 0, 0, 473, 0,
	0, 61, 0, 0, 461, 1960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1970, 0, 0, 1033, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 63,
	0, 64, 2174, 0, 895, 0, 0, 0, 0, 0,
	0, 1905, 0, 519, 711, 473, 0, 0, 473, 167,
	473, 0, 473, 0, 473, 473, 0, 931, 0, 2165,
	553, 0, 0, 107, 0, 0, 0, 0, 1905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 169, 0, 0, 0, 0,
	0, 1891, 0, 0, 0, 0, 0, 0, 2165, 0,
	0, 0, 0, 0, 2180, 0, 0, 0, 0, 927,
	927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 168, 0, 0, 0, 560, 0,
	0, 0, 2175, 161, 0, 0, 0, 935, 927, 927,
	0, 162, 0, 2180, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 2394, 2395, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 473,
	0, 2175, 0, 0, 0, 0, 1033, 0, 1033, 0,
	0, 0, 0, 0, 2010, 0, 0, 1082, 0, 1082,
	0, 1082, 0, 935, 935, 0, 0, 0, 0, 473,
	473, 473, 0, 473, 0, 0, 0, 0, 0, 0,
	733, 71, 0, 0, 0, 2176, 0, 0, 0, 0,
	0, 0, 473, 2446, 2447, 2448, 2449, 2450, 2451, 2452,
	2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462,
	2463, 2464, 0, 2468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2176, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2064, 0,
	0, 0, 0, 0, 0, 0, 0, 2171, 2172, 2173,
	0, 0, 0, 0, 2170, 2168, 2169, 2161, 2162, 2163,
	2164, 2166, 2167, 0, 0, 0, 0, 688, 2072, 935,
	2074, 0, 0, 0, 0, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2171, 2172, 2173, 0,
	0, 2087, 833, 2170, 2168, 2169, 2161, 2162, 2163, 2164,
	2166, 2167, 0, 0, 0, 1035, 1037, 0, 0, 0,
	890, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 901, 901, 0, 0, 901, 0, 0, 0,
	0, 519, 0, 0, 519, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 0, 0, 0, 0, 0, 0,
	0, 473, 1905, 2243, 0, 0, 0, 1905, 0, 0,
	2243, 0, 0, 0, 0, 0, 0, 1905, 2243, 1905,
	2243, 2243, 2028, 0, 0, 0, 0, 0, 0, 473,
	0, 0, 0, 39, 1132, 0, 1466, 0, 0, 0,
	1136, 0, 0, 0, 0, 0, 0, 42, 473, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 473, 0, 0, 0, 0, 0, 711, 0,
	0, 0, 711, 2159, 2160, 2029, 2177, 2178, 2179, 0,
	0, 0, 0, 0, 1485, 0, 1485, 0, 473, 0,
	473, 2401, 0, 0, 0, 473, 0, 473, 0, 0,
	0, 931, 0, 0, 2030, 0, 1905, 0, 519, 0,
	0, 0, 554, 0, 0, 1905, 0, 0, 928, 0,
	0, 941, 941, 0, 0, 0, 0, 0, 0, 0,
	1033, 2174, 0, 0, 0, 0, 0, 0, 1248, 1249,
	2240, 1281, 1282, 1283, 1291, 1292, 1293, 0, 60, 2366,
	1033, 0, 0, 0, 0, 0, 1284, 2159, 2160, 0,
	2177, 2178, 2179, 1251, 0, 0, 1297, 0, 1062, 0,
	0, 0, 0, 0, 0, 2400, 0, 0, 2386, 0,
	0, 0, 1301, 1302, 1303, 1304, 1305, 0, 1250, 0,
	0, 0, 0, 473, 0, 1314, 1270, 2165, 0, 0,
	0, 2293, 0, 1267, 0, 1323, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 2174, 0, 940, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 2312, 0, 0,
	0, 0, 0, 0, 2319, 0, 2321, 0, 0, 0,
	0, 0, 2180, 0, 2431, 0, 0, 61, 0, 0,
	0, 0, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 2775, 0, 0, 0,
	2175, 0, 0, 0, 135, 63, 0, 64, 0, 0,
	0, 2165, 0, 0, 1288, 1298, 0, 1278, 1279, 1280,
	0, 0, 0, 701, 0, 167, 0, 0, 0, 0,
	0, 0, 0, 2799, 0, 0, 553, 1294, 1295, 107,
	0, 203, 0, 0, 0, 1265, 1266, 0, 927, 0,
	203, 0, 1248, 1249, 0, 0, 2180, 901, 1286, 0,
	0, 169, 2390, 519, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 519, 1376, 1376, 1376, 1251, 0, 0,
	0, 1296, 940, 2176, 2175, 0, 0, 0, 0, 2517,
	0, 0, 0, 0, 0, 1285, 0, 0, 0, 0,
	168, 203, 1250, 0, 0, 0, 0, 0, 2539, 161,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	2539, 0, 0, 0, 2539, 0, 0, 0, 2863, 2539,
	0, 1277, 0, 0, 0, 0, 0, 0, 134, 928,
	928, 0, 1905, 1485, 0, 1485, 0, 0, 1272, 0,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 2176, 928, 928,
	0, 1289, 0, 0, 0, 928, 1256, 0, 1905, 901,
	0, 0, 0, 0, 0, 2171, 2172, 2173, 0, 0,
	0, 0, 2170, 2168, 2169, 2161, 2162, 2163, 2164, 2166,
	2167, 1278, 1279, 1280, 688, 0, 1033, 0, 0, 0,
	931, 473, 0, 473, 2159, 2160, 0, 2177, 2178, 2179,
	0, 0, 0, 0, 0, 0, 1310, 0, 1313, 0,
	0, 0, 0, 0, 0, 1319, 0, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 1271,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 2634, 0, 2171,
	2172, 2173, 2174, 0, 2639, 0, 2170, 2168, 2169, 2161,
	2162, 2163, 2164, 2166, 2167, 0, 0, 0, 928, 2563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 901, 0, 0, 0, 0, 1033, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 519, 2165, 0,
	0, 1905, 2243, 1905, 0, 0, 0, 0, 0, 0,
	2608, 0, 935, 927, 0, 0, 0, 0, 2517, 1033,
	0, 2181, 711, 711, 1905, 940, 2243, 0, 0, 1033,
	1033, 473, 1905, 2243, 0, 0, 0, 0, 473, 473,
	0, 0, 0, 2180, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 1399, 0, 2517, 0, 1033, 1970, 0,
	0, 0, 0, 0, 0, 0, 2517, 0, 0, 0,
	0, 2175, 0, 0, 0, 0, 0, 0, 0, 0,
	1905, 0, 0, 0, 927, 927, 927, 0, 0, 927,
	0, 0, 1661, 0, 1666, 0, 0, 2366, 2366, 0,
	1673, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 0, 1729, 0, 1731, 1732,
	1733, 1734, 0, 0, 2176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1905, 1757, 2243, 0,
	2704, 2793, 0, 0, 1314, 0, 0, 1062, 0, 473,
	1248, 1249, 0, 2517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 1799, 1800, 1801, 1802, 1803, 0,
	0, 0, 0, 0, 0, 1251, 0, 0, 0, 0,
	0, 0, 0, 2539, 0, 1826, 0, 1838, 2517, 0,
	2517, 1843, 1848, 0, 2517, 0, 473, 0, 473, 0,
	1250, 0, 0, 0, 0, 0, 1033, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2159, 2160, 0, 2177, 2178, 2179, 2171, 2172, 2173, 0,
	0, 0, 0, 2170, 2168, 2169, 2161, 2162, 2163, 2164,
	2166, 2167, 1248, 1249, 0, 0, 0, 0, 2431, 0,
	0, 0, 0, 0, 519, 0, 0, 0, 0, 0,
	0, 2793, 0, 0, 0, 0, 0, 1251, 0, 0,
	0, 0, 0, 0, 1256, 0, 0, 0, 2174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2800, 0,
	1905, 2243, 1250, 0, 0, 2539, 0, 473, 0, 1278,
	1279, 1280, 0, 0, 1248, 1249, 0, 0, 0, 0,
	928, 0, 0, 2243, 0, 0, 0, 941, 0, 0,
	0, 1033, 0, 1033, 941, 473, 0, 0, 0, 1251,
	0, 0, 0, 0, 0, 2838, 0, 2840, 0, 0,
	0, 0, 0, 2925, 2165, 0, 1033, 1271, 0, 473,
	0, 0, 0, 0, 1250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1256, 2517, 688, 0,
	0, 688, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2431, 0, 0, 2180,
	0, 1278, 1279, 1280, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1033, 0, 0, 0, 0, 2517, 2175, 928, 1905,
	0, 0, 0, 0, 0, 0, 0, 0, 1256, 1747,
	1272, 0, 0, 0, 0, 2793, 2893, 0, 0, 1271,
	0, 0, 701, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 941, 1278, 1279, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 2913, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 927, 0, 0, 2931, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	2176, 1271, 0, 0, 940, 0, 0, 940, 0, 0,
	940, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 927, 927, 927,
	0, 0, 1399, 941, 0, 0, 0, 0, 0, 0,
	1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0,
	71, 0, 2089, 2090, 0, 0, 0, 0, 2095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 0, 71, 2108, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	2114, 0, 0, 0, 0, 0, 2121, 0, 0, 0,
	0, 2126, 2171, 2172, 2173, 0, 0, 941, 0, 2170,
	2168, 2169, 2161, 2162, 2163, 2164, 2166, 2167, 2140, 0,
	0, 0, 71, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 1848, 1848, 1848, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 1376, 0, 0, 0, 0, 941,
	0, 0, 2214, 0, 0, 0, 1252, 1253, 1254, 1255,
	1257, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 928, 928, 0, 0, 928,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1747,
	0, 0, 0, 940, 0, 940, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 711, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 2388, 0, 0, 0,
	1673, 0, 0, 0, 0, 940, 2392, 0, 940, 2393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2398, 0, 0, 940, 0, 0, 0, 0, 0,
	2406, 0, 0, 0, 0, 0, 0, 0, 2410, 0,
	0, 0, 2214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 2437, 2438, 2439, 0, 0, 0, 0, 2441, 0,
	0, 0, 0, 0, 0, 2443, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 890, 890, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2473, 2474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 2490, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 2511,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	940, 0, 0, 0, 927, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 927, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 927, 927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1376, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 2588, 0, 0, 0, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1284, 0, 0, 0, 0,
	71, 0, 1251, 0, 0, 1297, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 2617, 928, 0, 1250, 2620, 2621,
	0, 940, 2623, 0, 941, 1270, 0, 0, 0, 2625,
	0, 0, 1267, 2628, 941, 0, 0, 941, 1248, 1249,
	941, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0,
	2635, 0, 0, 0, 0, 0, 1284, 928, 928, 928,
	0, 0, 0, 1251, 0, 0, 1297, 927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1273, 1274, 1275, 1276, 0, 2648, 1250, 0,
	0, 1256, 0, 0, 940, 0, 1270, 0, 928, 0,
	0, 0, 0, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 1298, 0, 1278, 1279, 1280, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2690, 0, 1294, 1295, 0, 0,
	0, 890, 0, 0, 1265, 1266, 0, 0, 0, 0,
	0, 0, 0, 1273, 1274, 1275, 1276, 1286, 0, 0,
	0, 0, 1256, 0, 1271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	1296, 0, 927, 927, 1288, 1298, 0, 1278, 1279, 1280,
	0, 0, 0, 0, 1285, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 0, 0, 1265, 1266, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1286, 0,
	1277, 0, 0, 2764, 2765, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1272, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 2774, 0, 0,
	0, 0, 0, 890, 0, 1285, 0, 0, 0, 0,
	1289, 2782, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 2817, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1289, 0, 0, 0, 0, 1287, 0, 0, 1262,
	1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252,
	1253, 1254, 1255, 1257, 1258, 0, 0, 0, 0, 0,
	0, 0, 0, 2145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 941, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2874, 1287, 0, 2877,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 2144, 941, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 71, 0, 0, 0, 1251, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1250, 2964, 2964, 0, 0, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 1267, 0, 0,
	0, 2981, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 0, 2964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 1274, 1275,
	1276, 0, 0, 0, 0, 0, 1256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	941, 0, 0, 0, 928, 0, 941, 0, 1288, 1298,
	0, 1278, 1279, 1280, 0, 0, 0, 0, 0, 0,
	2964, 0, 0, 0, 0, 0, 928, 71, 0, 0,
	0, 1294, 1295, 0, 0, 0, 0, 0, 0, 1265,
	1266, 0, 0, 0, 0, 0, 1747, 0, 0, 0,
	0, 0, 1286, 0, 0, 928, 928, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 1277, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290,
	0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	0, 0, 0, 0, 0, 0, 0, 0, 2143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 928, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 273, 274,
	275, 276, 943, 277, 944, 945, 946, 947, 209, 948,
	949, 950, 951, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 952, 282, 216, 217, 283, 284, 285,
	953, 954, 218, 219, 220, 955, 286, 221, 956, 902,
	957, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 958, 296, 0, 297, 298, 959, 835, 299, 300,
	301, 960, 961, 963, 962, 964, 965, 966, 302, 303,
	477, 304, 222, 305, 223, 224, 967, 306, 968, 307,
	969, 308, 970, 971, 309, 310, 972, 311, 973, 0,
	974, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	975, 836, 976, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 977, 323, 978, 979, 837, 324,
	980, 325, 231, 981, 232, 982, 326, 327, 328, 329,
	330, 331, 233, 234, 839, 983, 235, 0, 0, 0,
	335, 984, 332, 985, 838, 333, 236, 334, 237, 238,
	239, 240, 241, 986, 242, 987, 336, 840, 841, 337,
	338, 339, 842, 243, 244, 0, 0, 340, 341, 342,
	988, 344, 343, 989, 245, 843, 345, 346, 844, 990,
	347, 348, 991, 992, 349, 0, 350, 904, 903, 351,
	352, 354, 246, 353, 845, 355, 356, 358, 357, 993,
	994, 846, 995, 247, 359, 248, 360, 361, 996, 362,
	363, 997, 998, 364, 365, 999, 1000, 366, 249, 847,
	367, 848, 250, 368, 369, 370, 371, 372, 373, 374,
	1001, 375, 251, 376, 252, 377, 1002, 378, 379, 380,
	381, 382, 253, 383, 384, 1003, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 1004,
	397, 849, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 1005, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 1006, 418, 403, 404,
	419, 850, 420, 259, 260, 421, 1007, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 1008, 427, 262, 1009,
	430, 431, 1010, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 1011, 263, 264, 265, 1012, 1013, 440,
	441, 266, 267, 1014, 442, 443, 444, 445, 1015, 1016,
	446, 447, 448, 449, 1017, 450, 1018, 268, 451, 452,
	453, 269, 270, 1019, 1020, 454, 271, 1021, 1022, 1023,
	1024, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 0, 1879, 0, 0,
	0, 0, 0, 0, 0, 0, 1880, 273, 274, 275,
	276, 943, 277, 944, 945, 946, 947, 209, 948, 949,
	950, 951, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 952, 282, 216, 217, 283, 284, 285, 953,
	954, 218, 219, 220, 955, 286, 221, 956, 902, 957,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	958, 296, 0, 297, 298, 959, 835, 299, 300, 301,
	960, 961, 963, 962, 964, 965, 966, 302, 303, 477,
	304, 222, 305, 223, 224, 967, 306, 968, 307, 969,
	308, 970, 971, 309, 310, 972, 311, 973, 0, 974,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 975,
	836, 976, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 977, 323, 978, 979, 837, 324, 980,
	325, 231, 981, 232, 982, 326, 327, 328, 329, 330,
	331, 233, 234, 839, 983, 235, 0, 0, 0, 335,
	984, 332, 985, 838, 333, 236, 334, 237, 238, 239,
	240, 241, 986, 242, 987, 336, 840, 841, 337, 338,
	339, 842, 243, 244, 0, 0, 340, 341, 342, 988,
	344, 343, 989, 245, 843, 345, 346, 844, 990, 347,
	348, 991, 992, 349, 0, 350, 904, 903, 351, 352,
	354, 246, 353, 845, 355, 356, 358, 357, 993, 994,
	846, 995, 247, 359, 248, 360, 361, 996, 362, 363,
	997, 998, 364, 365, 999, 1000, 366, 249, 847, 367,
	848, 250, 368, 369, 370, 371, 372, 373, 374, 1001,
	375, 251, 376, 252, 377, 1002, 378, 379, 380, 381,
	382, 253, 383, 384, 1003, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 1004, 397,
	849, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 1005, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 1006, 418, 403, 404, 419,
	850, 420, 259, 260, 421, 1007, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 1008, 427, 262, 1009, 430,
	431, 1010, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 1011, 263, 264, 265, 1012, 1013, 440, 441,
	266, 267, 1014, 442, 443, 444, 445, 1015, 1016, 446,
	447, 448, 449, 1017, 450, 1018, 268, 451, 452, 453,
	269, 270, 1019, 1020, 454, 271, 1021, 1022, 1023, 1024,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2663, 273, 274, 275,
	276, 943, 277, 944, 945, 946, 947, 209, 948, 949,
	950, 951, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 952, 282, 216, 217, 283, 284, 285, 953,
	954, 218, 219, 220, 955, 286, 221, 956, 902, 957,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	958, 296, 0, 297, 298, 959, 835, 299, 300, 301,
	960, 961, 963, 962, 964, 965, 966, 302, 303, 477,
	304, 222, 305, 223, 224, 967, 306, 968, 307, 969,
	308, 970, 971, 309, 310, 972, 311, 973, 0, 974,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 975,
	836, 976, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 977, 323, 978, 979, 837, 324, 980,
	325, 231, 981, 232, 982, 326, 327, 328, 329, 330,
	331, 233, 234, 839, 983, 235, 0, 0, 0, 335,
	984, 332, 985, 838, 333, 236, 334, 237, 238, 239,
	240, 241, 986, 242, 987, 336, 840, 841, 337, 338,
	339, 842, 243, 244, 0, 0, 340, 341, 342, 988,
	344, 343, 989, 245, 843, 345, 346, 844, 990, 347,
	348, 991, 992, 349, 0, 350, 904, 903, 351, 352,
	354, 246, 353, 845, 355, 356, 358, 357, 993, 994,
	846, 995, 247, 359, 248, 360, 361, 996, 362, 363,
	997, 998, 364, 365, 999, 1000, 366, 249, 847, 367,
	848, 250, 368, 369, 370, 371, 372, 373, 374, 1001,
	375, 251, 376, 252, 377, 1002, 378, 379, 380, 381,
	382, 253, 383, 384, 1003, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 1004, 397,
	849, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 1005, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 1006, 418, 403, 404, 419,
	850, 420, 259, 260, 421, 1007, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 1008, 427, 262, 1009, 430,
	431, 1010, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 1011, 263, 264, 265, 1012, 1013, 440, 441,
	266, 267, 1014, 442, 443, 444, 445, 1015, 1016, 446,
	447, 448, 449, 1017, 450, 1018, 268, 451, 452, 453,
	269, 270, 1019, 1020, 454, 271, 1021, 1022, 1023, 1024,
	455, 456, 272, 457, 458, 459, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2769, 273, 274, 275, 276, 943, 277, 944, 945,
	946, 947, 209, 948, 949, 950, 951, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 952, 282, 216,
	217, 283, 284, 285, 953, 954, 218, 219, 220, 955,
	286, 221, 956, 902, 957, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 958, 296, 0, 297, 298,
	959, 835, 299, 300, 301, 960, 961, 963, 962, 964,
	965, 966, 302, 303, 477, 304, 222, 305, 223, 224,
	967, 306, 968, 307, 969, 308, 970, 971, 309, 310,
	972, 311, 973, 0, 974, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 975, 836, 976, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 977, 323,
	978, 979, 837, 324, 980, 325, 231, 981, 232, 982,
	326, 327, 328, 329, 330, 331, 233, 234, 839, 983,
	235, 0, 0, 0, 335, 984, 332, 985, 838, 333,
	236, 334, 237, 238, 239, 240, 241, 986, 242, 987,
	336, 840, 841, 337, 338, 339, 842, 243, 244, 0,
	0, 340, 341, 342, 988, 344, 343, 989, 245, 843,
	345, 346, 844, 990, 347, 348, 991, 992, 349, 0,
	350, 904, 903, 351, 352, 354, 246, 353, 845, 355,
	356, 358, 357, 993, 994, 846, 995, 247, 359, 248,
	360, 361, 996, 362, 363, 997, 998, 364, 365, 999,
	1000, 366, 249, 847, 367, 848, 250, 368, 369, 370,
	371, 372, 373, 374, 1001, 375, 251, 376, 252, 377,
	1002, 378, 379, 380, 381, 382, 253, 383, 384, 1003,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 1004, 397, 849, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	1005, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	1006, 418, 403, 404, 419, 850, 420, 259, 260, 421,
	1007, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	1008, 427, 262, 1009, 430, 431, 1010, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 1011, 263, 264,
	265, 1012, 1013, 440, 441, 266, 267, 1014, 442, 443,
	444, 445, 1015, 1016, 446, 447, 448, 449, 1017, 450,
	1018, 268, 451, 452, 453, 269, 270, 1019, 1020, 454,
	271, 1021, 1022, 1023, 1024, 455, 456, 272, 457, 458,
	459, 938, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2413, 273, 274, 275,
	276, 943, 277, 944, 945, 946, 947, 209, 948, 949,
	950, 951, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 952, 282, 216, 217, 283, 284, 285, 953,
	954, 218, 219, 220, 955, 286, 221, 956, 902, 957,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	958, 296, 0, 297, 298, 959, 835, 299, 300, 301,
	960, 961, 963, 962, 964, 965, 966, 302, 303, 477,
	304, 222, 305, 223, 224, 967, 306, 968, 307, 969,
	308, 970, 971, 309, 310, 972, 311, 973, 0, 974,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 975,
	836, 976, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 977, 323, 978, 979, 837, 324, 980,
	325, 231, 981, 232, 982, 326, 327, 328, 329, 330,
	331, 233, 234, 839, 983, 235, 0, 0, 0, 335,
	984, 332, 985, 838, 333, 236, 334, 237, 238, 239,
	240, 241, 986, 242, 987, 336, 840, 841, 337, 338,
	339, 842, 243, 244, 0, 0, 340, 341, 342, 988,
	344, 343, 989, 245, 843, 345, 346, 844, 990, 347,
	348, 991, 992, 349, 0, 350, 904, 903, 351, 352,
	354, 246, 353, 845, 355, 356, 358, 357, 993, 994,
	846, 995, 247, 359, 248, 360, 361, 996, 362, 363,
	997, 998, 364, 365, 999, 1000, 366, 249, 847, 367,
	848, 250, 368, 369, 370, 371, 372, 373, 374, 1001,
	375, 251, 376, 252, 377, 1002, 378, 379, 380, 381,
	382, 253, 383, 384, 1003, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 1004, 397,
	849, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 1005, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 1006, 418, 403, 404, 419,
	850, 420, 259, 260, 421, 1007, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 1008, 427, 262, 1009, 430,
	431, 1010, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 1011, 263, 264, 265, 1012, 1013, 440, 441,
	266, 267, 1014, 442, 443, 444, 445, 1015, 1016, 446,
	447, 448, 449, 1017, 450, 1018, 268, 451, 452, 453,
	269, 270, 1019, 1020, 454, 271, 1021, 1022, 1023, 1024,
	455, 456, 272, 457, 458, 459, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2297, 273, 274, 275, 276, 943, 277, 944, 945,
	946, 947, 209, 948, 949, 950, 951, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 952, 282, 216,
	217, 283, 284, 285, 953, 954, 218, 219, 220, 955,
	286, 221, 956, 902, 957, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 958, 296, 0, 297, 298,
	959, 835, 299, 300, 301, 960, 961, 963, 962, 964,
	965, 966, 302, 303, 477, 304, 222, 305, 223, 224,
	967, 306, 968, 307, 969, 308, 970, 971, 309, 310,
	972, 311, 973, 0, 974, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 975, 836, 976, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 977, 323,
	978, 979, 837, 324, 980, 325, 231, 981, 232, 982,
	326, 327, 328, 329, 330, 331, 233, 234, 839, 983,
	235, 0, 0, 0, 335, 984, 332, 985, 838, 333,
	236, 334, 237, 238, 239, 240, 241, 986, 242, 987,
	336, 840, 841, 337, 338, 339, 842, 243, 244, 0,
	0, 340, 341, 342, 988, 344, 343, 989, 245, 843,
	345, 346, 844, 990, 347, 348, 991, 992, 349, 0,
	350, 904, 903, 351, 352, 354, 246, 353, 845, 355,
	356, 358, 357, 993, 994, 846, 995, 247, 359, 248,
	360, 361, 996, 362, 363, 997, 998, 364, 365, 999,
	1000, 366, 249, 847, 367, 848, 250, 368, 369, 370,
	371, 372, 373, 374, 1001, 375, 251, 376, 252, 377,
	1002, 378, 379, 380, 381, 382, 253, 383, 384, 1003,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 1004, 397, 849, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	1005, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	1006, 418, 403, 404, 419, 850, 420, 259, 260, 421,
	1007, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	1008, 427, 262, 1009, 430, 431, 1010, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 1011, 263, 264,
	265, 1012, 1013, 440, 441, 266, 267, 1014, 442, 443,
	444, 445, 1015, 1016, 446, 447, 448, 449, 1017, 450,
	1018, 268, 451, 452, 453, 269, 270, 1019, 1020, 454,
	271, 1021, 1022, 1023, 1024, 455, 456, 272, 457, 458,
	459, 938, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1770, 273, 274, 275,
	276, 943, 277, 944, 945, 946, 947, 209, 948, 949,
	950, 951, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 952, 282, 216, 217, 283, 284, 285, 953,
	954, 218, 219, 220, 955, 286, 221, 956, 902, 957,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	958, 296, 0, 297, 298, 959, 835, 299, 300, 301,
	960, 961, 963, 962, 964, 965, 966, 302, 303, 477,
	304, 222, 305, 223, 224, 967, 306, 968, 307, 969,
	308, 970, 971, 309, 310, 972, 311, 973, 0, 974,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 975,
	836, 976, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 977, 323, 978, 979, 837, 324, 980,
	325, 231, 981, 232, 982, 326, 327, 328, 329, 330,
	331, 233, 234, 839, 983, 235, 0, 0, 0, 335,
	984, 332, 985, 838, 333, 236, 334, 237, 238, 239,
	240, 241, 986, 242, 987, 336, 840, 841, 337, 338,
	339, 842, 243, 244, 0, 0, 340, 341, 342, 988,
	344, 343, 989, 245, 843, 345, 346, 844, 990, 347,
	348, 991, 992, 349, 0, 350, 904, 903, 351, 352,
	354, 246, 353, 845, 355, 356, 358, 357, 993, 994,
	846, 995, 247, 359, 248, 360, 361, 996, 362, 363,
	997, 998, 364, 365, 999, 1000, 366, 249, 847, 367,
	848, 250, 368, 369, 370, 371, 372, 373, 374, 1001,
	375, 251, 376, 252, 377, 1002, 378, 379, 380, 381,
	382, 253, 383, 384, 1003, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 1004, 397,
	849, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 1005, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 1006, 418, 403, 404, 419,
	850, 420, 259, 260, 421, 1007, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 1008, 427, 262, 1009, 430,
	431, 1010, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 1011, 263, 264, 265, 1012, 1013, 440, 441,
	266, 267, 1014, 442, 443, 444, 445, 1015, 1016, 446,
	447, 448, 449, 1017, 450, 1018, 268, 451, 452, 453,
	269, 270, 1019, 1020, 454, 271, 1021, 1022, 1023, 1024,
	455, 456, 272, 457, 458, 459, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 273, 274, 275, 276, 943, 277, 944, 945,
	946, 947, 209, 948, 949, 950, 951, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 952, 282, 216,
	217, 283, 284, 285, 953, 954, 218, 219, 220, 955,
	286, 221, 956, 902, 957, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 958, 296, 0, 297, 298,
	959, 835, 299, 300, 301, 960, 961, 963, 962, 964,
	965, 966, 302, 303, 477, 304, 222, 305, 223, 224,
	967, 306, 968, 307, 969, 308, 970, 971, 309, 310,
	972, 311, 973, 0, 974, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 975, 836, 976, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 977, 323,
	978, 979, 837, 324, 980, 325, 231, 981, 232, 982,
	326, 327, 328, 329, 330, 331, 233, 234, 839, 983,
	235, 0, 0, 0, 335, 984, 332, 985, 838, 333,
	236, 334, 237, 238, 239, 240, 241, 986, 242, 987,
	336, 840, 841, 337, 338, 339, 842, 243, 244, 0,
	0, 340, 341, 342, 988, 344, 343, 989, 245, 843,
	345, 346, 844, 990, 347, 348, 991, 992, 349, 0,
	350, 904, 903, 351, 352, 354, 246, 353, 845, 355,
	356, 358, 357, 993, 994, 846, 995, 247, 359, 248,
	360, 361, 996, 362, 363, 997, 998, 364, 365, 999,
	1000, 366, 249, 847, 367, 848, 250, 368, 369, 370,
	371, 372, 373, 374, 1001, 375, 251, 376, 252, 377,
	1002, 378, 379, 380, 381, 382, 253, 383, 384, 1003,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 1004, 397, 849, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	1005, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	1006, 418, 403, 404, 419, 850, 420, 259, 260, 421,
	1007, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	1008, 427, 262, 1009, 430, 431, 1010, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 1011, 263, 264,
	265, 1012, 1013, 440, 441, 266, 267, 1014, 442, 443,
	444, 445, 1015, 1016, 446, 447, 448, 449, 1017, 450,
	1018, 268, 451, 452, 453, 269, 270, 1019, 1020, 454,
	271, 1021, 1022, 1023, 1024, 455, 456, 272, 457, 458,
	459, 1777, 0, 754, 742, 743, 740, 741, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 1774, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 720, 306, 0,
	307, 0, 308, 1775, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 1773, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 1776, 0, 0, 0, 0, 0, 0,
	727, 1771, 0, 0, 0, 702, 730, 754, 742, 743,
	740, 741, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 305, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 351, 352, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 0, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 167, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 169, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 1109, 832, 0, 0,
	454, 271, 0, 0, 0, 161, 455, 456, 272, 457,
	458, 459, 718, 162, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 754, 742, 743,
	740, 741, 731, 0, 1316, 0, 0, 0, 0, 0,
	730, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 305, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 351, 352, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 0, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 167, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 169, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 1109, 832, 0, 0,
	454, 271, 0, 0, 0, 161, 455, 456, 272, 457,
	458, 459, 718, 162, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 754, 742, 743,
	740, 741, 731, 0, 1316, 0, 0, 0, 0, 0,
	730, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 1844, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 305, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 1849, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 1845, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 351, 352, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 0, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 1846, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 269, 832, 0, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 718, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 754, 742, 743,
	740, 741, 731, 0, 727, 0, 0, 0, 0, 0,
	730, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 305, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 351, 352, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 2580, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 269, 832, 0, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 718, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 1377, 754, 742,
	743, 740, 741, 731, 727, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 789, 734, 0, 0, 0, 278,
	279, 280, 210, 796, 774, 797, 762, 798, 799, 0,
	282, 764, 763, 283, 284, 285, 737, 788, 800, 801,
	220, 0, 286, 793, 0, 779, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 835, 299, 300, 301, 782, 780, 781,
	785, 0, 783, 784, 302, 303, 477, 304, 802, 305,
	803, 804, 720, 306, 0, 307, 0, 308, 0, 0,
	795, 310, 0, 311, 0, 0, 0, 725, 312, 313,
	315, 318, 314, 319, 805, 806, 749, 836, 0, 0,
	0, 0, 0, 320, 321, 807, 808, 809, 0, 322,
	0, 323, 0, 0, 837, 324, 0, 325, 810, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 790, 792,
	839, 0, 773, 0, 0, 0, 335, 1675, 332, 0,
	838, 333, 811, 777, 812, 813, 814, 815, 816, 0,
	778, 0, 336, 840, 841, 337, 338, 339, 842, 817,
	818, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	819, 843, 345, 346, 844, 0, 347, 348, 0, 0,
	349, 0, 350, 722, 721, 351, 352, 354, 766, 353,
	845, 355, 356, 358, 357, 717, 0, 846, 750, 791,
	359, 820, 360, 361, 0, 775, 776, 0, 0, 364,
	365, 0, 0, 366, 249, 847, 367, 848, 821, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 822, 376,
	252, 377, 1674, 378, 379, 380, 381, 382, 823, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 849, 398, 399,
	400, 401, 726, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 767, 768, 769, 770, 413,
	416, 417, 786, 418, 403, 404, 419, 850, 420, 824,
	771, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	825, 426, 0, 427, 826, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 765, 439, 0,
	827, 828, 829, 0, 0, 440, 441, 830, 831, 748,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	787, 450, 0, 772, 451, 452, 453, 269, 832, 0,
	0, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 718, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 0, 0, 714, 715, 0, 0,
	0, 0, 0, 0, 0, 727, 0, 0, 0, 0,
	710, 730, 754, 742, 743, 740, 741, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 789, 734,
	0, 0, 0, 278, 279, 280, 210, 796, 774, 797,
	762, 798, 799, 0, 282, 764, 763, 283, 284, 285,
	737, 788, 800, 801, 220, 0, 286, 793, 0, 779,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 835, 299, 300,
	301, 782, 780, 781, 785, 0, 783, 784, 302, 303,
	477, 304, 802, 305, 803, 804, 720, 306, 0, 307,
	0, 308, 0, 0, 795, 310, 0, 311, 0, 0,
	0, 725, 312, 313, 315, 318, 314, 319, 805, 806,
	749, 836, 0, 0, 0, 0, 0, 320, 321, 807,
	808, 809, 0, 322, 0, 323, 0, 0, 837, 324,
	0, 325, 810, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 790, 792, 839, 0, 773, 0, 0, 0,
	335, 0, 332, 0, 838, 333, 811, 777, 812, 813,
	814, 815, 816, 0, 778, 0, 336, 840, 841, 337,
	338, 339, 842, 817, 818, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 819, 843, 345, 346, 844, 0,
	347, 348, 0, 0, 349, 0, 350, 722, 721, 351,
	352, 354, 766, 353, 845, 355, 356, 358, 357, 717,
	0, 846, 750, 791, 359, 820, 360, 361, 0, 775,
	776, 712, 0, 364, 365, 0, 0, 366, 249, 847,
	367, 848, 821, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 822, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 823, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 849, 398, 399, 400, 401, 726, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 767,
	768, 769, 770, 413, 416, 417, 786, 418, 403, 404,
	419, 850, 420, 824, 771, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 825, 426, 0, 427, 826, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 765, 439, 0, 827, 828, 829, 0, 0, 440,
	441, 830, 831, 748, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 787, 450, 0, 772, 451, 452,
	453, 269, 832, 0, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 718, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 0, 0,
	714, 715, 754, 742, 743, 740, 741, 731, 0, 727,
	0, 0, 0, 0, 0, 730, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 789, 734,
	0, 0, 0, 278, 279, 280, 210, 796, 774, 797,
	762, 798, 799, 0, 282, 764, 763, 283, 284, 285,
	737, 788, 800, 801, 220, 0, 286, 793, 0, 779,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 835, 299, 300,
	301, 782, 780, 781, 785, 0, 783, 784, 302, 303,
	477, 304, 802, 305, 803, 804, 720, 306, 0, 307,
	0, 308, 0, 0, 795, 310, 0, 311, 0, 0,
	0, 725, 312, 313, 315, 318, 314, 319, 805, 806,
	749, 836, 0, 0, 0, 0, 0, 320, 321, 807,
	808, 809, 0, 322, 0, 323, 0, 0, 837, 324,
	0, 325, 810, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 790, 792, 839, 0, 773, 0, 0, 0,
	335, 0, 332, 0, 838, 333, 811, 777, 812, 813,
	814, 815, 816, 0, 778, 0, 336, 840, 841, 337,
	338, 339, 842, 817, 818, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 819, 843, 345, 346, 844, 0,
	347, 348, 0, 0, 349, 0, 350, 722, 721, 351,
	352, 354, 766, 353, 845, 355, 356, 358, 357, 717,
	0, 846, 750, 791, 359, 820, 360, 361, 0, 775,
	776, 0, 0, 364, 365, 0, 0, 366, 249, 847,
	367, 848, 821, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 822, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 823, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 849, 398, 399, 400, 401, 726, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 767,
	768, 769, 770, 413, 416, 417, 786, 418, 403, 404,
	419, 850, 420, 824, 771, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 825, 426, 0, 427, 826, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 765, 439, 0, 827, 828, 829, 0, 0, 440,
	441, 830, 831, 748, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 787, 450, 0, 772, 451, 452,
	453, 269, 832, 2415, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 718, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 0, 0,
	714, 715, 754, 742, 743, 740, 741, 731, 0, 727,
	0, 0, 0, 0, 0, 730, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 789, 734,
	0, 0, 0, 278, 279, 280, 210, 796, 774, 797,
	762, 798, 799, 0, 282, 764, 763, 283, 284, 285,
	737, 788, 800, 801, 220, 0, 286, 793, 0, 779,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 835, 299, 300,
	301, 782, 780, 781, 785, 0, 783, 784, 302, 303,
	477, 304, 802, 305, 803, 804, 720, 306, 0, 307,
	0, 308, 0, 0, 795, 310, 0, 311, 0, 0,
	0, 725, 312, 313, 315, 318, 314, 319, 805, 806,
	749, 836, 0, 0, 0, 0, 0, 320, 321, 807,
	808, 809, 0, 322, 0, 323, 0, 0, 837, 324,
	0, 325, 810, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 790, 792, 839, 0, 773, 0, 0, 0,
	335, 0, 332, 0, 838, 333, 811, 777, 812, 813,
	814, 815, 816, 0, 778, 0, 336, 840, 841, 337,
	338, 339, 842, 817, 818, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 819, 843, 345, 346, 844, 0,
	347, 348, 0, 0, 349, 0, 350, 722, 721, 351,
	352, 354, 766, 353, 845, 355, 356, 358, 357, 717,
	0, 846, 750, 791, 359, 820, 360, 361, 0, 775,
	776, 712, 0, 364, 365, 0, 0, 366, 249, 847,
	367, 848, 821, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 822, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 823, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 849, 398, 399, 400, 401, 726, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 767,
	768, 769, 770, 413, 416, 417, 786, 418, 403, 404,
	419, 850, 420, 824, 771, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 825, 426, 0, 427, 826, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 765, 439, 0, 827, 828, 829, 0, 0, 440,
	441, 830, 831, 748, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 787, 450, 0, 772, 451, 452,
	453, 269, 832, 0, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 718, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 0, 0,
	714, 715, 754, 742, 743, 740, 741, 731, 0, 727,
	0, 0, 0, 0, 0, 730, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 789, 734,
	0, 0, 0, 278, 279, 280, 210, 796, 774, 797,
	762, 798, 799, 0, 282, 764, 763, 283, 284, 285,
	737, 788, 800, 801, 220, 0, 286, 793, 0, 779,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 835, 299, 300,
	301, 782, 780, 781, 785, 0, 783, 784, 302, 303,
	477, 304, 802, 305, 803, 804, 720, 306, 0, 307,
	0, 308, 0, 0, 795, 310, 0, 311, 0, 0,
	0, 725, 312, 313, 315, 318, 314, 319, 805, 806,
	749, 836, 0, 0, 0, 0, 0, 320, 321, 807,
	808, 809, 0, 322, 0, 323, 0, 0, 837, 324,
	0, 325, 810, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 790, 792, 839, 0, 773, 0, 0, 0,
	335, 0, 332, 0, 838, 333, 811, 777, 812, 813,
	814, 815, 816, 0, 778, 0, 336, 840, 841, 337,
	338, 339, 842, 817, 818, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 819, 843, 345, 346, 844, 0,
	347, 348, 0, 0, 349, 0, 350, 722, 721, 351,
	352, 354, 766, 353, 845, 355, 356, 358, 357, 717,
	0, 846, 750, 791, 359, 820, 360, 361, 0, 775,
	776, 0, 0, 364, 365, 0, 0, 366, 249, 847,
	367, 848, 821, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 822, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 823, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 849, 398, 399, 400, 401, 726, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 767,
	768, 769, 770, 413, 416, 417, 786, 418, 403, 404,
	419, 850, 420, 824, 771, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 825, 426, 0, 427, 826, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 765, 439, 0, 827, 828, 829, 0, 0, 440,
	441, 830, 831, 748, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 787, 450, 0, 772, 451, 452,
	453, 269, 832, 0, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 718, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 0, 0,
	714, 715, 1377, 754, 742, 743, 740, 741, 731, 727,
	0, 0, 0, 0, 0, 730, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 720, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 1849, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 0, 1883, 730, 754, 742, 743,
	740, 741, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 305, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 351, 352, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 0, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 269, 832, 0, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 718, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 1837,
	730, 754, 742, 743, 740, 741, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 789, 734, 0,
	0, 0, 278, 279, 280, 210, 796, 774, 797, 762,
	798, 799, 0, 282, 764, 763, 283, 284, 285, 737,
	788, 800, 801, 220, 0, 286, 793, 0, 779, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 835, 299, 300, 301,
	782, 780, 781, 785, 0, 783, 784, 302, 303, 477,
	304, 802, 305, 803, 804, 720, 306, 0, 307, 0,
	308, 0, 0, 795, 310, 0, 311, 0, 0, 0,
	725, 312, 313, 315, 318, 314, 319, 805, 806, 749,
	836, 0, 0, 0, 0, 0, 320, 321, 807, 808,
	809, 0, 322, 0, 323, 0, 0, 837, 324, 0,
	325, 810, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 790, 792, 839, 0, 773, 0, 0, 0, 335,
	0, 332, 0, 838, 333, 811, 777, 812, 813, 814,
	815, 816, 0, 778, 0, 336, 840, 841, 337, 338,
	339, 842, 817, 818, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 819, 843, 345, 346, 844, 0, 347,
	348, 0, 0, 349, 0, 350, 722, 721, 351, 352,
	354, 766, 353, 845, 355, 356, 358, 357, 717, 0,
	846, 750, 791, 359, 820, 360, 361, 0, 775, 776,
	0, 0, 364, 365, 0, 0, 366, 249, 847, 367,
	848, 821, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 822, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 823, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	849, 398, 399, 400, 401, 726, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 767, 768,
	769, 770, 413, 416, 417, 786, 418, 403, 404, 419,
	850, 420, 824, 771, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 825, 426, 0, 427, 826, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	765, 439, 0, 827, 828, 829, 0, 0, 440, 441,
	830, 831, 748, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 787, 450, 0, 772, 451, 452, 453,
	269, 832, 0, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 718, 0, 0, 0,
	0, 0, 0, 0, 716, 0, 0, 0, 0, 714,
	715, 0, 0, 0, 0, 0, 0, 0, 727, 0,
	0, 0, 0, 1825, 730, 754, 742, 743, 740, 741,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 789, 734, 0, 0, 0, 278, 279, 280, 210,
	796, 774, 797, 762, 798, 799, 0, 282, 764, 763,
	283, 284, 285, 737, 788, 800, 801, 220, 0, 286,
	793, 0, 779, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	835, 299, 300, 301, 782, 780, 781, 785, 0, 783,
	784, 302, 303, 477, 304, 802, 305, 803, 804, 720,
	306, 0, 307, 0, 308, 0, 0, 795, 310, 0,
	311, 0, 0, 0, 725, 312, 313, 315, 318, 314,
	319, 805, 806, 749, 836, 0, 0, 0, 0, 0,
	320, 321, 807, 808, 809, 0, 322, 0, 323, 0,
	0, 837, 324, 0, 325, 810, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 790, 792, 839, 0, 773,
	0, 0, 0, 335, 0, 332, 0, 838, 333, 811,
	777, 812, 813, 814, 815, 816, 0, 778, 0, 336,
	840, 841, 337, 338, 339, 842, 817, 818, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 819, 843, 345,
	346, 844, 0, 347, 348, 0, 0, 349, 0, 350,
	722, 721, 351, 352, 354, 766, 353, 845, 355, 356,
	358, 357, 717, 0, 846, 750, 791, 359, 820, 360,
	361, 0, 775, 776, 0, 0, 364, 365, 0, 0,
	366, 249, 847, 367, 848, 821, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 822, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 823, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 849, 398, 399, 400, 401, 726,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 767, 768, 769, 770, 413, 416, 417, 786,
	418, 403, 404, 419, 850, 420, 824, 771, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 825, 426, 0,
	427, 826, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 765, 439, 0, 827, 828, 829,
	0, 0, 440, 441, 830, 831, 748, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 787, 450, 0,
	772, 451, 452, 453, 269, 832, 0, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	718, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 714, 715, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 1823, 730, 754,
	742, 743, 740, 741, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 1821, 730, 754, 742, 743, 740, 741, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 720, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 0, 1818, 730, 1810, 742, 743,
	740, 741, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 1813, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 1814, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 1815, 1812, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 0, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	1816, 0, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 269, 832, 0, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	1811, 459, 718, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 1807,
	730, 1810, 742, 743, 740, 741, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 789, 734, 0,
	0, 0, 278, 279, 280, 210, 796, 774, 797, 762,
	798, 799, 0, 282, 764, 763, 283, 284, 285, 737,
	788, 800, 801, 220, 0, 286, 793, 0, 779, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 835, 299, 300, 301,
	782, 780, 781, 785, 0, 783, 784, 302, 303, 477,
	304, 802, 1813, 803, 804, 720, 306, 0, 307, 0,
	308, 0, 0, 795, 310, 0, 311, 0, 0, 0,
	725, 312, 313, 315, 318, 314, 319, 805, 806, 749,
	836, 0, 0, 0, 0, 0, 320, 321, 807, 808,
	809, 0, 322, 0, 323, 0, 0, 837, 324, 0,
	325, 810, 0, 232, 0, 326, 327, 1814, 329, 330,
	331, 790, 792, 839, 0, 773, 0, 0, 0, 335,
	0, 332, 0, 838, 333, 811, 777, 812, 813, 814,
	815, 816, 0, 778, 0, 336, 840, 841, 337, 338,
	339, 842, 817, 818, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 819, 843, 345, 346, 844, 0, 347,
	348, 0, 0, 349, 0, 350, 722, 721, 1815, 1812,
	354, 766, 353, 845, 355, 356, 358, 357, 717, 0,
	846, 750, 791, 359, 820, 360, 361, 0, 775, 776,
	0, 0, 364, 365, 0, 0, 366, 249, 847, 367,
	848, 821, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 822, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 823, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	849, 398, 399, 400, 401, 726, 402, 0, 406, 407,
	408, 409, 410, 411, 1816, 0, 414, 415, 767, 768,
	769, 770, 413, 416, 417, 786, 418, 403, 404, 419,
	850, 420, 824, 771, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 825, 426, 0, 427, 826, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	765, 439, 0, 827, 828, 829, 0, 0, 440, 441,
	830, 831, 748, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 787, 450, 0, 772, 451, 452, 453,
	269, 832, 0, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 1811, 459, 718, 0, 0, 0,
	0, 0, 0, 0, 716, 0, 0, 0, 0, 714,
	715, 754, 742, 743, 740, 741, 731, 0, 727, 0,
	0, 0, 0, 0, 730, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 789, 734, 0,
	0, 0, 278, 279, 280, 210, 796, 774, 797, 762,
	798, 799, 0, 282, 764, 763, 283, 284, 285, 737,
	788, 800, 801, 220, 0, 286, 793, 0, 779, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 835, 299, 300, 301,
	782, 780, 781, 785, 0, 783, 784, 302, 303, 477,
	304, 802, 305, 803, 804, 720, 306, 0, 307, 0,
	308, 0, 0, 795, 310, 0, 311, 0, 0, 0,
	725, 312, 313, 315, 318, 314, 319, 805, 806, 749,
	836, 0, 0, 0, 0, 0, 320, 321, 807, 808,
	809, 0, 322, 0, 323, 0, 0, 837, 324, 0,
	325, 810, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 790, 792, 839, 0, 773, 0, 0, 0, 335,
	0, 332, 0, 838, 333, 811, 777, 812, 813, 814,
	815, 816, 0, 778, 0, 336, 840, 841, 337, 338,
	339, 842, 817, 818, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 819, 843, 345, 346, 844, 0, 347,
	348, 0, 0, 349, 0, 350, 722, 721, 351, 352,
	354, 766, 353, 845, 355, 356, 358, 357, 717, 0,
	846, 750, 791, 359, 820, 360, 361, 0, 775, 776,
	0, 0, 364, 365, 0, 0, 366, 249, 847, 367,
	848, 821, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 822, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 823, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	849, 398, 399, 400, 401, 726, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 767, 768,
	769, 770, 413, 416, 417, 786, 418, 403, 404, 419,
	850, 420, 824, 771, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 825, 426, 0, 427, 826, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	765, 439, 0, 827, 828, 829, 0, 0, 440, 441,
	830, 831, 748, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 787, 450, 0, 772, 451, 452, 453,
	269, 832, 0, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 718, 0, 0, 0,
	0, 0, 0, 0, 716, 0, 0, 0, 0, 714,
	715, 0, 0, 0, 0, 0, 1321, 0, 727, 0,
	0, 0, 0, 0, 730, 754, 742, 743, 740, 741,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 1662, 277, 0, 0, 0,
	0, 789, 734, 0, 0, 0, 278, 279, 280, 210,
	796, 774, 797, 762, 798, 799, 0, 282, 764, 763,
	283, 284, 285, 737, 788, 800, 801, 220, 0, 286,
	793, 0, 779, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	835, 299, 300, 301, 782, 780, 781, 785, 0, 783,
	784, 302, 303, 477, 304, 802, 305, 803, 804, 720,
	306, 0, 307, 0, 308, 0, 0, 795, 310, 0,
	311, 0, 0, 0, 725, 312, 313, 315, 318, 314,
	319, 805, 806, 749, 836, 0, 0, 0, 0, 0,
	320, 321, 807, 808, 809, 0, 322, 0, 323, 0,
	0, 837, 324, 0, 325, 810, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 790, 792, 839, 0, 773,
	0, 0, 0, 335, 0, 332, 0, 838, 333, 811,
	777, 812, 813, 814, 815, 816, 0, 778, 0, 336,
	840, 841, 337, 338, 339, 842, 817, 818, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 819, 843, 345,
	346, 844, 0, 347, 348, 0, 0, 349, 0, 350,
	722, 721, 351, 352, 354, 766, 353, 845, 355, 356,
	358, 357, 717, 0, 846, 750, 791, 359, 820, 360,
	361, 0, 775, 776, 0, 0, 364, 365, 0, 0,
	366, 249, 847, 367, 848, 821, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 822, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 823, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 849, 398, 399, 400, 401, 726,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 767, 768, 769, 770, 413, 416, 417, 786,
	418, 403, 404, 419, 850, 420, 824, 771, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 825, 426, 0,
	427, 826, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 765, 439, 0, 827, 828, 829,
	0, 0, 440, 441, 830, 831, 748, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 787, 450, 0,
	772, 451, 452, 453, 269, 832, 0, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	718, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 714, 715, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 1038, 730, 754,
	742, 743, 740, 741, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 1036, 730, 754, 742, 743, 740, 741, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 720, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 754, 742, 743, 740, 741, 731, 0,
	727, 0, 0, 0, 0, 0, 730, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 720, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 754, 742, 743, 740, 741, 731, 0,
	727, 0, 0, 0, 0, 0, 730, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 2963, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 720, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 2962, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 754, 742, 743, 740, 741, 731, 0,
	727, 0, 0, 0, 0, 0, 730, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 2961, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 2963, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 720, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 2962, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 754, 742, 743, 740, 741, 731, 0,
	727, 0, 0, 0, 0, 0, 730, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 0, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 904, 903,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	0, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 1835, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 754, 742,
	743, 740, 741, 731, 0, 0, 1833, 0, 0, 0,
	0, 1831, 1832, 0, 273, 274, 275, 276, 0, 277,
	1834, 0, 0, 0, 789, 734, 730, 0, 0, 278,
	279, 280, 0, 796, 774, 797, 762, 798, 799, 0,
	282, 764, 763, 283, 284, 285, 737, 788, 800, 801,
	220, 0, 286, 793, 0, 779, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 835, 299, 300, 2963, 782, 780, 781,
	785, 0, 783, 784, 302, 303, 477, 304, 802, 305,
	803, 804, 720, 306, 0, 307, 0, 308, 0, 0,
	795, 310, 0, 311, 0, 0, 0, 725, 312, 313,
	315, 318, 314, 319, 805, 806, 749, 836, 0, 0,
	0, 0, 0, 320, 321, 807, 808, 809, 0, 322,
	0, 323, 0, 0, 837, 324, 0, 325, 810, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 790, 792,
	0, 0, 773, 0, 0, 0, 335, 0, 332, 0,
	838, 333, 811, 777, 812, 813, 814, 815, 816, 0,
	778, 0, 336, 0, 0, 337, 338, 339, 842, 817,
	818, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	819, 843, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 722, 721, 351, 352, 354, 766, 353,
	845, 355, 356, 358, 357, 717, 0, 0, 750, 791,
	359, 820, 360, 361, 0, 775, 776, 0, 0, 364,
	365, 0, 0, 366, 249, 847, 367, 848, 821, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 822, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 823, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 849, 398, 399,
	400, 401, 726, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 767, 768, 769, 770, 413,
	416, 417, 786, 418, 403, 404, 419, 0, 420, 824,
	771, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	825, 426, 0, 427, 826, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 765, 439, 0,
	827, 828, 829, 0, 0, 440, 441, 830, 831, 748,
	442, 443, 2962, 445, 0, 0, 446, 447, 448, 449,
	787, 450, 0, 772, 451, 452, 453, 269, 832, 0,
	0, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 702,
	0, 900, 0, 0, 0, 0, 714, 715, 0, 0,
	0, 0, 0, 0, 0, 727, 0, 273, 274, 275,
	276, 730, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 902, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 835, 299, 300, 301,
	0, 896, 897, 0, 0, 898, 899, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 805, 806, 0,
	836, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 837, 324, 0,
	325, 810, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 839, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 838, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 840, 841, 337, 338,
	339, 842, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 819, 843, 345, 346, 844, 0, 347,
	348, 0, 0, 349, 0, 350, 904, 903, 351, 352,
	354, 246, 353, 845, 355, 356, 358, 357, 0, 0,
	846, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 894, 364, 365, 0, 0, 366, 249, 847, 367,
	848, 821, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 822, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	849, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 167, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	850, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 826, 0, 430,
	431, 169, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	830, 831, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	1109, 270, 0, 0, 454, 271, 0, 0, 900, 161,
	455, 456, 272, 457, 458, 459, 0, 162, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 886, 0, 1401, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 902, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 835, 299, 300, 301, 0, 896, 897,
	0, 0, 898, 899, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 805, 806, 0, 836, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 837, 324, 0, 325, 810, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	839, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	838, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 840, 841, 337, 338, 339, 842, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	819, 843, 345, 346, 844, 0, 347, 348, 0, 0,
	349, 0, 350, 904, 903, 351, 352, 354, 246, 353,
	845, 355, 356, 358, 357, 0, 0, 846, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 894, 364,
	365, 0, 0, 366, 249, 847, 367, 848, 821, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 822, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 849, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 167, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 850, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 826, 0, 430, 431, 169, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 830, 831, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 1109, 270, 0,
	0, 454, 271, 0, 0, 900, 161, 455, 456, 272,
	457, 458, 459, 0, 162, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 789, 0, 886, 0, 1401, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 788, 218, 219, 220, 0, 286,
	793, 0, 779, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	835, 299, 300, 301, 782, 780, 781, 785, 0, 783,
	784, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 805, 806, 0, 836, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 837, 324, 0, 325, 810, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 790, 792, 839, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 838, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	840, 841, 337, 338, 339, 842, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 819, 843, 345,
	346, 844, 0, 347, 348, 0, 0, 349, 0, 350,
	904, 903, 351, 352, 354, 246, 353, 845, 355, 356,
	358, 357, 0, 0, 846, 0, 791, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 847, 367, 848, 821, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 822, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 849, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 786,
	418, 403, 404, 419, 850, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 826, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 830, 831, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 787, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	2207, 0, 900, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 2516, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 902,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 835, 299, 300,
	301, 0, 896, 897, 0, 0, 898, 899, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 805, 806,
	0, 836, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 837, 324,
	0, 325, 810, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 839, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 838, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 840, 841, 337,
	338, 339, 842, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 819, 843, 345, 346, 844, 0,
	347, 348, 0, 0, 349, 0, 350, 904, 903, 351,
	352, 354, 246, 353, 845, 355, 356, 358, 357, 0,
	0, 846, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 894, 364, 365, 0, 0, 366, 249, 847,
	367, 848, 821, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 822, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 849, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 850, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 826, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 830, 831, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 885, 0, 900,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 886, 0, 892,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 902, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 0, 896,
	897, 0, 0, 898, 899, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 805, 806, 0, 836, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 839, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 840, 841, 337, 338, 339, 842,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 904, 903, 351, 352, 354, 246,
	353, 845, 355, 356, 358, 357, 0, 0, 846, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 894,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 850, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 830, 831,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 0, 0, 900, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 886, 0, 892, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 902, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 835, 299, 300, 301, 0, 896, 897, 0, 0,
	898, 899, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 805, 806, 0, 836, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 837, 324, 0, 325, 810, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 839, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 838, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 840, 841, 337, 338, 339, 842, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 819, 843,
	345, 346, 844, 0, 347, 348, 0, 0, 349, 0,
	350, 904, 903, 351, 352, 354, 246, 353, 845, 355,
	356, 358, 357, 0, 0, 846, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 894, 364, 365, 0,
	0, 366, 249, 847, 367, 848, 821, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 822, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 849, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 850, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 826, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 830, 831, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 1106, 0, 925, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 886, 0, 892, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	902, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 836, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 839, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 840, 841,
	337, 338, 339, 842, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 904, 903,
	351, 352, 354, 246, 353, 845, 355, 356, 358, 357,
	0, 0, 846, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 167, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 850, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 169, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 1109, 270, 0, 0, 454, 271, 702, 0,
	474, 161, 455, 456, 272, 457, 458, 459, 0, 162,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	134, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 167, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	169, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 1109,
	270, 0, 0, 454, 271, 0, 0, 0, 161, 455,
	456, 272, 457, 458, 459, 0, 162, 754, 742, 743,
	740, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 134, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 0, 0, 800, 801, 220,
	0, 286, 221, 0, 902, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 802, 305, 803,
	804, 0, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 904, 903, 351, 352, 354, 766, 353, 845,
	355, 356, 358, 357, 0, 0, 846, 750, 247, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 0, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 266, 267, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 772, 451, 452, 453, 269, 832, 474, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 0, 0, 474, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 2008, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	0, 0, 474, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 2430, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 1177, 0, 925,
	924, 0, 0, 0, 922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 1405,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 902, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 836, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 839, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 840, 841, 337, 338, 339, 842,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 904, 903, 351, 352, 354, 246,
	353, 845, 355, 356, 358, 357, 0, 0, 846, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 850, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 1102, 0, 925, 924, 0, 0,
	0, 922, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 902, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 835, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 836, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 837, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 1101, 234, 839, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 838, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 840, 841, 337, 338, 339, 842, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 843,
	345, 346, 844, 0, 347, 348, 0, 0, 349, 0,
	350, 904, 903, 351, 352, 354, 246, 353, 845, 355,
	356, 358, 357, 0, 0, 846, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 847, 367, 848, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 849, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 850, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 0, 0, 0, 0, 455, 456, 272, 457, 458,
	459, 1098, 0, 925, 924, 0, 0, 0, 922, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	902, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 836, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 1097, 234, 839, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 840, 841,
	337, 338, 339, 842, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 904, 903,
	351, 352, 354, 246, 353, 845, 355, 356, 358, 357,
	0, 0, 846, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 850, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 1059, 0,
	925, 924, 0, 0, 0, 922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 902, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 835, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 836,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 837, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	1058, 234, 839, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 838, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 840, 841, 337, 338, 339,
	842, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 843, 345, 346, 844, 0, 347, 348,
	0, 0, 349, 0, 350, 904, 903, 351, 352, 354,
	246, 353, 845, 355, 356, 358, 357, 0, 0, 846,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 847, 367, 848,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 849,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 850,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 0, 0, 0, 0, 455,
	456, 272, 457, 458, 459, 1056, 0, 925, 924, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 902, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 836, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 1055, 234, 839,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 840, 841, 337, 338, 339, 842, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 904, 903, 351, 352, 354, 246, 353, 845,
	355, 356, 358, 357, 0, 0, 846, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 850, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 918, 0, 925, 924, 0, 0, 0, 922,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 902, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 835,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 836, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	837, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 920, 234, 839, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 838, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 840,
	841, 337, 338, 339, 842, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 843, 345, 346,
	844, 0, 347, 348, 0, 0, 349, 0, 350, 904,
	903, 351, 352, 354, 246, 353, 845, 355, 356, 358,
	357, 0, 0, 846, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 847, 367, 848, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 849, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 850, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 925, 924, 454, 271, 0,
	922, 0, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 902, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	835, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 836, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 837, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 839, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 838, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	840, 841, 337, 338, 339, 842, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 843, 345,
	346, 844, 0, 347, 348, 0, 0, 349, 0, 350,
	904, 903, 351, 352, 354, 246, 353, 845, 355, 356,
	358, 357, 0, 0, 846, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 847, 367, 848, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 849, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 850, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 925, 924, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 902, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 835, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 836, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 837, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 839, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 838, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 840, 841, 337, 338, 339, 842, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 843,
	345, 346, 844, 0, 347, 348, 0, 0, 349, 0,
	350, 904, 903, 351, 352, 354, 246, 353, 845, 355,
	356, 358, 357, 0, 0, 846, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 847, 367, 848, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 849, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 850, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 925, 0, 454,
	271, 0, 0, 0, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 902, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 836, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 839,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 840, 841, 337, 338, 339, 842, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 904, 903, 351, 352, 354, 246, 353, 845,
	355, 356, 358, 357, 0, 0, 846, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 850, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 571, 0, 202, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 208, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 207, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 0, 0, 454, 271, 201,
	0, 202, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 462, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 208,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 207, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 202, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 462, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	208, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 1631, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 207, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 202, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 462, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 208, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 207, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 474, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 462, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 474, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 462, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 1906, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 1903, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 1979, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 1909,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 1977, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 1976,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 1908,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 1978, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 474, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 1906,
	286, 221, 0, 0, 1900, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 1903, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	1909, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 1899, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	1908, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 1907, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 577, 0, 474, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 576, 558, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 561, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 562, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 563, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 557, 0,
	474, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	558, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 561, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 562, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 563, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 474, 0, 454, 271, 0, 0, 0, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 561, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 562,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 563, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 0, 0, 454, 271, 1077, 0, 474, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 894, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 913, 0, 474, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 915, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 894, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	910, 0, 474, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 912, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 894, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 906, 0, 474,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 908,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 894,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 496, 0, 474, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 495, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 494,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 474, 0, 454,
	271, 0, 0, 0, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 1886, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 474, 2367,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 474,
	2367, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 2364, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	474, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	894, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 1651, 0, 474, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 1649, 0, 474, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 0, 0, 454, 271, 1647,
	0, 474, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 474, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 273, 274,
	275, 276, 1624, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 1585, 0, 474,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 1583, 0, 474, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 603, 0, 474, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 1151, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 604, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 600, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 599, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 1483, 0,
	474, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	1482, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 603, 0, 474, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 1151,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 604, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 600, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 599,
	264, 265, 0, 0, 440, 1152, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 603, 0, 474, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 593, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 604, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 600, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 1127, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 599, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 0, 0, 454, 271, 1095,
	0, 474, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 1094, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 0, 0, 454, 271, 1091, 0, 474, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 1090, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 1088, 0, 474, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 1087, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	1085, 0, 474, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 1084, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 1081, 0, 474,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 1080,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	474, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 273, 274, 275, 276,
	1069, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 1067, 0, 474, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 1066, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 1061, 0, 474, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 0, 0, 454, 271, 1052,
	0, 474, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 1051, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 0, 0, 454, 271, 1048, 0, 474, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 1044, 0, 474, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 1046, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	932, 0, 474, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 934, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 929, 0, 474,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 603, 0, 474, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	593, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 592, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 604, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	594, 402, 0, 406, 407, 600, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 595, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 599, 264,
	265, 0, 0, 440, 597, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 583, 0, 474, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	584, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 579, 0,
	474, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 569, 0, 474, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 518, 0, 474, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 474, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 474, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 2259, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 474, 0, 454,
	271, 0, 0, 0, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 2257, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 474, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 2246, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 474,
	0, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 584, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	474, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 1496, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 0, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 474, 0, 454, 271, 0, 0, 0, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 1487, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 474, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 868, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 474, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 0, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 0, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 0, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1284, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 1284, 0, 1270, 0, 0, 0,
	0, 1251, 0, 1267, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1298, 0, 1278, 1279, 1280,
	0, 1273, 1274, 1275, 1276, 0, 0, 0, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 0, 0, 1265, 1266, 0, 0, 0,
	0, 0, 1288, 1298, 0, 1278, 1279, 1280, 1286, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 0, 0,
	0, 1296, 0, 1265, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293, 1277,
	0, 1289, 0, 0, 0, 0, 0, 0, 1284, 0,
	0, 0, 0, 0, 0, 1251, 1272, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	1250, 0, 0, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 0, 0, 0, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 2142, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 1287, 0, 0, 1262, 1263,
	1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252, 1253,
	1254, 1255, 1257, 1258, 0, 0, 1288, 1298, 2926, 1278,
	1279, 1280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1248, 1249, 0, 1281, 1282, 1283,
	1291, 1292, 1293, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 1284, 0, 0, 0, 0, 0, 0, 1251,
	1272, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 1289, 1250, 0, 0, 0, 0, 0,
	1284, 0, 1270, 0, 0, 0, 0, 1251, 0, 1267,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 0, 0, 1256, 1287,
	0, 0, 1262, 1263, 1269, 1268, 1264, 1290, 0, 1261,
	1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 0, 0,
	1288, 1298, 2922, 1278, 1279, 1280, 0, 1273, 1274, 1275,
	1276, 0, 0, 0, 0, 0, 1256, 0, 0, 0,
	0, 0, 0, 1294, 1295, 0, 0, 0, 0, 0,
	0, 1265, 1266, 0, 0, 0, 0, 0, 1288, 1298,
	0, 1278, 1279, 1280, 1286, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 1295, 0, 0, 0, 0, 1296, 0, 1265,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 1286, 0, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 1277, 0, 1289, 0, 0,
	0, 0, 0, 0, 1284, 0, 0, 0, 0, 0,
	0, 1251, 1272, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1289, 1250, 0, 0, 0,
	0, 0, 1248, 1249, 1270, 1281, 1282, 1283, 1291, 1292,
	1293, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 0, 0, 0, 1251, 0, 0,
	1297, 0, 0, 1287, 0, 0, 1262, 1263, 1269, 1268,
	1264, 1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 1250, 0, 0, 0, 2862, 0, 0, 0,
	1270, 1273, 1274, 1275, 1276, 0, 0, 1267, 0, 0,
	1256, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290,
	0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	0, 0, 1288, 1298, 2811, 1278, 1279, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 1295, 1273, 1274, 1275,
	1276, 0, 0, 1265, 1266, 0, 1256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 1288, 1298,
	0, 1278, 1279, 1280, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 1295, 1285, 0, 0, 0, 0, 0, 1265,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 0, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	0, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 1277, 0, 0, 0, 0,
	0, 0, 0, 0, 1284, 0, 0, 0, 0, 0,
	0, 1251, 1272, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1248, 1249, 0, 1281, 1282, 1283,
	1291, 1292, 1293, 0, 0, 1289, 1250, 0, 0, 0,
	0, 0, 1284, 0, 1270, 0, 0, 0, 0, 1251,
	0, 1267, 1297, 0, 0, 1287, 0, 0, 1262, 1263,
	1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252, 1253,
	1254, 1255, 1257, 1258, 1250, 0, 0, 0, 2779, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 1267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 1274, 1275, 1276, 0, 0, 0, 0, 0,
	1256, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290,
	0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	0, 0, 1288, 1298, 2773, 1278, 1279, 1280, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 0, 0, 1256, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 0, 0,
	0, 0, 0, 1265, 1266, 0, 0, 0, 0, 0,
	1288, 1298, 0, 1278, 1279, 1280, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1294, 1295, 0, 0, 0, 0, 1296,
	0, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1285, 1286, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 1277, 0, 1289,
	0, 0, 0, 0, 0, 0, 1284, 0, 0, 0,
	0, 0, 0, 1251, 1272, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1289, 1250, 0,
	0, 0, 0, 0, 1248, 1249, 1270, 1281, 1282, 1283,
	1291, 1292, 1293, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 1284, 0, 0, 0, 0, 0, 0, 1251,
	0, 0, 1297, 0, 0, 1287, 0, 0, 1262, 1263,
	1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252, 1253,
	1254, 1255, 1257, 1258, 1250, 0, 0, 0, 2767, 0,
	0, 0, 1270, 1273, 1274, 1275, 1276, 0, 0, 1267,
	0, 0, 1256, 1287, 0, 0, 1262, 1263, 1269, 1268,
	1264, 1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 0, 0, 1288, 1298, 2684, 1278, 1279, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 1273,
	1274, 1275, 1276, 0, 0, 1265, 1266, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1286, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	1288, 1298, 0, 1278, 1279, 1280, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1294, 1295, 1285, 0, 0, 0, 0,
	0, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1289, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 1277, 0, 0,
	0, 0, 0, 0, 0, 0, 1284, 0, 0, 0,
	0, 0, 0, 1251, 1272, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 0, 0, 1289, 1250, 0,
	0, 0, 0, 0, 1284, 0, 1270, 0, 0, 0,
	0, 1251, 0, 1267, 1297, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 1250, 0, 0, 0,
	2641, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	0, 0, 1256, 1287, 0, 0, 1262, 1263, 1269, 1268,
	1264, 1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 0, 0, 1288, 1298, 2640, 1278, 1279, 1280,
	0, 1273, 1274, 1275, 1276, 0, 0, 0, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 0, 0, 1265, 1266, 0, 0, 0,
	0, 0, 1288, 1298, 0, 1278, 1279, 1280, 1286, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 0, 0,
	0, 1296, 0, 1265, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293, 1277,
	0, 1289, 0, 0, 0, 0, 0, 0, 1284, 0,
	0, 0, 0, 0, 0, 1251, 1272, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	1250, 0, 0, 0, 0, 0, 1248, 1249, 1270, 1281,
	1282, 1283, 1291, 1292, 1293, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 1284, 0, 0, 0, 0, 0,
	0, 1251, 0, 0, 1297, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 1250, 0, 0, 0,
	2612, 0, 0, 0, 1270, 1273, 1274, 1275, 1276, 0,
	0, 1267, 0, 0, 1256, 1287, 0, 0, 1262, 1263,
	1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252, 1253,
	1254, 1255, 1257, 1258, 0, 0, 1288, 1298, 2434, 1278,
	1279, 1280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 1273, 1274, 1275, 1276, 0, 0, 1265, 1266, 0,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 1288, 1298, 0, 1278, 1279, 1280, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 1295, 1285, 0, 0,
	0, 0, 0, 1265, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1289, 0, 0, 0, 0, 0, 0,
	1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 1284, 0,
	0, 0, 0, 0, 0, 1251, 1272, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289,
	1250, 0, 0, 0, 0, 0, 1284, 0, 1270, 0,
	0, 0, 0, 1251, 0, 1267, 1297, 0, 0, 1287,
	0, 0, 1262, 1263, 1269, 1268, 1264, 1290, 0, 1261,
	1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 1250, 0,
	0, 0, 2407, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 1287, 0, 0, 1262, 1263,
	1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252, 1253,
	1254, 1255, 1257, 1258, 0, 0, 1288, 1298, 1761, 1278,
	1279, 1280, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	0, 0, 1256, 3004, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 0, 1288, 1298, 0, 1278, 1279, 1280,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 1296, 0, 1265, 1266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 1286, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 3003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 1289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1289, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1284, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 1297, 0, 0, 1287,
	0, 0, 1262, 1263, 1269, 1268, 1264, 1290, 0, 1261,
	1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 1250, 0,
	2111, 0, 0, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 1267, 0, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	0, 0, 1256, 0, 2191, 0, 0, 2190, 0, 0,
	0, 0, 0, 0, 1248, 1249, 0, 1281, 1282, 1283,
	1291, 1292, 1293, 0, 1288, 1298, 0, 1278, 1279, 1280,
	0, 0, 1284, 0, 0, 0, 0, 2084, 0, 1251,
	0, 0, 1297, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 0, 0, 1265, 1266, 0, 0, 0,
	0, 0, 0, 0, 1250, 0, 0, 0, 1286, 0,
	0, 0, 1270, 0, 0, 1271, 0, 0, 0, 1267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 2085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 1275, 1276, 0, 0, 0, 0, 0, 1256, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	1288, 1298, 0, 1278, 1279, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1289, 0, 1294, 1295, 0, 0, 0, 0, 0,
	0, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1859, 0, 0, 1272, 0, 0, 1248, 1249, 0,
	1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1284, 0, 1289, 0, 1858,
	0, 0, 1251, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 1270, 0, 0, 0, 0,
	0, 0, 1267, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1284, 0, 0, 0, 0, 0,
	0, 1251, 0, 1287, 1297, 0, 1262, 1263, 1269, 1268,
	1264, 1290, 0, 1261, 1259, 1260, 1252, 1253, 1254, 1255,
	1257, 1258, 1273, 1274, 1275, 1276, 1250, 0, 0, 0,
	0, 1256, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 1298, 0, 1278, 1279, 1280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1294, 1295, 0, 0,
	0, 0, 0, 0, 1265, 1266, 0, 0, 0, 0,
	0, 1273, 1274, 1275, 1276, 0, 0, 1286, 0, 0,
	1256, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 0, 1288, 1298, 0, 1278, 1279, 1280, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 0, 0,
	0, 0, 0, 1265, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	1277, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1272, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1285, 699, 0, 0, 0, 0, 0,
	1289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 1284, 0,
	0, 0, 0, 0, 0, 1251, 1272, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	1250, 0, 0, 0, 0, 0, 1287, 0, 1270, 1262,
	1263, 1269, 1268, 1264, 1290, 1267, 1261, 1259, 1260, 1252,
	1253, 1254, 1255, 1257, 1258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 1287, 0, 0, 1262, 1263,
	1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252, 1253,
	1254, 1255, 1257, 1258, 0, 0, 1288, 1298, 0, 1278,
	1279, 1280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291,
	1292, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1284, 0, 1289, 0, 0, 0, 0, 1251, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1250, 0, 2411, 0, 0, 0, 0,
	0, 1270, 0, 0, 0, 0, 0, 0, 1267, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 2195, 0, 0, 1251, 0, 1287,
	1297, 0, 1262, 1263, 1269, 1268, 1264, 1290, 0, 1261,
	1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 1273, 1274,
	1275, 1276, 1250, 0, 0, 0, 0, 1256, 0, 0,
	1270, 0, 2200, 0, 0, 0, 0, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1298, 0, 1278, 1279, 1280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 0, 0, 0, 0, 0,
	1265, 1266, 0, 0, 0, 0, 0, 1273, 1274, 1275,
	1276, 0, 0, 1286, 0, 0, 1256, 0, 0, 0,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1296, 0, 1288, 1298,
	0, 1278, 1279, 1280, 0, 0, 0, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 1295, 0, 0, 0, 0, 0, 0, 1265,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 0, 0, 0, 1277, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1272, 0, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1248, 1249, 0, 1281,
	1282, 1283, 1291, 1292, 1293, 1277, 0, 0, 0, 0,
	0, 0, 0, 0, 1284, 0, 0, 0, 0, 0,
	0, 1251, 1272, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1289, 1250, 0, 0, 0,
	0, 0, 1287, 0, 1270, 1262, 1263, 1269, 1268, 1264,
	1290, 1267, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 1274, 1275, 1276, 0, 0, 0, 0, 0,
	1256, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290,
	0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	0, 0, 1288, 1298, 0, 1278, 1279, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1294, 1295, 0, 0, 0,
	0, 0, 0, 1265, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1248, 1249, 0, 1281, 1282, 1283, 1291, 1292, 1293, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 1284, 0,
	0, 0, 2141, 0, 0, 1251, 1272, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 1249,
	0, 1281, 1282, 1283, 1291, 1292, 1293, 0, 0, 1289,
	1250, 0, 0, 0, 0, 0, 1284, 0, 1270, 0,
	0, 0, 0, 1251, 0, 1267, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 1274, 1275, 1276, 0,
	0, 0, 0, 0, 1256, 1287, 0, 0, 1262, 1263,
	1269, 1268, 1264, 1290, 0, 1261, 1259, 1260, 1252, 1253,
	1254, 1255, 1257, 1258, 0, 0, 1288, 1298, 0, 1278,
	1279, 1280, 0, 1273, 1274, 1275, 1276, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 0, 1288, 1298, 0, 1278, 1279, 1280,
	1286, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 1296, 0, 1265, 1266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 1286, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 1249, 0, 1281, 1282, 1283, 1291, 1292,
	1293, 1277, 0, 1289, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 0, 0, 0, 1251, 1272, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1289, 1250, 0, 0, 0, 0, 0, 1248, 1249,
	1270, 1281, 1282, 1283, 1291, 1292, 1293, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 1297, 0, 0, 1287,
	0, 0, 1262, 1263, 1269, 1268, 1264, 1290, 0, 1261,
	1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258, 1250, 0,
	0, 0, 0, 0, 0, 0, 1270, 1273, 1274, 1275,
	1276, 0, 0, 1267, 0, 0, 1256, 1287, 0, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 0, 1288, 1298,
	0, 1278, 1279, 1280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 1295, 1273, 1274, 1275, 1276, 0, 0, 1265,
	1266, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 0, 0, 0, 0, 0, 0, 1271,
	0, 142, 0, 0, 1288, 1298, 38, 1278, 1279, 1280,
	0, 0, 0, 0, 0, 1296, 0, 39, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 42, 0, 0, 0, 1265, 1266, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 139, 0, 1286, 0,
	0, 0, 0, 0, 0, 1271, 0, 43, 0, 49,
	0, 0, 0, 0, 0, 1277, 0, 0, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 1272, 0, 52, 0, 0, 0, 56, 0,
	0, 140, 0, 0, 0, 57, 69, 0, 0, 0,
	58, 0, 0, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 1262, 1263, 1269, 1268, 1264, 1290,
	0, 1261, 1259, 1260, 1252, 1253, 1254, 1255, 1257, 1258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 1287, 62, 0,
	1262, 1263, 1269, 1268, 1264, 1290, 0, 1261, 1259, 1260,
	1252, 1253, 1254, 1255, 1257, 1258, 0, 72, 135, 63,
	1546, 64, 0, 65, 0, 0, 0, 141, 0, 0,
	0, 0, 66, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 107, 0, 1557, 1542, 1547, 1530, 1567,
	1566, 0, 138, 1532, 1531, 0, 0, 0, 0, 0,
	1575, 1574, 0, 0, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	1568, 0, 1564, 1563, 168, 0, 0, 0, 0, 0,
	0, 0, 1562, 161, 0, 0, 0, 1546, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1561, 1559, 1560,
	0, 0, 134, 0, 0, 4, 0, 0, 0, 0,
	0, 0, 1557, 1542, 1547, 1530, 1567, 1566, 0, 0,
	1532, 1531, 0, 0, 1541, 0, 0, 1575, 1574, 0,
	0, 0, 0, 0, 1550, 1545, 1551, 1552, 1553, 1554,
	1555, 0, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 1572, 1573, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1568, 0, 1564,
	1563, 0, 0, 0, 0, 0, 0, 0, 0, 1562,
	1534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1565, 0, 0, 0, 1543, 1544, 0,
	0, 0, 0, 0, 1561, 1559, 1560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 1541, 0, 0, 1682, 1680, 1681, 1684, 1683, 0,
	0, 1550, 1545, 1551, 1552, 1553, 1554, 1555, 0, 1549,
	0, 0, 0, 0, 0, 0, 0, 0, 1572, 1573,
	0, 0, 0, 0, 0, 0, 0, 1535, 1536, 1537,
	1538, 0, 0, 0, 0, 0, 0, 630, 0, 661,
	0, 1556, 1539, 0, 0, 0, 0, 1534, 0, 0,
	0, 0, 1577, 0, 0, 0, 0, 0, 0, 637,
	1565, 0, 0, 0, 1543, 1544, 0, 0, 0, 1533,
	0, 635, 1569, 1570, 1571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 636, 0, 1540, 0, 1558, 638, 0,
	1576, 0, 666, 0, 0, 0, 0, 0, 644, 645,
	0, 0, 0, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 662, 639, 0,
	0, 0, 0, 0, 1535, 1536, 1537, 1538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1556, 1539,
	0, 660, 650, 0, 0, 0, 0, 0, 0, 1577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1533, 0, 640, 1569,
	1570, 1571, 0, 0, 634, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 641, 642,
	0, 0, 1540, 0, 0, 0, 0, 1576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 648, 0,
	0, 0, 0, 0, 0, 643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 632, 651, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 0, 0,
	652, 0, 0, 0, 667, 668, 0, 0, 0, 0,
	0, 665, 0, 0, 0, 0, 0, 655, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657,
}
var sqlPact = [...]int{

	54561, -1000, -114, -1000, -1000, -1000, 225, -1000, -1000, -1000,
	-1000, 224, 223, 221, -1000, 220, 219, 218, 217, 212,
	210, 209, 206, 204, 203, 201, -1000, -1000, 200, -1000,
	-1000, -1000, -1000, 199, 195, 194, -1000, 191, 1225, 29167,
	189, 188, 1489, 46431, 1477, 186, 185, -1000, 183, 1364,
	34032, 1079, 1803, -1000, 181, 179, 1164, 46060, 3126, 31776,
	1304, 1833, 45683, 28790, 1832, 31399, 45306, -1000, -1000, 1036,
	-1000, -1000, 44929, 178, 176, 168, 167, 162, -1000, 159,
	44552, 150, 148, 146, 144, 143, 141, 137, 136, -1000,
	134, 132, 130, 129, 128, 127, 123, 120, 118, 117,
	115, 110, 106, 105, 96, 95, -1000, 55145, 94, 93,
	92, -1000, 1292, 91, 89, 88, 85, 84, -1000, -1000,
	82, 77, 76, 69, 68, 63, 163, 62, 61, 60,
	59, 58, -1000, 1209, 578, 1690, 12308, 1229, 1227, 1199,
	1158, 1320, 760, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49028, 46431, 56, -38, 55, -1000, 2328, 794, 22335,
	54561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 33655, 33278, 32901, 27300, 44175, 43798, 9492, 9492,
	915, -1000, -1000, -1000, -1000, -1000, 20, 30280, 46431, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 266, -1000, -1000, -1000, -1000, -1000, 18449, 18035, 393,
	-1000, -1000, -1000, 262, -1000, -1000, -1000, -1000, 1223, -1000,
	-1000, -1000, -1000, 43421, 43044, 42667, 26913, 26526, 42290, 1708,
	1697, 41913, -1000, -1000, 41536, -1000, -1000, 2051, 1853, 1852,
	32524, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41165, 40788, 40411, 40034, 39657, 26139, 25752, 603, -1000, -1000,
	-1000, -1000, 23089, -1000, -1000, -1000, -1000, -1000, 54, -1000,
	53, 52, -1000, 51, 50, 49, 46, 44, 37, 34,
	31, -1000, 30, 28, -1000, 27, 26, -1000, 25, 24,
	1365, 1470, 1404, 39280, 1012, 1476, 16, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 46431, -1000, 18849, -1000, 600, -1000,
	1844, -1000, 18849, -1000, 1472, 175, 1384, -1000, -1000, -1000,
	1336, 1046, -1000, -1000, 46431, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2493, 1381, 599, 38903, -1000, 1700, -1000, 702,
	13108, -1000, 888, -1000, 13108, 261, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1720, 1992, 2445, 25365, 1483, 2271, 2009, 2492,
	1659, 2006, 2004, 1959, 1956, 1945, 2491, 1107, 2490, 977,
	816, 2489, 1939, 1929, 2480, 1312, 852, 2486, 2485, 1922,
	1840, -1000, -1000, -1000, -1000, 1058, -1000, -1000, -1000, -1000,
	-1000, -1000, 35516, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1209, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1587, 2198, 2198, 2198, 2305,
	371, 361, -1000, 163, -1000, 1729, -1000, 1358, -1000, -1000,
	-1000, 54118, -1000, -1000, 18849, 18849, 18849, 18849, 18849, 1284,
	-1000, -1000, -1000, 627, -1000, 598, 595, 10693, -1000, -1000,
	2410, -1000, -1000, -1000, 389, -1000, -1000, 18849, -1000, 258,
	-1000, -1000, -1000, -1000, 592, 2478, -1000, 780, -1000, -1000,
	-1000, 726, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1882,
	561, 555, -1000, 554, 553, -1000, -1000, -1000, 591, 589,
	588, 587, 586, 585, -1000, 1147, -1000, 758, -1000, -1000,
	758, 758, -1000, 539, 539, 583, 582, 545, -1000, -1000,
	581, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 580,
	539, 576, 575, -1000, -1000, -1000, 574, 714, 673, -1000,
	572, 571, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1547, -1000, -1000, 1547, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 914, 47915, -1000, -1000, -1000, 17, 46431, -1000,
	393, 17, -1000, -1000, 570, -1000, 13508, 13508, 13508, -1000,
	-1000, 1468, 18849, -1000, 2048, -1000, 594, -207, 569, 669,
	669, -1000, 21204, 634, 24978, -1000, 561, 555, 554, 553,
	-1000, 253, -1000, -1000, -1000, -1000, -1000, 1368, 2087, 938,
	-1000, 1126, 2086, -1000, 2898, 2083, 1120, -1000, -1000, 735,
	2074, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1286, -1000, -1000, 1591, 2069, -115, 1934, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1506, -1000, 27671, 30280, 13,
	-1000, -1000, -65, -1000, 9107, 54118, -1000, 54118, -1000, 1831,
	46431, 9492, 46431, 46431, -1000, 552, 1576, 1467, -1000, -1000,
	2898, 1565, -1000, -1000, 731, 1564, -1000, -1000, 1563, -1000,
	393, -1000, -1000, 38526, 48657, 731, 1554, -1000, -1000, -1000,
	35516, -1000, 46431, -1000, 46431, -1000, 1041, -1000, 48286, 152,
	2059, -1000, -1000, 152, 2053, -1000, 152, 2040, -1000, 151,
	2039, -1000, -1000, 1498, 2038, -1000, -70, 2037, -1000, -1000,
	-70, 2036, -1000, -1000, 18849, 12, -1000, -1000, -1000, 794,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 38149, 29909, 46431,
	32147, 704, 54118, 2348, 54943, 27671, 54118, 29909, 46431, 1867,
	-1000, 37772, 37395, 2270, 698, -1000, -1000, 46431, -1000, 18849,
	-1000, 2336, 1613, -52, -1000, -1000, -1000, -1000, -1000, 1615,
	1623, 858, 970, -1000, 13108, 13108, 2138, -1000, 252, 9492,
	-1000, -1000, 973, -1000, -1000, -1000, -1000, -1000, 37018, -1000,
	-1000, -1000, 1341, 46431, -1000, -1000, 1865, -1000, 29538, 46431,
	-1000, 46431, -1000, 46431, -1000, 46431, -1000, 46431, -1000, -1000,
	-1000, -1000, -1000, 1990, 1252, 1861, -1000, 46431, -1000, 46431,
	-1000, -1000, -1000, 1614, -1000, -1000, -1000, 36647, 36270, 35893,
	-1000, -1000, 1121, -1000, 964, -1000, -1000, 155, -1000, -1000,
	1587, -1000, 1482, 1701, 17621, 1669, 18849, 163, -1000, -1000,
	163, 163, 11894, -1000, -1000, -1000, 46431, -1000, 54836, 54943,
	9492, 931, 18849, 18849, 18849, 18849, 18849, 18849, 18849, 18849,
	18849, 18849, 18849, 18849, 18849, 18849, 18849, 18849, 18849, 18849,
	18849, 18849, 18849, 18849, 18849, 18849, 18849, 18849, 18849, 18849,
	18849, 18849, 18849, 18849, 18849, 18849, 18849, 1644, 18849, 913,
	18849, 18849, 18849, 18849, 1161, -1000, -1000, 1296, 439, 1328,
	-1000, 2403, 2403, 2403, 54428, 54428, 488, 627, -1000, 18849,
	-1000, 145, 18849, 361, 51876, 19, 10293, -1000, -1000, -1000,
	-1000, 17207, 755, 54118, 8722, 9879, -1000, 2446, 1000, 1892,
	1754, 550, 668, 666, 665, 559, 18849, 18849, 18849, 18849,
	18849, 18849, -1000, -1000, -1000, -1000, -1000, -1000, 2410, -1000,
	16807, 16393, -1000, 2442, 15979, 15565, -1000, 15151, 20049, 14737,
	930, 929, 922, 18849, 11093, -1000, -52, -1000, 47915, -1000,
	46431, 17, 2334, 18849, 173, -1000, 52897, -1000, 173, 173,
	548, 1, 54118, 1648, 1647, 22712, 1579, 1332, 1332, 1332,
	-1000, 547, 611, 669, 6778, 14323, 34403, 1338, 34403, 279,
	359, 20827, 2048, -1000, -1000, 46431, 9492, -23, 1264, -1000,
	31022, 2163, 2161, 2168, 1040, -1000, 2304, 35516, 2321, 145,
	2209, 1830, -1000, -1000, 912, 35516, 2898, -1000, 54943, -1000,
	1717, 2299, 1030, 1042, 1030, 1030, 1048, 35516, 911, 1241,
	27671, 2204, 910, -30, 2318, 145, 2186, 1825, 906, -1000,
	-1000, 46431, 9492, 2183, 958, 667, 13, 30280, 46431, 250,
	-1000, 999, -6, 237, 1668, 1663, 174, -1000, 30651, 2332,
	2033, 46431, -1000, 2898, 2031, -1000, 1221, -1000, 2022, 2020,
	2330, 1450, 1553, -1000, -1000, -1000, 1448, 1552, 941, 2019,
	745, 196, 2329, 196, 24224, -1000, 46431, -1000, 46431, -1000,
	-1000, 46431, -1000, 46431, -1000, 46431, -1000, 46431, 46431, -1000,
	46431, 27671, 27671, 27671, -7, 3301, 28413, 903, -89, -1000,
	787, 30651, 3987, -8, -1000, 995, -1000, -1000, -1000, 328,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 758, 546, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 545, 1147, 539, 539, 539, -1000, -1000, -1000, 714,
	673, -1000, -1000, -1000, 758, 758, -1000, -1000, -177, 1810,
	-65, 32147, 667, -1000, 667, -1000, 1854, -1000, 2180, 691,
	-9, 812, -52, -1000, 1547, -1000, 1100, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2453, -1000, 2414, -1000, -1000, 2439, 6, -1000, 6, -1000,
	9492, -1000, 46431, -1000, -1000, -1000, -1000, -1000, -1000, 46431,
	-1000, 46431, -1000, -1000, -1000, -1000, -1000, -1000, 3019, -1000,
	1836, -1000, 3301, 234, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 46431, 46431, 46431, -1000, 35516, -1000, -1000, -1000,
	-1000, 54118, -1000, 452, -1000, -1000, 54118, 1076, 1665, -1000,
	1665, -4, -1000, 52614, 1639, 46431, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 696, 618,
	618, 944, 944, 944, 944, 2390, 4862, 4924, 4770, 700,
	700, 700, 700, 700, 700, 700, 700, 4302, 867, 867,
	4302, 4302, 4302, 4302, 4302, 867, 867, 867, 700, 700,
	700, 54428, 54372, 255, 18849, 18849, 887, 1281, 439, 255,
	18849, 255, 255, 255, 255, -1000, 1461, -1000, -1000, -1000,
	-1000, 1809, 530, 20049, 20049, -1000, -1000, -1000, 10693, 18849,
	-1000, -1000, -1000, -1000, 527, 18849, -1000, 52130, -236, 358,
	-181, -1000, 18849, 609, -198, -1000, 1019, -1000, 18849, 233,
	-1000, -1000, -47, 18849, 18849, 18849, 357, -1000, 355, -1000,
	886, -1000, 885, 884, 883, -1000, 526, 1330, 524, 521,
	18849, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54080,
	49778, 6312, 5868, 5797, -17, -25, 354, -1000, 1806, -181,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 353, -1000, 352,
	-28, -1000, -39, -1000, 349, -1000, 53826, -181, 347, 4464,
	-1000, 20049, 20049, 20049, 10693, 520, 346, -1000, 52478, -1000,
	695, 694, 686, 53572, 13909, 13909, 13909, 345, 53503, 18849,
	-181, -1000, -1000, 518, -41, 745, 13508, 21958, 9492, -1000,
	745, 745, 18849, -1000, 18849, 22712, 22712, 1625, 1642, 22712,
	-1000, -1000, -1000, -1000, 34403, 450, 669, 34403, -1000, 2410,
	1661, -1000, 344, -1000, -1000, -1000, 46431, 393, -1000, -1000,
	669, 343, 232, 1228, 46431, 46431, 46431, -1000, -1000, 1551,
	47544, 1546, 54943, 46431, -1000, -1000, 514, 512, 1635, 1631,
	46431, 46431, 47173, 46802, 46431, 1231, 1378, 1322, 145, -1000,
	684, 502, 46431, 1106, -1000, -1000, -1000, -1000, -1000, 46431,
	-1000, -1000, 2438, -1000, 1030, -1000, -1000, -1000, 1030, 2898,
	1105, 46431, 27671, 734, 681, 46431, 1162, 145, -1000, 679,
	499, 9492, 1280, -1000, 678, 46431, 1721, -1000, 1501, -1000,
	-1000, 8337, -1000, -1000, 9492, 1749, 1749, 9492, 342, -5,
	-1000, -1000, -1000, -1000, -1000, -1000, 1688, 46431, 577, 46431,
	145, 46431, 156, 46431, 27671, 27671, 27671, 145, 46431, 2001,
	46431, 1997, 2052, 651, 46431, 1348, 18849, 1248, -1000, 23466,
	768, 46431, 1097, 147, -1000, -1000, -1000, 43, 46431, -1000,
	-1000, 152, 152, 152, -1000, 151, 1498, -1000, -70, -70,
	-1000, -1000, -1000, 46431, 2361, 27671, -42, -1000, 791, 879,
	872, -1000, 54943, -1000, 624, 902, -1000, 2430, 494, 2410,
	-1000, 728, 35145, 46431, 122, -1000, 732, 1533, -1000, 13108,
	13108, -1000, 1547, -1000, -1000, 1095, -1000, 1139, -1000, -1000,
	-1000, -1000, 13108, -1000, -1000, -65, -65, -1000, -1000, 497,
	-1000, 46431, -1000, -1000, -1000, -1000, 1076, -1000, 18849, -1000,
	-1000, -1000, 11894, -1000, -1000, -1000, 46431, -168, 18849, 255,
	255, 18849, 20049, 20049, -1000, 255, -1000, -1000, -1000, -1000,
	-1000, 1799, 493, 18849, 54943, 4137, 4053, -50, 4302, 18849,
	-20, -1000, 18849, -1000, 51820, -1000, -1000, 623, 2054, -1000,
	18849, 53220, 7952, 341, 12708, -1000, 52966, -49, -49, -1000,
	2449, 1590, 1439, 1128, 1065, 2419, -1000, 24601, 746, 1348,
	51566, 54836, 54943, 18849, 18849, 18849, -1000, -1000, 2410, -1000,
	18849, -1000, -1000, -1000, -1000, -1000, 1782, 18849, -1000, 54836,
	54943, 20049, 20049, 20049, 20049, 20049, 20049, 20049, 20049, 20049,
	20049, 20049, 20049, 20049, 20049, 20049, 20049, 20049, 20049, 20049,
	1609, 20049, 2377, 2377, 2377, -22, 18849, -1000, 1771, 1782,
	18849, 18849, -1000, -1000, -1000, 54943, 339, 338, 336, -1000,
	18849, -181, 3987, -1000, 1753, -1000, -170, -1000, 2048, -1000,
	-1000, 1753, 1753, -53, 54118, -1000, 1625, -1000, 487, 18849,
	22712, -1000, 608, -1000, -64, -1000, 34403, -1000, 607, -233,
	-1000, 660, -1000, 669, 393, -1000, 34403, -1000, 9492, -1000,
	-1000, 868, 866, -1000, 1991, -1000, 1537, -1000, 774, -1000,
	1157, 18849, 21581, 486, 485, 1226, -1000, 1981, 1498, 1978,
	1498, -1000, -1000, 710, -1000, 483, 482, -1000, -23, 1133,
	-1000, 23853, 18849, -1000, 864, -1000, -1000, -1000, 2898, 860,
	-1000, -1000, 1190, 23853, -1000, -1000, -1000, 23853, 18849, -1000,
	-30, 854, 23853, 1910, 728, 1778, 978, -1000, -1000, -1000,
	-1000, -1000, -1000, 228, 1711, 30651, 46431, 480, 46431, 479,
	-1000, -1000, 478, 46431, 2898, -1000, 731, -1000, -1000, 784,
	9492, 474, 9492, 1621, 651, 28042, -1000, 731, 1701, 54118,
	-1000, 1097, 11493, 2175, -69, -1000, 227, -1000, -1000, -1000,
	745, 24224, 22712, 18849, 2484, -71, -1000, -1000, -1000, -1000,
	-1000, -65, 1372, 2141, 2141, -1000, 2417, -1000, 606, 334,
	2410, 332, -1000, -31, 470, -1000, 658, 657, -65, 46431,
	-1000, 1361, 9492, 46431, 46431, 9492, 46431, -1000, -1000, -52,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1400, 51528, -1000,
	2179, 9492, 2337, 255, 3514, 3475, 18849, 54943, 293, -74,
	18849, 18849, -1000, 331, 18849, 605, 54118, -1000, -1000, -1000,
	54118, 18849, 197, -1000, 2405, 18849, 330, 329, 324, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 322, -1000, -1000,
	49399, -1000, 18849, 321, -1000, 320, 318, 4118, 51274, 51218,
	317, 54118, 1771, 54118, -1000, -1000, 835, 835, 1020, 1020,
	1020, 1020, 2377, 415, 717, 542, 436, 436, 436, 515,
	819, 819, 436, 436, 436, 1770, 1617, 469, 4840, 18849,
	312, -1000, -1000, 54118, 54118, 308, -1000, -1000, -1000, -181,
	307, 1730, 2295, -1000, 22712, 1730, 1730, -1000, -1000, 46431,
	54118, -1000, -207, -1000, 2410, -1000, -1000, 1661, -1000, 7177,
	34403, -1000, -1000, 164, 46431, 46431, 46431, 1977, -1000, 2997,
	-1000, 50964, -79, -1000, 2265, 2265, 18849, 174, -1000, -1000,
	462, 21581, 46431, -1000, 1664, 1698, 802, 46431, -1000, 46431,
	-1000, -1000, 46431, 46431, 46431, 46431, 46431, -1000, 457, 174,
	-80, 46431, 46431, 27671, -1000, -1000, -82, 9492, -1000, 2178,
	-1000, 27671, 870, 9492, 1162, 1732, -1000, 456, 21581, 455,
	46431, 30651, 2327, -1000, -1000, -1000, 454, 1759, 1446, 21581,
	1444, 1626, 651, 28042, -1000, 941, 1097, -1000, -1000, -59,
	-1000, 326, 145, 46431, 2482, 1348, -1000, -62, 54118, -1000,
	652, -1000, 2128, -1000, 2114, 560, -1000, -1000, 302, -1000,
	34774, 34774, 27671, 27671, -65, 1515, -1000, -1000, 1240, 1495,
	-1000, -1000, -1000, -1000, 2179, 18849, 18849, 293, -87, -1000,
	255, 255, -1000, 50926, -1000, 54118, 7567, -1000, 52966, -1000,
	-1000, -1000, -1000, 1244, -1000, 50672, -1000, -1000, -1000, 18849,
	-1000, -1000, -1000, -1000, 20049, 1767, 447, 54943, 50616, -1000,
	-1000, -1000, 737, 18849, 18849, 2048, 737, 737, -90, 669,
	-1000, -1000, -1000, 2410, -1000, 9492, -1000, -1000, -1000, 46431,
	-1000, 46431, -1000, 9492, 46431, 1768, 1525, -1000, -1000, 1629,
	441, 20049, 46431, 721, -1000, 1239, 21581, 2179, 9492, 2179,
	50362, 9879, -99, -116, 1522, -1000, 1513, 18849, -1000, 54943,
	1498, 1498, -125, -127, -1000, 853, 839, 18849, 838, -1000,
	-1000, -1000, 822, -1000, 674, -70, 23853, 164, -1000, -1000,
	1287, 21581, -132, 21581, -133, 300, 145, 21581, -1000, 46431,
	-134, 46431, -1000, 651, 28042, -1000, 2052, -1000, 2096, 46431,
	2153, -1000, -1000, -1000, 1701, 439, 438, 437, -1000, -1000,
	-1000, -135, -1000, -1000, -81, -1000, 683, 682, -1000, -1000,
	-1000, 9492, 955, -1000, 255, 255, -1000, -1000, -1000, -1000,
	292, 1348, 2290, -1000, 50324, 387, 20049, 54943, -140, -1000,
	-1000, 46431, 54118, -181, -1000, -1000, -1000, 34403, 516, -1000,
	1658, -1000, -1000, -1000, 46431, 1536, -1000, -1000, 18849, 4840,
	422, 18849, -1000, 1711, 413, -1000, -1000, -1000, -1000, -1000,
	-1000, 2265, -47, -1000, 1114, -1000, -1000, 54118, 2238, -1000,
	-1000, 412, 403, 46431, 46431, -49, 402, 401, 23853, -1000,
	46431, -142, 1239, -143, -1000, 1711, -1000, -145, 784, -1000,
	400, 28042, -1000, 1621, 956, -148, 46431, 1097, -1000, 27671,
	27671, -1000, 1515, -1000, 46431, -1000, 46431, -1000, 46431, -1000,
	1173, 18849, -1000, 387, -153, -1000, -92, -1000, 2325, -1000,
	-1000, -1000, -1000, 1938, 50070, 1603, 46431, 49816, 1162, 46431,
	2179, 290, 46431, 779, 9492, 1240, 1240, -1000, -1000, 272,
	18849, 18849, -1000, 399, -1000, 1711, 1239, 1162, 1239, 397,
	21581, -1000, 1626, 1027, -1000, 745, -1000, -1000, -154, -156,
	-1000, -161, -164, -1000, 269, 19649, 19649, -181, -1000, 46431,
	396, 1900, -1000, 1406, 1236, 268, 805, -1000, -169, -1000,
	-1000, 393, -1000, 18849, -1000, -174, -1000, 767, -175, -1000,
	764, 2405, -180, -182, 46431, 1162, 1711, -1000, 1711, 21581,
	-183, -1000, 24224, -1000, 728, 728, -1000, -1000, -1000, -1000,
	-1000, 20434, 1343, 1082, 52168, -1000, -1000, -1000, 46431, -1000,
	1429, 1418, 1098, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1603, 54118, -1000, 1240, 1727, -1000, 1240, 1764, -1000, -1000,
	-189, -1000, 1162, 1162, -192, -1000, -190, -1000, -1000, 2353,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2101, -1000, 795,
	1524, 1524, 1406, -1000, 390, -1000, 386, 1335, -1000, -1000,
	1239, -1000, 19249, -1000, 2364, -1000, -1000, 1637, -1000, -1000,
	18849, 18849, -1000, -1000, -1000, 1711, -1000, -1000, -1000, -1000,
	-197, -199, 1162, 1162, 820, -1000, -1000, 373, 18849, -205,
	1162, -1000,
}
var sqlPgo = [...]int{

	0, 2977, 2972, 1863, 2970, 2337, 2964, 2961, 2959, 2958,
	2956, 2327, 2950, 2949, 2946, 2944, 2943, 2940, 2935, 2934,
	2932, 2931, 2929, 2927, 2926, 2924, 2919, 2918, 2917, 2916,
	2913, 2912, 2310, 2911, 2285, 2910, 2909, 2907, 2899, 2898,
	2896, 2893, 22, 2891, 2889, 2886, 2884, 2273, 2882, 2869,
	2271, 2867, 2866, 2269, 2864, 2862, 2267, 2252, 2861, 2858,
	2215, 2856, 2854, 2207, 2852, 2194, 2849, 2848, 2184, 2846,
	97, 108, 2175, 2845, 2844, 2173, 2124, 2116, 2840, 2112,
	2837, 2836, 2038, 2032, 2835, 69, 2830, 2827, 2826, 2823,
	1966, 1936, 2822, 2820, 2818, 176, 2816, 1928, 2813, 2811,
	2810, 2808, 2805, 2804, 2803, 2802, 2801, 2798, 2792, 2777,
	2776, 2774, 2773, 2772, 2770, 2768, 2766, 2765, 2764, 2763,
	2761, 2760, 2758, 2757, 182, 114, 2756, 2755, 1893, 1856,
	2754, 2753, 47, 45, 18, 74, 119, 178, 3760, 171,
	2751, 2745, 2743, 2742, 2738, 2736, 25, 113, 127, 116,
	112, 2734, 390, 2733, 2731, 52, 34, 27, 20, 79,
	2729, 2728, 2727, 2096, 82, 2726, 2725, 170, 156, 2722,
	146, 31, 106, 134, 89, 109, 49, 2721, 102, 17,
	2720, 187, 253, 2718, 68, 32, 23, 2235, 98, 48,
	93, 164, 152, 148, 147, 118, 683, 2717, 174, 101,
	138, 2714, 2710, 2709, 55, 137, 5, 2, 153, 10,
	2706, 9, 2704, 11, 2702, 2696, 2691, 2690, 30, 111,
	91, 115, 2688, 56, 35, 135, 2687, 166, 2686, 76,
	175, 139, 3, 145, 2684, 61, 15, 78, 2679, 2678,
	107, 165, 2676, 28, 133, 80, 92, 185, 149, 86,
	150, 151, 2667, 2665, 2664, 130, 2663, 136, 95, 2662,
	2660, 88, 33, 2659, 54, 159, 41, 2657, 2656, 104,
	2655, 142, 2654, 2653, 179, 105, 125, 6, 38, 87,
	8, 160, 100, 62, 53, 2646, 3457, 1611, 297, 24,
	2644, 94, 59, 39, 77, 99, 169, 29, 2643, 2642,
	157, 2639, 2638, 2629, 2625, 2622, 123, 2621, 2618, 2612,
	85, 72, 43, 2606, 103, 36, 222, 154, 126, 172,
	117, 2600, 129, 90, 143, 2599, 379, 2598, 173, 2595,
	131, 2594, 2593, 2592, 2589, 37, 2586, 2583, 2579, 50,
	2577, 96, 2576, 132, 128, 158, 75, 120, 168, 161,
	140, 2572, 141, 46, 2567, 275, 71, 0, 3912, 3172,
	2566, 144, 84, 2560, 2559, 2557, 2556, 26, 13, 4,
	7, 14, 12, 110, 65, 188, 2546, 2538, 83, 121,
	2532, 181, 155, 2529, 2527, 2524, 42, 2520, 19, 2519,
	16, 2518, 2517, 21, 1, 2515, 2514, 167, 2512, 2511,
	2510, 2288, 2509, 177, 2504, 2503, 2499, 1981, 2497, 2496,
	57, 124,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 403, 403, 27, 13, 21,
	19, 19, 28, 17, 17, 24, 24, 148, 148, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 402, 402, 150, 150,
	149, 145, 145, 152, 152, 152, 154, 154, 151, 151,
	144, 144, 32, 32, 83, 83, 83, 135, 76, 76,
	76, 355, 355, 356, 356, 131, 131, 132, 132, 132,
	132, 133, 133, 134, 134, 134, 45, 34, 34, 34,
	34, 34, 35, 35, 36, 36, 43, 43, 125, 125,
	46, 46, 46, 46, 46, 46, 46, 46, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 56, 56, 57, 57, 58, 58, 58, 58, 58,
	58, 59, 59, 59, 59, 59, 59, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 66, 66, 66,
	67, 67, 67, 64, 64, 64, 62, 62, 62, 61,
	61, 61, 65, 65, 65, 63, 63, 63, 231, 231,
	68, 68, 68, 68, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 325, 325,
	69, 69, 298, 298, 72, 72, 256, 256, 73, 73,
	73, 73, 73, 74, 74, 74, 74, 84, 84, 84,
	84, 401, 401, 225, 225, 167, 167, 167, 167, 79,
	79, 79, 79, 80, 80, 80, 81, 81, 130, 130,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	37, 37, 37, 38, 38, 39, 39, 40, 40, 41,
	41, 42, 42, 42, 42, 42, 91, 91, 91, 93,
	90, 90, 90, 92, 92, 92, 92, 94, 94, 95,
	95, 95, 95, 95, 95, 96, 96, 349, 349, 234,
	234, 347, 347, 348, 348, 202, 202, 202, 202, 202,
	203, 203, 203, 354, 354, 354, 354, 354, 354, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	115, 115, 115, 124, 124, 124, 124, 124, 124, 124,
	117, 117, 108, 108, 98, 98, 104, 104, 104, 104,
	104, 99, 99, 105, 105, 107, 107, 109, 109, 109,
	109, 109, 109, 100, 100, 100, 100, 111, 111, 111,
	111, 110, 110, 120, 120, 120, 120, 120, 120, 120,
	313, 313, 116, 116, 116, 116, 119, 119, 119, 119,
	114, 114, 114, 118, 118, 121, 121, 121, 121, 101,
	101, 102, 102, 103, 103, 122, 122, 113, 113, 123,
	123, 123, 123, 123, 123, 123, 112, 112, 112, 404,
	404, 106, 399, 399, 397, 397, 397, 397, 397, 397,
	397, 398, 398, 400, 400, 77, 77, 51, 51, 52,
	52, 204, 204, 205, 205, 279, 279, 279, 279, 206,
	206, 153, 153, 153, 209, 210, 210, 207, 207, 208,
	208, 208, 212, 212, 211, 214, 214, 213, 278, 365,
	365, 366, 366, 366, 366, 366, 366, 366, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 363, 363,
	363, 364, 361, 361, 362, 362, 362, 362, 405, 405,
	277, 277, 218, 218, 368, 368, 368, 368, 369, 369,
	369, 369, 369, 372, 371, 370, 370, 370, 370, 370,
	309, 309, 309, 55, 55, 55, 245, 245, 244, 244,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 127, 127, 53, 53, 53, 159, 159,
	50, 50, 50, 54, 54, 49, 49, 49, 49, 49,
	262, 262, 260, 260, 223, 223, 315, 315, 315, 171,
	171, 146, 146, 146, 20, 22, 22, 16, 16, 16,
	16, 16, 16, 29, 29, 30, 30, 26, 26, 261,
	261, 263, 263, 78, 78, 82, 82, 88, 88, 126,
	126, 126, 126, 126, 126, 126, 33, 33, 33, 33,
	44, 44, 44, 44, 86, 408, 408, 408, 87, 87,
	407, 407, 166, 166, 166, 166, 168, 168, 274, 274,
	275, 275, 409, 409, 276, 276, 276, 161, 160, 162,
	162, 48, 48, 48, 155, 155, 156, 156, 157, 157,
	158, 158, 410, 410, 75, 75, 75, 129, 129, 198,
	198, 271, 271, 271, 219, 219, 176, 176, 273, 273,
	272, 272, 272, 243, 243, 243, 128, 128, 228, 228,
	236, 236, 237, 237, 321, 321, 238, 85, 85, 138,
	138, 136, 136, 136, 136, 136, 136, 137, 137, 137,
	139, 139, 139, 139, 139, 139, 139, 142, 142, 142,
	142, 143, 143, 143, 141, 141, 379, 379, 379, 381,
	381, 382, 378, 378, 380, 380, 406, 406, 247, 247,
	247, 216, 217, 215, 215, 221, 221, 220, 222, 222,
	314, 314, 314, 241, 241, 241, 241, 266, 266, 264,
	264, 265, 265, 267, 267, 268, 268, 268, 269, 269,
	270, 270, 240, 240, 294, 294, 140, 140, 140, 227,
	227, 227, 229, 229, 284, 284, 284, 285, 285, 283,
	283, 283, 283, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 395, 395, 395, 396, 396, 312, 312, 317,
	317, 317, 317, 317, 317, 310, 310, 311, 311, 322,
	323, 323, 250, 250, 250, 250, 248, 248, 249, 249,
	318, 318, 318, 318, 242, 242, 319, 319, 319, 280,
	280, 326, 326, 326, 341, 341, 226, 226, 226, 336,
	336, 327, 327, 327, 327, 327, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 330, 330,
	330, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 340,
	340, 340, 340, 340, 331, 331, 337, 338, 332, 333,
	339, 339, 339, 339, 343, 343, 334, 334, 334, 334,
	334, 334, 334, 335, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 258, 258,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	288, 288, 288, 288, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 373, 373, 373, 373, 373,
	373, 373, 373, 376, 376, 377, 377, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 383,
	383, 384, 384, 386, 386, 387, 387, 388, 389, 389,
	389, 390, 391, 391, 385, 385, 392, 392, 392, 393,
	393, 394, 394, 394, 394, 394, 300, 300, 301, 302,
	308, 308, 308, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 169,
	169, 169, 169, 169, 233, 233, 232, 232, 297, 297,
	295, 295, 299, 299, 251, 251, 342, 342, 342, 342,
	342, 342, 342, 252, 252, 252, 259, 253, 253, 254,
	254, 254, 254, 254, 291, 292, 255, 255, 255, 293,
	293, 303, 307, 307, 306, 305, 305, 304, 304, 281,
	281, 282, 282, 239, 239, 411, 411, 235, 235, 320,
	320, 320, 320, 200, 200, 230, 230, 199, 199, 193,
	193, 194, 194, 194, 194, 224, 224, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 344, 344,
	344, 345, 346, 296, 186, 185, 173, 174, 184, 183,
	182, 172, 175, 179, 180, 181, 177, 178, 189, 188,
	187, 324, 195, 195, 196, 196, 196, 197, 197, 197,
	197, 170, 170, 190, 190, 191, 192, 192, 163, 163,
	163, 164, 164, 165, 165, 353, 353, 351, 351, 351,
	352, 352, 352, 352, 350, 350, 350, 350, 350, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 1, 1, 5, 7, 7,
	7, 10, 7, 4, 12, 4, 12, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 3,
	3, 3, 6, 4, 3, 1, 2, 1, 1, 3,
	1, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 2, 5, 6, 2, 1, 12, 12,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 7, 3, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 3,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 3, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 5, 6, 5,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 2, 3, 2, 3, 7,
	7, 8, 10, 7, 4, 5, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 2, 8, 11, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 4, 7, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 7, 3, 1, 0, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 6, 3, 13, 16, 9, 12, 4,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 2, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 1,
	1, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 5, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 414, -4, -32, -34, -45, -43,
	-46, -73, -57, -58, -59, -72, -68, -74, -75, -76,
	-77, -69, -83, -82, -84, -88, -37, -85, -78, -79,
	-89, -97, -126, -127, -128, -129, -5, -11, 25, 36,
	-35, -36, 50, 76, 64, -53, -50, -47, -56, 78,
	99, -380, 103, -60, -63, -65, 107, 114, 119, 142,
	151, 250, 257, 278, 280, 282, 291, -39, -38, 115,
	-136, -138, 276, -80, -81, -90, -91, -92, -93, -130,
	309, -98, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, 312, -33, -44,
	-87, -86, 356, -6, -7, -8, -9, -10, -12, -22,
	-48, -49, -51, -52, -54, -55, -379, -61, -62, -64,
	-66, -67, -139, -137, 411, 277, 365, 37, 321, 65,
	110, 286, 20, -14, -18, -15, -17, -19, -16, -23,
	-27, -25, -24, -26, -28, -29, -30, -31, -20, -21,
	-13, 382, 390, -142, -140, -141, -143, 298, 373, 334,
	415, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 2, 334, 376, 299, 366, 92, 163, 262, 248,
	-397, 2, 4, -359, -357, -194, -193, 334, 92, 30,
	38, 39, 40, 41, 43, 44, 47, 48, 54, 55,
	56, 59, 94, 96, 97, 113, 120, 121, 131, 132,
	133, 144, 146, 154, 155, 158, 168, 170, 171, 172,
	173, 174, 176, 185, 186, 196, 214, 225, 227, 240,
	244, 254, 256, 264, 288, 301, 302, 303, 304, 315,
	316, 326, 330, 346, 347, 348, 353, 354, 369, 373,
	374, 378, 385, 20, 21, 22, 23, 25, 35, 36,
	37, 42, 46, 49, 50, 51, 58, 63, 64, 65,
	66, 67, 72, 69, 70, 71, 74, 76, 77, 80,
	81, 82, 90, 91, 93, 95, 99, 101, 103, 106,
	107, 109, 114, 115, 118, 116, 340, 342, 117, 119,
	129, 130, 135, 137, 141, 143, 148, 149, 150, 151,
	152, 153, 164, 167, 169, 162, 178, 181, 182, 183,
	189, 190, 191, 194, 193, 198, 199, 202, 203, 206,
	208, 211, 212, 215, 213, 217, 218, 220, 219, 226,
	228, 229, 231, 232, 235, 236, 239, 242, 245, 246,
	247, 248, 249, 250, 251, 253, 255, 257, 259, 260,
	261, 262, 263, 265, 266, 268, 269, 270, 271, 272,
	276, 274, 275, 277, 278, 279, 280, 282, 284, 285,
	286, 287, 289, 310, 311, 323, 291, 292, 293, 294,
	295, 296, 297, 305, 299, 300, 306, 307, 309, 312,
	314, 317, 320, 321, 322, 324, 327, 329, 325, 319,
	332, 333, 335, 336, 337, 338, 339, 341, 343, 344,
	351, 352, 356, 357, 358, 359, 362, 363, 364, 365,
	367, 370, 371, 372, 377, 383, 384, 386, 387, 388,
	-192, -163, 404, -191, 414, 414, 2, 182, 261, -187,
	-190, -191, -192, -163, 4, -357, -359, 92, 233, 414,
	414, 414, 2, 334, 322, 299, 366, 284, 376, -260,
	178, 92, 361, -163, 257, 24, 2, 101, 167, 364,
	363, 24, 253, 300, 336, 338, 2, 414, 414, 2,
	376, 299, 334, 163, 92, 366, 284, -181, 2, -163,
	-71, 2, 411, -70, -5, -47, -56, -60, -72, -68,
	-11, -32, -34, -53, -50, -57, -63, -65, -76, -75,
	-77, -79, -83, -82, -85, -90, -91, -97, -128, -129,
	78, 25, 107, 309, 115, -401, -225, 2, 24, -167,
	-163, 78, 142, 298, 334, 2, 182, 2, -181, 2,
	-397, 2, 182, 2, -401, -225, 23, 2, -163, 2,
	295, 312, -168, 2, 291, -163, 414, 414, 414, 414,
	414, 414, 203, 58, 288, 306, -95, 352, -94, 346,
	293, -96, -349, 2, 215, -163, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	2, -124, 306, 322, 149, 36, 58, 24, 63, 93,
	143, 163, 164, 190, 73, 74, 260, 203, 183, -313,
	117, 307, 335, 294, 332, 352, 78, 367, 285, -404,
	116, 4, 92, 215, 308, 346, 67, 339, 340, 414,
	414, 414, -406, 2, 334, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, -137, -139, -138, 414,
	414, 414, 414, 414, -220, -221, 360, 175, 112, 238,
	-136, -138, 2, -379, -124, 306, 2, 58, 24, -347,
	2, -286, 233, -288, 402, 403, 397, 221, 389, -300,
	98, 210, 209, -290, -303, 113, 288, 411, -197, -289,
	417, 9, -376, -138, 31, -301, -302, 52, -195, -163,
	7, 8, 5, 6, -170, -328, -296, -335, 355, 122,
	224, -373, -374, -196, 4, -357, -351, -329, -338, -333,
	-334, -336, 42, 48, 47, 343, 214, 301, 302, 303,
	304, 316, 369, 158, 40, 231, 232, 169, 176, 61,
	84, 85, 83, 88, 89, 86, 308, 366, 53, 30,
	154, 225, 155, 59, -375, 106, 39, 41, 43, 44,
	54, 55, 94, 96, 97, 120, 121, 131, 132, 133,
	144, 168, 170, 171, 172, 173, 174, 185, 186, 196,
	227, 244, 254, 264, 315, 326, 330, 346, 347, 348,
	353, 354, 374, -358, -339, 79, 123, 140, 166, 156,
	179, 180, 184, 197, 200, 216, 223, 241, 243, 283,
	313, -407, 2, 352, 352, 2, -407, 2, -407, 2,
	-166, 2, 352, 349, -408, 352, 385, -381, 265, -382,
	-181, -381, 414, 414, 416, 414, -215, -216, -217, 2,
	24, 104, 411, 2, -316, 2, 409, -318, -170, -375,
	-138, -317, 411, -187, 234, -196, 84, 85, 88, 89,
	4, -163, 61, 210, 209, -3, 2, -318, 154, -187,
	2, -318, 154, 2, -188, 154, -318, -190, 2, -355,
	154, -353, 9, -352, 5, 4, -357, -359, -358, 2,
	-172, -163, 2, -199, 154, -187, -184, -350, 4, -357,
	-359, -358, -360, 24, 26, 27, 28, 29, 31, 32,
	33, 34, 45, 52, 53, 57, 60, 62, 73, 78,
	83, 84, 86, 85, 87, 88, 89, 98, 100, 102,
	104, 105, 108, 110, 112, 122, 124, 136, 138, 139,
	142, 145, 147, 157, 163, 165, 175, 177, 192, 195,
	201, 204, 205, 221, 222, 224, 230, 233, 234, 237,
	238, 252, 258, 267, 281, 298, 308, 318, 328, 331,
	334, 345, 349, 350, 355, 360, 361, 366, 368, 375,
	376, 379, 380, 381, 382, -185, -350, 349, 416, -230,
	-193, -194, -224, -163, 413, -286, 2, -286, 2, -218,
	411, 413, 334, 62, 2, -187, 154, -177, 2, -163,
	-188, 154, 2, -190, -355, 154, 2, -355, 154, 2,
	-189, 2, -187, 163, 163, -172, 154, 2, -163, 24,
	139, 2, 177, 2, 177, 2, -319, 2, -318, -231,
	154, 2, -187, -231, 154, 2, -231, 154, 2, -200,
	154, 2, -199, -172, 154, 2, -356, 154, 2, -355,
	-356, 154, 2, -256, 411, -325, 2, -324, -352, 373,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 306, 233, 349,
	416, -187, -286, -298, 411, 139, -286, 233, 139, 235,
	2, 92, 334, 388, 24, -163, 2, 310, 2, 411,
	-95, 56, 352, -275, 2, -276, -160, -161, -162, 181,
	259, 263, 388, -347, 349, 394, 139, -347, -234, 413,
	-124, 2, 136, 2, 7, 2, -355, 2, 310, 2,
	260, 307, 58, 139, 2, 2, -399, 2, 233, 139,
	2, 139, 2, 139, 2, 139, 2, 139, 2, 2,
	260, 307, 2, 351, 191, 351, 2, 139, 2, 139,
	2, 5, 2, 181, 259, 323, 2, 334, 376, 299,
	2, 2, 139, 2, 139, 388, 2, -242, -318, -220,
	-221, -241, -264, -265, 201, 124, 230, -247, 24, 104,
	-247, -247, 46, 412, 412, -124, 310, 2, 10, 11,
	60, 35, 402, 403, 404, 405, 134, 406, 407, 400,
	401, 399, 392, 393, 396, 187, 188, 75, 395, 394,
	68, 207, 290, 125, 126, 127, 128, 273, 159, 160,
	161, 13, 14, 15, 28, 237, 200, 389, 156, 313,
	397, 16, 17, 18, 179, 180, 223, 38, 157, -169,
	-201, -286, -286, -286, -286, -286, 243, -239, -281, 409,
	-138, 411, 411, -138, -286, -232, 411, -346, 7, -138,
	-295, 409, -304, -286, 413, 411, 5, 411, 5, -383,
	383, 136, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 256, -343, 377, -343, -343, -330, 411, -330,
	411, 411, -331, 411, 411, 411, -330, 411, 411, 411,
	384, 384, 390, 411, 411, -274, -275, -274, 349, -168,
	416, -381, -218, 411, -235, -320, -286, 404, -235, -235,
	233, -232, -286, 79, -250, 184, 216, 140, 197, 283,
	166, -346, -71, -283, 417, 411, -312, 390, -312, -138,
	-317, 411, -316, 404, -187, 411, 413, -148, 274, -147,
	22, 25, 107, 371, 118, -208, 248, 113, 319, -403,
	115, 292, 341, 342, 274, 113, -244, -246, 32, 90,
	218, 245, 49, 152, 209, 210, 321, 113, 274, 382,
	113, 115, 274, -150, 319, -403, 115, 292, 274, -149,
	-208, 113, 417, 115, 228, -355, -230, 416, 416, -350,
	404, 139, -224, -350, -187, -195, -163, -196, 411, -218,
	221, 233, -245, -244, 221, -159, -378, 382, 221, 221,
	-218, -174, 154, 2, -164, -163, -174, 154, -378, 221,
	-319, -198, -187, -198, 309, -181, 32, -152, 416, 51,
	279, 113, -152, 113, -152, 113, -152, 416, 113, -152,
	113, 416, 113, 113, -232, 412, 416, -397, -224, -167,
	78, 411, 32, -297, -326, -327, -328, -337, -332, -335,
	42, 48, 47, 343, 214, 301, 302, 303, 304, 316,
	369, 158, 40, 231, 232, 169, 4, 41, -339, 176,
	168, 170, 171, 172, 173, 174, 315, 39, 264, 132,
	133, 131, 106, 97, 96, 227, 44, 43, 94, 346,
	347, 348, 185, 186, 55, 54, 374, 326, -356, -397,
	-224, 136, -172, 2, -187, 2, 69, 70, 388, -349,
	-232, 32, -275, 2, -409, 416, 199, -203, 206, 220,
	148, 234, 386, -354, 5, 4, -296, -309, 98, 203,
	-335, 8, 403, -344, 7, 402, -348, -347, -348, 82,
	413, -350, 334, -349, 24, 311, 2, -187, -400, 136,
	-398, 284, -397, -187, -187, -187, -187, -187, 136, 2,
	351, 2, 136, -163, -163, 199, -187, 2, -189, 2,
	-188, 2, 334, 163, 334, -152, 416, -241, -265, -264,
	-267, -286, 24, -270, 130, 217, -286, -288, -137, -137,
	-137, -222, -314, -286, 258, 163, -349, -341, -326, -340,
	269, 270, 268, 272, 271, -326, -186, -350, 346, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, 200, 156, 313, 38, 157, -286,
	349, -286, -286, -286, -286, 213, 221, 224, 355, 122,
	362, 104, 228, -411, 331, 34, -293, -138, 411, -308,
	29, 318, 24, -300, 288, 411, -281, -286, -282, -233,
	-232, 412, 416, -233, -299, -295, -307, -306, 379, -350,
	404, 412, -232, 375, 24, 104, 404, 2, 7, -257,
	387, 212, 95, 150, 211, -258, 297, -384, 129, 145,
	411, 412, 2, 412, 2, 412, 2, 412, 2, -286,
	-286, -286, -286, -286, -232, -346, -251, 2, -342, -232,
	4, 387, 212, 95, 150, 211, 297, -251, 2, 7,
	-232, 2, -232, 2, -252, 2, -286, -232, -253, -287,
	-288, 402, 403, 397, 411, 288, -254, 2, -286, -233,
	346, 346, 346, -286, 45, 195, 350, -255, -286, 139,
	-232, -168, -382, 32, -232, -227, 416, 139, 32, 4,
	-227, -227, 411, 412, 416, 184, 184, -316, -250, 184,
	-248, 241, -248, -248, -395, 411, 410, -312, -173, 409,
	418, -350, -233, 2, -311, -310, 32, -181, 239, -311,
	412, -187, -350, 416, 349, -261, 73, 62, -278, 154,
	62, -361, -175, 73, -362, -163, 57, 361, 258, 138,
	-261, 73, -261, 73, 73, 309, 46, -318, 35, -85,
	71, 139, 349, -318, -246, -326, 90, 209, 210, 46,
	-345, -344, 403, -345, 46, -345, -345, -345, 382, -188,
	-318, 349, 249, -355, 71, 349, 416, 35, -85, 71,
	139, 349, -199, -173, 71, 334, -323, -322, 391, -193,
	-163, 413, 324, 412, 413, 179, 179, 413, -204, -205,
	-163, -279, -278, -363, -364, -361, 178, 163, 361, 123,
	32, 113, -224, 113, 249, 113, 113, 32, 233, 221,
	233, 221, -155, 337, 113, -280, 380, -271, -85, 411,
	98, 32, -271, -236, -237, -321, -238, -175, 411, -181,
	-187, -231, -231, -231, -199, -200, -172, -355, -356, -356,
	412, -71, -324, 349, 382, 368, -205, -70, 25, 78,
	107, 412, 416, -226, 31, 409, -257, 411, -343, 411,
	-134, -322, 382, 139, -225, -323, -323, 136, 70, 394,
	349, 412, 352, -276, -202, 263, 317, 275, 305, 8,
	7, 7, 416, -350, -187, -224, -224, 306, -71, 136,
	-71, 413, -187, -199, -187, -318, -268, -344, 411, -269,
	288, 289, 416, -146, 33, 102, 189, -187, 388, -286,
	-286, 349, -411, 331, -293, -286, 213, 224, 355, 122,
	362, 104, 228, 139, 411, -287, -287, -232, -286, 411,
	-232, 410, 420, 412, -286, 410, 410, 416, -305, -306,
	108, -286, 413, -221, 416, -220, -286, -232, -232, 412,
	412, 349, 349, 349, 349, 411, -389, 242, 411, 411,
	-286, 32, 416, 416, 416, 416, 412, 412, 416, 412,
	139, 412, 412, 412, 412, 412, -259, 252, 412, 10,
	11, 402, 403, 404, 405, 134, 406, 407, 400, 401,
	399, 392, 393, 394, 68, 207, 290, 13, 14, 15,
	179, 157, -287, -287, -287, -232, 411, 412, -291, -292,
	139, 136, 388, 388, 388, 32, -255, -255, -255, 412,
	139, -232, 411, 412, -280, -320, -229, 2, -316, -183,
	-350, -280, -280, -232, -286, -316, -316, -249, 368, 233,
	184, -316, -310, 412, -396, -346, -312, -311, -346, -285,
	-284, 137, 219, 412, -181, -218, -312, 412, 413, -147,
	-187, -175, -182, -163, 221, -278, 154, -154, 221, -326,
	-182, 411, 411, 189, 189, -175, -182, 154, -175, 154,
	-182, -182, -402, 263, 229, 202, 262, 222, -148, 274,
	-85, 388, 411, -189, 274, -195, -345, -345, -244, 274,
	-188, -355, 382, 388, -172, -149, -85, 388, 411, -173,
	-150, 274, 388, -187, -131, 153, 228, 404, -350, -125,
	5, 224, -125, -350, 412, 416, 163, -174, 163, -180,
	-164, -85, -187, 139, -188, -355, -355, -355, -85, -187,
	113, -187, 113, -156, 109, -410, 394, -172, -221, -286,
	-243, -273, 281, 233, -219, -176, -175, 373, -181, -243,
	-228, 416, 139, 394, 413, -219, -152, -152, -152, -152,
	-152, -224, 23, -355, 412, -326, 409, 410, 7, 7,
	411, -346, -134, -133, 236, -132, -163, 5, -224, 139,
	-40, 382, 262, 92, 334, 248, 163, -347, -347, -275,
	359, 66, 263, -347, 306, -71, -163, -269, -286, -314,
	-187, 417, -286, -286, -287, -287, 139, 411, -286, -297,
	28, 28, 412, -233, 416, -282, -286, 412, -295, 110,
	-286, 345, -350, 404, 412, 375, -221, -221, -221, 5,
	212, 150, 211, -258, 211, -258, -258, 7, -390, -178,
	411, -163, 380, -220, 412, -341, -326, -286, -286, -286,
	-346, -286, -291, -286, -341, -326, -287, -287, -287, -287,
	-287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
	-287, -287, -287, -287, -287, 104, 221, 228, -287, 416,
	-233, -292, -291, -286, -286, -326, 412, 412, 412, -232,
	-70, -240, 145, -323, 416, -240, -240, 412, -249, 411,
	-286, -316, 410, 412, 416, -311, 410, 416, 419, 394,
	-312, -218, -310, -350, 349, 349, 113, 221, 370, -365,
	-362, -286, -223, -315, -175, -377, 411, -163, -373, -374,
	-170, 411, 411, -145, 107, 309, -263, 113, -152, 113,
	-152, 386, 411, 411, 349, -261, 73, -289, -170, -163,
	-232, 349, 349, 249, -289, -289, -232, 349, -289, 115,
	-134, 139, 333, 413, -206, 162, -279, -164, 411, -174,
	411, 411, -218, -187, -245, -159, -262, 368, -173, 411,
	-173, -157, 194, -410, -353, -378, -266, -264, -243, -235,
	222, 72, 412, 416, 413, -280, -237, -229, -286, 2,
	412, 235, -135, 80, -135, 7, 410, 412, -346, 412,
	416, 411, 394, 394, -224, 236, -184, -172, -187, -185,
	-199, 234, 412, -146, -173, 28, 28, -286, -297, 412,
	-286, -286, 412, -286, 410, -286, 413, 5, -286, 412,
	412, 412, 412, -391, -163, -286, 412, 412, 412, 416,
	412, 412, 412, -292, 139, 104, 228, 411, -286, 412,
	412, 412, -294, 147, 46, -316, -294, -294, -224, -283,
	-346, -284, -173, 409, -311, 413, -175, -182, -278, 113,
	-366, 73, -367, 60, 123, 78, 221, 224, 361, 258,
	57, 98, 267, 32, 412, 412, 416, -171, 60, -171,
	-286, 411, -223, -224, 221, 98, 221, 98, 91, 357,
	-175, -182, -224, -224, -187, -175, -182, 411, 412, -189,
	-188, -355, 412, -173, 71, -356, 346, -350, -207, -208,
	157, 411, -223, 411, -224, -204, 32, 411, 141, 233,
	-223, 233, -158, 193, -410, -353, -155, -243, -272, 411,
	233, -85, -176, 2, -221, 394, 91, 91, 410, 412,
	-132, -133, -355, -355, -41, -42, 163, 73, 251, -210,
	-209, 248, 228, -146, -286, -286, 412, 412, -350, 404,
	-221, -385, 248, 412, -286, -287, 139, 411, -297, 412,
	-386, 381, -286, -232, -386, -386, 412, -312, -346, -278,
	-182, -186, -179, -163, 123, 154, 224, 189, 411, -287,
	-187, 411, 2, -277, -405, 77, 329, -315, -146, -186,
	-146, 412, -232, 412, 412, 224, 224, -286, -326, -152,
	-152, 412, 412, 349, 349, -232, 349, 349, 388, -289,
	246, -223, 412, -223, 412, 412, -85, -223, -187, 412,
	-187, -410, -353, -156, 105, -224, 73, -266, -293, 411,
	411, 412, 416, 24, 411, 24, 411, -185, 334, 412,
	-221, 46, 412, -287, -297, 412, -387, -388, -178, -311,
	410, -367, -179, 221, -286, -165, 411, -286, -206, 411,
	-171, -221, 267, -151, 60, 411, 411, -175, -182, -221,
	411, 411, -289, -187, 412, -277, 412, -206, 412, -262,
	411, -353, -157, 363, 222, 412, -182, -243, -356, -356,
	-42, -224, -224, -187, -392, 262, 289, -232, 412, 416,
	32, 113, 412, -368, 208, -163, 412, -207, -224, -146,
	412, -187, -144, 368, -186, -212, -211, -209, -214, -213,
	-209, 412, -232, -232, 411, -206, -277, -207, -277, 411,
	-223, -158, 309, -280, 412, 412, 412, 412, 412, -393,
	-394, 38, 358, 82, -286, -393, -388, -390, 123, -369,
	-372, -371, 233, 140, 247, 314, 412, 328, 378, 412,
	-218, -286, 412, 416, 373, 412, 416, 373, 412, 412,
	-224, -207, -206, -206, -223, 412, -236, -134, -134, -394,
	255, 135, 288, 255, 135, -179, -371, 233, -372, 233,
	363, 101, -368, -211, 157, -213, 139, 412, -207, -207,
	412, -280, 28, -370, 218, 279, 51, 309, -370, -369,
	411, 411, -153, 51, 279, -277, -394, 21, 224, 98,
	-232, -232, -206, 412, 412, -207, -207, 349, 411, -232,
	412, -207,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	177, 179, 0, 0, 0, 190, 192, 194, 195, -2,
	0, 0, 0, 221, 222, 224, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 361, 0,
	827, -2, 0, 339, 341, 350, 352, 354, 356, 357,
	0, 419, 421, 423, 425, 427, 429, 431, 433, 435,
	436, 438, 440, 442, 444, 446, 448, 450, 452, 454,
	456, 458, 460, 462, 464, 466, 468, -2, 739, 741,
	743, 745, -2, 60, 62, 64, 66, 68, 70, 85,
	198, 200, 202, 204, 207, 209, 864, 227, 229, 231,
	233, 235, -2, 876, 0, 0, 0, -2, 0, -2,
	-2, -2, 757, 71, 72, 73, 74, 75, 76, 91,
	92, 93, 94, 95, 96, 78, 80, 81, 87, 88,
	90, 0, 0, 840, 842, 844, 846, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 44, 50, 52, 54,
	58, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, -2, -2, -2, -2, 0, 0, 1480, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
	1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1371, 1425, 1374, 1369, 178, 180, 181, 0, 0, 643,
	1410, 1423, 1424, 1425, 1428, 1429, 1430, 1480, 0, 191,
	193, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 318, 1554, 320, 322, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 220, 223, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 317, 315, 1405,
	260, 261, 0, 300, 301, 302, 303, 304, 305, 307,
	264, 266, 268, 269, 271, 273, 275, 277, 279, 281,
	283, 285, 286, 288, 290, 291, 293, 295, 296, 298,
	703, 0, 0, 0, 0, 0, 332, 326, 331, 333,
	335, 336, 337, 338, 0, 160, 0, 576, 313, 311,
	0, 156, 0, 736, 0, 332, 1452, 330, 737, 738,
	0, 0, 733, 734, 1583, 767, 340, 342, 351, 353,
	355, 358, -2, -2, 1682, -2, 381, -2, 389, 1691,
	1585, 392, 0, 394, -2, 397, 420, 422, 424, 426,
	428, 430, 432, 434, 437, 439, 441, 443, 445, 447,
	449, 451, 453, 455, 457, 459, 461, 463, 465, 467,
	469, 470, 0, 0, 0, 0, 0, 474, 0, -2,
	-2, 0, 0, 0, 0, 0, -2, 0, -2, 0,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 473, 475, 476, 477, 0, 520, 559, 560, 740,
	742, 744, 0, 684, 866, 61, 63, 65, 67, 69,
	199, 201, 203, 205, 208, 210, -2, 838, 839, 228,
	230, 232, 234, 236, -2, 0, 870, 870, 870, 0,
	0, 839, 837, 0, 343, 0, 345, 0, 474, 348,
	349, 401, 402, 1070, 0, 0, 0, 0, 0, 0,
	1148, -2, -2, 1180, 1182, 1653, 1682, 0, 1184, 1185,
	0, 1187, 1189, 1190, 0, 1193, 1194, 1348, 1417, 1412,
	1377, 1378, 1379, 1380, 0, 0, 1383, 0, 1385, 1386,
	1387, 1250, 1204, -2, -2, -2, 1421, 986, 987, 988,
	989, 990, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1701,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 0, 1637,
	1661, 1675, 1662, 1649, 1222, 1486, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1654, 1655, -2, -2, -2,
	1659, -2, -2, -2, -2, -2, -2, -2, -2, 1673,
	-2, 1678, 1679, -2, -2, -2, 1690, -2, -2, -2,
	1694, 1695, -2, 1439, 1039, 1702, 1703, 1704, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1714, 1715, 1716, 1717, 1718,
	1719, 769, 747, 760, 769, 749, 750, 751, 752, 753,
	758, 759, 762, 0, 754, 755, 756, 856, 1560, 859,
	643, 857, 841, 843, 0, 845, 0, 0, 0, 850,
	873, 871, 0, 907, 854, 855, 865, 922, 0, 938,
	938, 929, 0, 960, 0, 1422, 0, 0, 0, 0,
	-2, 1425, 1701, 1712, 1713, 2, 77, 0, 1661, 960,
	79, 0, 1661, 82, 0, 1661, 0, -2, 86, 0,
	1661, 161, 162, 1435, 1436, 1440, 1441, 1442, 1443, 89,
	0, 1401, 97, 0, 1661, 1368, 0, 1398, 1444, 1445,
	1446, 1447, 1448, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 0, 1395, 0, 0, 569,
	1365, 1370, 570, 1375, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 206, 643, 1661, 0, 212, 1406,
	667, 1661, 665, 1409, -2, 1661, 687, 690, 1661, 692,
	643, 694, 1408, -2, 1432, 863, 1661, 783, 319, 321,
	0, 214, 0, 796, 0, 798, 0, 817, 966, 145,
	1661, 239, 258, 145, 1661, 242, 145, 1661, 245, 145,
	1661, 248, 1363, 145, 1661, 251, 252, 1661, 254, 163,
	255, 1661, 257, 314, 0, 0, -2, 308, 1411, -2,
	306, 265, 267, 270, 272, 274, 276, 278, 280, 282,
	284, 287, 289, 292, 294, 297, 299, -2, 0, 0,
	0, 0, 575, 0, 0, 0, 735, 0, 0, 0,
	362, 0, 0, 0, 0, 766, 359, 0, 378, 0,
	380, 1648, -2, -2, 384, 770, 774, 775, 776, 0,
	0, 0, 0, 391, 0, 0, 0, 395, 398, 0,
	471, 472, 0, 481, 482, 483, 484, 485, 0, 488,
	509, 524, 0, 0, 492, 494, 574, 496, 0, 0,
	498, 0, 500, 0, 502, 0, 504, 0, 506, 508,
	510, 525, 512, 0, 0, 0, 523, 0, 529, 0,
	532, 533, 534, 0, 536, 537, 538, 0, 0, 0,
	546, 548, 0, 558, 0, 478, 479, 145, 964, -2,
	0, 833, 885, 886, 0, 0, 0, 0, 868, 869,
	0, 0, 0, 829, 830, 344, 0, 347, 0, 0,
	0, 0, 1283, 1284, 1285, 1286, 1287, 1288, 1291, 1292,
	1289, 1290, 1293, 1294, 0, 0, 0, 0, 0, 1295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 1297, 1298, 0, 0, 1300, 0, 1302, 0,
	0, 0, 0, 0, 0, 1127, 1129, 1356, 0, 0,
	1299, 1075, 1076, 1077, 1112, 1113, 0, 1181, 1353, 1352,
	1183, 0, 1305, -2, 1306, 0, 0, 1186, 1392, 1191,
	1192, 1305, 0, 1347, 0, 0, 1382, 0, 1067, 1252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 1037, 1044, 1041, 1040, 1025, 0, 1024,
	0, 0, 1022, 0, 0, 0, 1026, 0, 1328, -2,
	0, 0, 0, 0, 0, 746, -2, 748, 0, 764,
	0, 858, 0, 0, 911, 1357, 1361, 1362, 911, 911,
	0, 0, 1306, 0, 0, 0, 0, 957, 957, 957,
	955, 932, 0, 938, 0, -2, 948, 0, 948, -2,
	929, 0, 0, 961, 962, 0, 0, 98, 730, 117,
	0, 730, 730, 0, 0, 135, 0, 0, 0, 0,
	0, 113, 105, 106, 0, 0, 83, 668, 0, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 115, 0, 138,
	140, 0, 0, 0, 0, 951, 568, 0, 0, 1426,
	1373, 0, 0, 1426, 0, 0, 1412, 1413, 582, 0,
	0, 0, 663, 666, 0, 685, 0, 862, 0, 0,
	0, 0, 1661, 699, 1397, 1431, 0, 1661, 785, 0,
	970, 0, 799, 0, 0, 967, 0, 237, 0, 143,
	144, 0, 240, 0, 243, 0, 246, 0, 0, 249,
	0, 0, 0, 0, 0, 865, 0, 0, 324, 334,
	0, 0, 865, 0, 1308, 978, 981, 982, 983, 1067,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1045, 1039, 1053,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1035, 0, 1010, 1010, 1010, 1027, 1028, 1046, 1047,
	1049, 1051, 979, 980, 1045, 1045, 1042, 1043, 175, 0,
	328, 0, 951, 364, 951, 366, 0, 554, 0, 0,
	0, 0, -2, 386, 0, 772, 0, 777, 410, 411,
	412, 779, 780, 390, 413, 414, 415, 416, 417, 418,
	0, 660, 0, 662, 1388, 0, 387, 403, 388, 393,
	0, 399, 0, 486, 487, 489, 490, 491, 495, 0,
	562, 1575, 572, 497, 499, 501, 503, 505, 865, 514,
	0, 516, 865, 527, 530, 535, 539, 540, 541, 542,
	543, 544, 0, 0, 0, 683, 0, 836, 883, 884,
	889, 893, 894, 897, 900, 901, 891, 1070, 851, 852,
	853, 877, 878, 713, 0, 0, 346, 1071, 974, 975,
	1029, 1030, 1031, 1032, 1033, 1072, 1073, 1394, 0, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, -2,
	-2, -2, -2, -2, -2, -2, -2, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, -2, -2,
	-2, 1110, 1111, -2, 1301, 1303, 0, 1356, 0, -2,
	0, -2, -2, -2, -2, 1124, 0, 1126, 1131, 1133,
	1135, 0, 0, 0, 0, 1355, 1145, 1339, 0, 0,
	1280, 1281, 1282, 1130, 0, 0, 1354, 1351, 0, 0,
	1304, 1188, 0, 0, 0, 1312, 1346, 1342, 0, 1414,
	1420, 1195, 876, 0, 0, 0, 0, 1202, 0, 1393,
	1054, 1055, 1056, 1057, 1058, 1059, 1068, 1260, 0, 0,
	0, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 0,
	0, 0, 0, 0, 0, 0, 0, 1232, 0, 1315,
	-2, -2, -2, -2, -2, -2, -2, 0, 1234, 0,
	0, 1246, 0, 1248, 0, 1236, 1306, 1325, 0, 0,
	1151, 0, 0, 0, 0, 1682, 0, 1239, 1306, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 1306, 0,
	1338, 763, 860, 0, 0, 970, 0, 0, 0, 1360,
	970, 970, 0, 906, 0, 0, 0, 0, 0, 0,
	952, 956, 953, 954, 0, 0, 938, 948, 919, 0,
	0, 1396, 0, 926, 927, 947, 0, 643, 937, 928,
	-2, 0, -2, 0, 0, 0, 0, 729, 119, 1661,
	0, 147, 0, 0, 633, 1402, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 669, 670, 672, 678, 680, 0,
	674, 1391, 0, 675, 0, 677, 679, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 1367, 0, 0, 166, 950, 0, 1366,
	1376, 0, 176, 642, 0, 0, 0, 0, 0, 581,
	-2, 583, 585, 586, 587, 588, 1513, 1432, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 787, 793, 0, 876, 0, 815, 801, 0,
	0, 0, 815, 819, 820, 822, 823, 0, 0, 968,
	259, 145, 145, 145, 1364, 145, 145, 164, 253, 256,
	316, 262, 309, 0, 0, 0, 0, 310, 0, 0,
	0, 312, 0, 971, 973, 0, 984, 0, 1037, 0,
	154, 175, 0, 0, 0, 363, 368, 0, 555, 0,
	0, 379, 0, 771, 778, 0, 407, 0, 409, 661,
	1390, 1389, 0, 400, 480, 573, 571, 513, 517, 865,
	519, 0, 556, 557, 561, 965, 0, 895, 0, 892,
	898, 899, 0, 880, 711, 712, 0, 0, 0, -2,
	-2, 0, 0, 0, 1146, -2, 1125, 1128, 1132, 1134,
	1136, 0, 0, 0, 0, 0, 0, 0, 1147, 1305,
	0, 1349, 1352, -2, 1307, 1310, 1311, 0, 0, 1343,
	0, 0, 0, 0, 0, 875, 876, 876, 876, 1201,
	0, 0, 0, 0, 0, 0, 1203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1221, 1008, 0, 1231,
	0, 1233, 1034, 1245, 1247, 1235, 0, 0, 1237, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1154, 1155, 1156, 0, 1305, 1238, 1331, 1332,
	0, 0, 1048, 1050, 1052, 0, 0, 0, 0, 1244,
	0, 1337, 865, 908, 903, 1358, 951, 910, 912, 1359,
	1399, 903, 903, 0, 1307, 940, 0, 942, 0, 0,
	0, 944, 0, 933, 0, 935, 948, 924, 0, 0,
	917, 0, 916, 938, 643, 946, 0, 963, 0, 118,
	717, 0, 0, 1400, 0, 121, 1661, 129, 0, 610,
	0, 0, 0, 0, 0, 732, 130, 1661, 145, 1661,
	145, 131, 134, 0, 137, 0, 0, 601, 99, 730,
	102, 0, 0, 723, 0, 673, 676, 682, 84, 0,
	725, 715, 0, 0, 714, 139, 103, 0, 0, 727,
	101, 0, 0, 0, 175, 0, 0, 1372, 1427, 186,
	188, 189, 187, 1414, 590, 0, 1432, 0, 1432, 0,
	1404, 579, 643, 0, 667, 688, -2, 691, 693, 701,
	0, 0, 0, 789, 793, 0, 792, 863, 888, 969,
	794, 815, 0, 0, 0, 804, 806, 803, 800, 797,
	970, 0, 0, 0, 0, 0, 238, 241, 244, 247,
	250, 323, 0, 0, 0, 1309, 0, 976, 0, 0,
	0, 0, 155, 173, 1542, 171, 168, 170, 327, 0,
	365, 0, 0, 0, 0, 0, 0, 376, 377, -2,
	405, 406, 408, 404, 515, 518, 526, 0, 0, 879,
	713, 0, 1074, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1340, 0, 0, 0, 1351, -2, 1313, 1341,
	1345, 0, 1415, 1419, 1196, 0, 0, 0, 0, 1384,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 0, 1258, 1259,
	1263, 1407, 0, 0, 1207, 0, 0, 0, 0, 0,
	0, 1314, 1324, 1326, 1152, 1153, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, -2, -2, -2, 1170,
	1171, 1172, -2, -2, -2, 0, 0, 0, 1327, 0,
	0, 1329, 1330, 1334, 1335, 0, 1241, 1242, 1243, 1336,
	0, 905, 0, 909, 0, 905, 905, 872, 941, 0,
	959, 943, 922, 934, 0, 931, 920, 0, 921, 0,
	948, 945, 930, -2, 0, 0, 0, 0, 146, 608,
	632, 0, 0, 704, 710, 710, 0, 1402, 1205, 1206,
	0, 0, 0, 123, 0, 0, 0, 0, 127, 0,
	133, 136, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 109, 112, 0, 0, 108, 0,
	152, 0, 0, 0, 598, 0, 584, 0, 0, 0,
	0, 582, 0, 211, 664, 686, 0, 0, 0, 0,
	0, 791, 793, 0, 784, 785, 815, 887, 795, 813,
	814, 812, 0, 0, 0, 876, 821, 818, 824, 825,
	0, 325, 0, 157, 0, 0, 977, 985, 0, 1038,
	0, 0, 0, 0, 329, 0, 549, 550, 596, 0,
	553, 890, 896, 881, 713, 0, 0, -2, 0, 1139,
	-2, -2, 1276, 1307, 1350, 1344, 0, 1381, 876, 1197,
	1199, 1200, 1069, 1265, 1262, 0, 1249, 1216, 1217, 0,
	1219, 1220, 1009, 1323, 0, 0, 0, 0, 1307, 1278,
	1240, 861, 1254, 0, 0, 913, 1254, 1254, 0, 938,
	936, 918, 914, 0, 925, 0, 719, 721, 120, 0,
	609, 0, 612, 0, 0, 0, 0, 619, 620, 0,
	0, 0, 0, 0, 634, 641, 0, 713, 0, 713,
	0, 0, 0, 0, 0, 142, 0, 0, 731, 0,
	145, 145, 0, 0, 718, 0, 0, 0, 0, 724,
	726, 716, 0, 728, 0, 165, 0, 1415, 577, 597,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 0, 781, 793, 0, 786, 787, 213, 0, 0,
	0, 802, 805, 807, 888, 0, 0, 0, 972, 1036,
	172, 0, 167, 169, 367, 369, 0, 0, 375, 551,
	595, 0, 0, 882, -2, -2, 1140, 1277, 1416, 1418,
	0, 876, 0, 1251, 0, -2, 0, 0, 0, 1279,
	847, 0, 904, 902, 848, 849, 958, 948, 0, 122,
	0, 613, 614, 1403, 616, 0, 618, 621, 0, 623,
	1434, 0, 627, 590, 0, 638, 639, 705, 706, 709,
	707, 710, 876, 636, 0, 124, 125, 141, 149, 126,
	132, 0, 0, 0, 0, 876, 0, 0, 0, 949,
	0, 0, 641, 0, 631, 590, 580, 0, 701, 697,
	0, 0, 788, 789, 0, 0, 0, 815, 826, 0,
	0, 174, 0, 371, 0, 373, 0, 594, 0, 1198,
	1268, 0, 1218, -2, 0, 1178, 1253, 1255, 0, 923,
	915, 611, 615, 0, 0, 647, 0, 0, 598, 0,
	713, 0, 0, 151, 0, 0, 0, 720, 722, 0,
	0, 0, 111, 0, 630, 590, 641, 598, 641, 0,
	0, 790, 791, 0, 809, 970, 811, 816, 0, 0,
	370, 0, 0, 552, 0, 0, 0, 1264, 1179, 0,
	0, 0, 622, 652, 0, 0, 0, 635, 0, 708,
	1196, 643, 128, 0, 148, 0, 602, 0, 0, 605,
	0, 0, 0, 0, 0, 598, 590, 578, 590, 0,
	0, 782, 0, 810, 175, 175, 372, 374, 1261, 1266,
	1269, -2, 1621, 1477, 0, 1267, 1256, 1257, 0, 624,
	648, 649, 0, 644, 645, 646, 1433, 625, 626, 640,
	647, 150, 599, 0, 0, 600, 0, 0, 114, 116,
	0, 628, 598, 598, 0, 698, 970, 158, 159, 0,
	1271, 1272, 1273, 1274, 1275, 617, 650, 0, 651, 0,
	0, 0, 652, 603, 0, 606, 0, 593, 629, 695,
	641, 808, 0, 653, 0, 656, 657, 0, 654, 637,
	0, 0, 589, 591, 592, 590, 1270, 655, 658, 659,
	0, 0, 598, 598, 0, 696, 604, 0, 0, 0,
	598, 607,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 400, 3, 406, 401, 3,
	411, 412, 404, 402, 416, 403, 413, 405, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 420, 415,
	392, 394, 393, 396, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 409, 3, 410, 407, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 418, 399, 419, 397,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 395,
	57735, 398, 57736, 408, 57737, 414, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1057
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1068
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1231
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1241
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1247
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1256
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1265
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1274
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1286
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1357
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1380
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = nil
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1486
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplemented(sqllex, "alter using")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.str = "CSV"
		}
	case 158:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1654
		{
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1698
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1702
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.str = ""
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "CREATE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			return helpWith(sqllex, "DROP")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "DELETE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "INSERT")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{ /* SKIP DOC */
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "GRANT")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "RESET")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "RESET")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "USE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{ /* SKIP DOC */
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "USE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			return unimplemented(sqllex, "set local")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			return unimplemented(sqllex, "set from current")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = tree.Low
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = tree.Normal
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = tree.High
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			return helpWith(sqllex, "SHOW")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2595
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.str = "client_encoding"
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.str = "timezone"
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2677
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2688
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = true
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = false
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2868
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2900
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2933
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2973
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3000
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3026
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.str = ""
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3574
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 628:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			return unimplemented(sqllex, "match full")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			return unimplemented(sqllex, "match partial")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplemented(sqllex, "match simple")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3804
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3812
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3831
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3835
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = nil
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3979
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = true
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = false
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = true
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = false
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4021
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4025
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = tree.Descending
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4076
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4078
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4122
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4198
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4229
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4233
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.str = ""
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.str = ""
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4294
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4358
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.str = ""
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.str = ""
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.str = ""
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4402
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			return helpWith(sqllex, "INSERT")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4516
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4520
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 816:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4570
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4594
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4693
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4728
		{
			return helpWith(sqllex, "SELECT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4729
		{
			return helpWith(sqllex, "VALUES")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4730
		{
			return helpWith(sqllex, "TABLE")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			return helpWith(sqllex, "SELECT")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4835
		{
			return helpWith(sqllex, "TABLE")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4874
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4881
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4885
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = true
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = false
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = false
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = true
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4915
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4986
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5042
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5101
		{
			return helpWith(sqllex, "VALUES")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5103
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5140
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5218
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = nil
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = true
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = false
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5391
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5392
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5466
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5480
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5488
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5537
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = nil
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5694
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5778
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5830
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5831
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = tree.Year
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = tree.Month
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = tree.Day
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = tree.Month
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = nil
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = tree.Second
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5934
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5969
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6197
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6263
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6433
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6474
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6483
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6488
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6493
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6497
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6501
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6505
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6517
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6524
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6525
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6527
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6535
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6538
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6549
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6556
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6565
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6566
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6570
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6572
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6576
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6582
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6586
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6590
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6596
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6604
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6608
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6612
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6616
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6620
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6624
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6628
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6635
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6638
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6643
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6645
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6648
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6653
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6655
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6658
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6660
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6663
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6665
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6668
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6670
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6674
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6677
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6678
		{
			return unimplemented(sqllex, "treat")
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6680
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6684
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6688
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6692
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6696
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6699
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6701
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6704
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6709
		{
			return unimplemented(sqllex, "within group")
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6710
		{
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6714
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6718
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6725
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6729
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6735
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6745
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6753
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6757
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6761
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6768
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6787
		{
			sqlVAL.str = ""
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6793
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6797
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6807
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6808
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6809
		{
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6812
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6813
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6819
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6820
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6821
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6822
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6823
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6834
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6838
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6844
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6850
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6856
		{
			sqlVAL.union.val = tree.Any
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6860
		{
			sqlVAL.union.val = tree.Some
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6864
		{
			sqlVAL.union.val = tree.All
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6869
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6870
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6871
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6872
		{
			sqlVAL.union.val = tree.Div
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6873
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6874
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6875
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6876
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6877
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6878
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6879
		{
			sqlVAL.union.val = tree.LT
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6880
		{
			sqlVAL.union.val = tree.GT
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6881
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6882
		{
			sqlVAL.union.val = tree.LE
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6883
		{
			sqlVAL.union.val = tree.GE
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6884
		{
			sqlVAL.union.val = tree.NE
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6888
		{
			sqlVAL.union.val = tree.Like
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6889
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6890
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6891
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6903
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6909
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6919
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6929
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6933
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6939
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6949
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6953
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6975
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6979
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6983
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6989
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6996
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7000
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7017
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7021
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7025
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7029
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7033
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7039
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7045
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7051
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7055
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7059
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7065
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7069
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7080
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7087
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7097
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7103
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7107
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7114
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7120
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7124
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7131
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7137
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7146
		{
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7147
		{
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7151
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7161
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7170
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7174
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7178
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7186
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7196
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7206
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7213
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7241
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7245
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7249
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7255
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7266
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7270
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7274
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7278
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7281
		{
			return unimplemented(sqllex, "func const")
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7283
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7287
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7290
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7292
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7296
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7300
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7307
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7311
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7320
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7331
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7341
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7437
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7444
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7448
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7452
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7466
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7470
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7474
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7487
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7505
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7515
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7519
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7533
		{
			sqlVAL.str = ""
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7539
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7543
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
