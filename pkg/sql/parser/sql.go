// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:549
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7974

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	415, 55,
	-2, 865,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	163, 703,
	-2, 0,
	-1, 58,
	101, 865,
	167, 865,
	363, 865,
	364, 865,
	-2, 0,
	-1, 71,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 828,
	-1, 107,
	191, 521,
	351, 521,
	-2, 0,
	-1, 112,
	4, 867,
	20, 867,
	21, 867,
	22, 867,
	23, 867,
	25, 867,
	30, 867,
	35, 867,
	36, 867,
	37, 867,
	38, 867,
	39, 867,
	40, 867,
	41, 867,
	42, 867,
	43, 867,
	44, 867,
	46, 867,
	47, 867,
	48, 867,
	49, 867,
	50, 867,
	51, 867,
	54, 867,
	55, 867,
	56, 867,
	58, 867,
	59, 867,
	63, 867,
	64, 867,
	65, 867,
	66, 867,
	67, 867,
	69, 867,
	70, 867,
	71, 867,
	72, 867,
	74, 867,
	76, 867,
	77, 867,
	80, 867,
	81, 867,
	82, 867,
	90, 867,
	91, 867,
	92, 867,
	93, 867,
	94, 867,
	95, 867,
	96, 867,
	97, 867,
	99, 867,
	101, 867,
	103, 867,
	106, 867,
	107, 867,
	109, 867,
	113, 867,
	114, 867,
	115, 867,
	116, 867,
	117, 867,
	118, 867,
	119, 867,
	120, 867,
	121, 867,
	129, 867,
	130, 867,
	131, 867,
	132, 867,
	133, 867,
	135, 867,
	137, 867,
	141, 867,
	143, 867,
	144, 867,
	146, 867,
	148, 867,
	149, 867,
	150, 867,
	151, 867,
	152, 867,
	153, 867,
	154, 867,
	155, 867,
	158, 867,
	162, 867,
	164, 867,
	167, 867,
	168, 867,
	169, 867,
	170, 867,
	171, 867,
	172, 867,
	173, 867,
	174, 867,
	176, 867,
	178, 867,
	181, 867,
	182, 867,
	183, 867,
	185, 867,
	186, 867,
	189, 867,
	190, 867,
	191, 867,
	193, 867,
	194, 867,
	196, 867,
	198, 867,
	199, 867,
	202, 867,
	203, 867,
	206, 867,
	208, 867,
	211, 867,
	212, 867,
	213, 867,
	214, 867,
	215, 867,
	217, 867,
	218, 867,
	219, 867,
	220, 867,
	225, 867,
	226, 867,
	227, 867,
	228, 867,
	229, 867,
	231, 867,
	232, 867,
	234, 867,
	235, 867,
	236, 867,
	239, 867,
	240, 867,
	242, 867,
	244, 867,
	245, 867,
	246, 867,
	247, 867,
	248, 867,
	249, 867,
	250, 867,
	251, 867,
	253, 867,
	254, 867,
	255, 867,
	256, 867,
	257, 867,
	259, 867,
	260, 867,
	261, 867,
	262, 867,
	263, 867,
	264, 867,
	265, 867,
	266, 867,
	268, 867,
	269, 867,
	270, 867,
	271, 867,
	272, 867,
	274, 867,
	275, 867,
	276, 867,
	277, 867,
	278, 867,
	279, 867,
	280, 867,
	282, 867,
	284, 867,
	285, 867,
	286, 867,
	287, 867,
	288, 867,
	289, 867,
	291, 867,
	292, 867,
	293, 867,
	294, 867,
	295, 867,
	296, 867,
	297, 867,
	299, 867,
	300, 867,
	301, 867,
	302, 867,
	303, 867,
	304, 867,
	305, 867,
	306, 867,
	307, 867,
	309, 867,
	310, 867,
	311, 867,
	312, 867,
	314, 867,
	315, 867,
	316, 867,
	317, 867,
	319, 867,
	320, 867,
	321, 867,
	322, 867,
	323, 867,
	324, 867,
	325, 867,
	326, 867,
	327, 867,
	329, 867,
	330, 867,
	332, 867,
	333, 867,
	335, 867,
	336, 867,
	337, 867,
	338, 867,
	339, 867,
	340, 867,
	341, 867,
	342, 867,
	343, 867,
	344, 867,
	346, 867,
	347, 867,
	348, 867,
	351, 867,
	352, 867,
	353, 867,
	354, 867,
	356, 867,
	357, 867,
	358, 867,
	359, 867,
	362, 867,
	363, 867,
	364, 867,
	365, 867,
	367, 867,
	369, 867,
	370, 867,
	371, 867,
	372, 867,
	373, 867,
	374, 867,
	377, 867,
	378, 867,
	383, 867,
	384, 867,
	385, 867,
	386, 867,
	387, 867,
	388, 867,
	-2, 0,
	-1, 132,
	112, 838,
	124, 838,
	175, 838,
	201, 838,
	230, 838,
	238, 838,
	360, 838,
	-2, 831,
	-1, 137,
	1, 761,
	181, 761,
	259, 761,
	263, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 139,
	1, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 140,
	1, 761,
	414, 761,
	415, 761,
	-2, 0,
	-1, 141,
	1, 765,
	414, 765,
	415, 765,
	-2, 0,
	-1, 167,
	4, 874,
	5, 874,
	6, 874,
	7, 874,
	8, 874,
	9, 874,
	20, 874,
	21, 874,
	22, 874,
	23, 874,
	25, 874,
	30, 874,
	31, 874,
	35, 874,
	36, 874,
	37, 874,
	38, 874,
	39, 874,
	40, 874,
	41, 874,
	42, 874,
	43, 874,
	44, 874,
	46, 874,
	47, 874,
	48, 874,
	49, 874,
	50, 874,
	51, 874,
	52, 874,
	53, 874,
	54, 874,
	55, 874,
	56, 874,
	58, 874,
	59, 874,
	61, 874,
	63, 874,
	64, 874,
	65, 874,
	66, 874,
	67, 874,
	69, 874,
	70, 874,
	71, 874,
	72, 874,
	74, 874,
	76, 874,
	77, 874,
	79, 874,
	80, 874,
	81, 874,
	82, 874,
	83, 874,
	84, 874,
	85, 874,
	86, 874,
	88, 874,
	89, 874,
	90, 874,
	91, 874,
	92, 874,
	93, 874,
	94, 874,
	95, 874,
	96, 874,
	97, 874,
	98, 874,
	99, 874,
	101, 874,
	103, 874,
	106, 874,
	107, 874,
	109, 874,
	113, 874,
	114, 874,
	115, 874,
	116, 874,
	117, 874,
	118, 874,
	119, 874,
	120, 874,
	121, 874,
	122, 874,
	123, 874,
	129, 874,
	130, 874,
	131, 874,
	132, 874,
	133, 874,
	135, 874,
	137, 874,
	140, 874,
	141, 874,
	143, 874,
	144, 874,
	146, 874,
	148, 874,
	149, 874,
	150, 874,
	151, 874,
	152, 874,
	153, 874,
	154, 874,
	155, 874,
	156, 874,
	158, 874,
	162, 874,
	164, 874,
	166, 874,
	167, 874,
	168, 874,
	169, 874,
	170, 874,
	171, 874,
	172, 874,
	173, 874,
	174, 874,
	176, 874,
	178, 874,
	179, 874,
	180, 874,
	181, 874,
	182, 874,
	183, 874,
	184, 874,
	185, 874,
	186, 874,
	189, 874,
	190, 874,
	191, 874,
	193, 874,
	194, 874,
	196, 874,
	197, 874,
	198, 874,
	199, 874,
	200, 874,
	202, 874,
	203, 874,
	206, 874,
	208, 874,
	209, 874,
	210, 874,
	211, 874,
	212, 874,
	213, 874,
	214, 874,
	215, 874,
	216, 874,
	217, 874,
	218, 874,
	219, 874,
	220, 874,
	221, 874,
	223, 874,
	224, 874,
	225, 874,
	226, 874,
	227, 874,
	228, 874,
	229, 874,
	231, 874,
	232, 874,
	235, 874,
	236, 874,
	239, 874,
	240, 874,
	241, 874,
	242, 874,
	243, 874,
	244, 874,
	245, 874,
	246, 874,
	247, 874,
	248, 874,
	249, 874,
	250, 874,
	251, 874,
	253, 874,
	254, 874,
	255, 874,
	256, 874,
	257, 874,
	259, 874,
	260, 874,
	261, 874,
	262, 874,
	263, 874,
	264, 874,
	265, 874,
	266, 874,
	268, 874,
	269, 874,
	270, 874,
	271, 874,
	272, 874,
	274, 874,
	275, 874,
	276, 874,
	277, 874,
	278, 874,
	279, 874,
	280, 874,
	282, 874,
	283, 874,
	284, 874,
	285, 874,
	286, 874,
	287, 874,
	288, 874,
	289, 874,
	291, 874,
	292, 874,
	293, 874,
	294, 874,
	295, 874,
	296, 874,
	297, 874,
	299, 874,
	300, 874,
	301, 874,
	302, 874,
	303, 874,
	304, 874,
	305, 874,
	306, 874,
	307, 874,
	308, 874,
	309, 874,
	310, 874,
	311, 874,
	312, 874,
	313, 874,
	314, 874,
	315, 874,
	316, 874,
	317, 874,
	319, 874,
	320, 874,
	321, 874,
	322, 874,
	323, 874,
	324, 874,
	325, 874,
	326, 874,
	327, 874,
	329, 874,
	330, 874,
	332, 874,
	333, 874,
	335, 874,
	336, 874,
	337, 874,
	338, 874,
	339, 874,
	340, 874,
	341, 874,
	342, 874,
	343, 874,
	344, 874,
	346, 874,
	347, 874,
	348, 874,
	351, 874,
	352, 874,
	353, 874,
	354, 874,
	355, 874,
	356, 874,
	357, 874,
	358, 874,
	359, 874,
	362, 874,
	363, 874,
	364, 874,
	365, 874,
	366, 874,
	367, 874,
	369, 874,
	370, 874,
	371, 874,
	372, 874,
	373, 874,
	374, 874,
	377, 874,
	378, 874,
	383, 874,
	384, 874,
	385, 874,
	386, 874,
	387, 874,
	388, 874,
	389, 874,
	397, 874,
	402, 874,
	403, 874,
	404, 874,
	411, 874,
	417, 874,
	-2, 0,
	-1, 170,
	1, 55,
	415, 55,
	-2, 865,
	-1, 202,
	413, 1432,
	416, 1432,
	-2, 564,
	-1, 203,
	413, 1434,
	416, 1434,
	-2, 565,
	-1, 204,
	413, 1433,
	416, 1433,
	-2, 566,
	-1, 205,
	416, 1374,
	-2, 567,
	-1, 592,
	139, 1529,
	349, 1529,
	394, 1529,
	413, 1529,
	-2, 0,
	-1, 593,
	139, 1466,
	349, 1466,
	394, 1466,
	413, 1466,
	-2, 0,
	-1, 595,
	139, 1597,
	349, 1597,
	394, 1597,
	413, 1597,
	-2, 0,
	-1, 597,
	139, 1622,
	349, 1622,
	394, 1622,
	413, 1622,
	-2, 0,
	-1, 604,
	139, 1534,
	349, 1534,
	394, 1534,
	413, 1534,
	-2, 396,
	-1, 639,
	1, 493,
	410, 493,
	412, 493,
	414, 493,
	415, 493,
	-2, 0,
	-1, 640,
	1, 563,
	136, 563,
	410, 563,
	412, 563,
	414, 563,
	415, 563,
	-2, 0,
	-1, 646,
	1, 507,
	410, 507,
	412, 507,
	414, 507,
	415, 507,
	-2, 0,
	-1, 648,
	1, 511,
	410, 511,
	412, 511,
	414, 511,
	415, 511,
	-2, 0,
	-1, 651,
	1, 522,
	410, 522,
	412, 522,
	414, 522,
	415, 522,
	-2, 0,
	-1, 652,
	1, 528,
	410, 528,
	412, 528,
	414, 528,
	415, 528,
	-2, 0,
	-1, 653,
	1, 531,
	410, 531,
	412, 531,
	414, 531,
	415, 531,
	-2, 0,
	-1, 657,
	1, 545,
	410, 545,
	412, 545,
	414, 545,
	415, 545,
	-2, 0,
	-1, 658,
	1, 547,
	410, 547,
	412, 547,
	414, 547,
	415, 547,
	-2, 0,
	-1, 686,
	124, 876,
	201, 876,
	230, 876,
	-2, 834,
	-1, 694,
	124, 875,
	201, 875,
	230, 875,
	-2, 832,
	-1, 721,
	411, 1716,
	-2, 1153,
	-1, 722,
	411, 1717,
	-2, 1154,
	-1, 753,
	411, 1426,
	-2, 1417,
	-1, 754,
	5, 1011,
	411, 1441,
	-2, 1432,
	-1, 755,
	411, 1442,
	-2, 1433,
	-1, 762,
	5, 995,
	-2, 1461,
	-1, 763,
	5, 996,
	-2, 1649,
	-1, 764,
	5, 997,
	-2, 1648,
	-1, 765,
	5, 998,
	-2, 1619,
	-1, 766,
	5, 999,
	-2, 1678,
	-1, 767,
	5, 1000,
	-2, 1687,
	-1, 768,
	5, 1001,
	-2, 1688,
	-1, 769,
	5, 1002,
	-2, 1689,
	-1, 770,
	5, 1003,
	-2, 1690,
	-1, 771,
	5, 1004,
	-2, 1692,
	-1, 772,
	5, 1005,
	-2, 1700,
	-1, 773,
	5, 1006,
	-2, 1667,
	-1, 774,
	5, 1007,
	-2, 1644,
	-1, 775,
	5, 1008,
	-2, 1543,
	-1, 776,
	5, 1009,
	-2, 1544,
	-1, 777,
	5, 1010,
	-2, 1515,
	-1, 778,
	5, 1057,
	411, 1057,
	-2, 1674,
	-1, 796,
	5, 1022,
	-2, 1643,
	-1, 797,
	5, 1049,
	-2, 1645,
	-1, 798,
	5, 1032,
	-2, 1646,
	-1, 799,
	5, 1031,
	-2, 1647,
	-1, 800,
	5, 1049,
	-2, 1650,
	-1, 801,
	5, 1049,
	-2, 1651,
	-1, 802,
	5, 1050,
	-2, 1654,
	-1, 803,
	5, 1014,
	-2, 1655,
	-1, 804,
	5, 1014,
	-2, 1656,
	-1, 807,
	5, 1039,
	-2, 1660,
	-1, 808,
	5, 1024,
	-2, 1661,
	-1, 809,
	5, 1025,
	-2, 1662,
	-1, 811,
	5, 1015,
	-2, 1668,
	-1, 812,
	5, 1016,
	-2, 1669,
	-1, 813,
	5, 1017,
	-2, 1670,
	-1, 814,
	5, 1018,
	-2, 1671,
	-1, 815,
	5, 1019,
	-2, 1672,
	-1, 816,
	5, 1020,
	-2, 1673,
	-1, 817,
	5, 983,
	-2, 1675,
	-1, 818,
	5, 984,
	-2, 1676,
	-1, 820,
	5, 1014,
	-2, 1680,
	-1, 823,
	5, 1023,
	-2, 1685,
	-1, 824,
	5, 1021,
	-2, 1691,
	-1, 825,
	5, 1047,
	-2, 1693,
	-1, 827,
	5, 1051,
	-2, 1695,
	-1, 828,
	5, 1053,
	-2, 1696,
	-1, 829,
	5, 1055,
	-2, 1697,
	-1, 832,
	5, 1046,
	-2, 1702,
	-1, 901,
	411, 1441,
	-2, 1432,
	-1, 918,
	274, 1414,
	404, 1414,
	-2, 1413,
	-1, 1055,
	249, 863,
	-2, 689,
	-1, 1064,
	233, 1436,
	-2, 0,
	-1, 1107,
	1, 263,
	410, 263,
	412, 263,
	414, 263,
	415, 263,
	-2, 837,
	-1, 1110,
	4, 1701,
	10, 1701,
	11, 1701,
	13, 1701,
	14, 1701,
	15, 1701,
	16, 1701,
	17, 1701,
	18, 1701,
	20, 1701,
	21, 1701,
	22, 1701,
	23, 1701,
	25, 1701,
	28, 1701,
	30, 1701,
	32, 1701,
	35, 1701,
	36, 1701,
	37, 1701,
	38, 1701,
	39, 1701,
	40, 1701,
	41, 1701,
	42, 1701,
	43, 1701,
	44, 1701,
	46, 1701,
	47, 1701,
	48, 1701,
	49, 1701,
	50, 1701,
	51, 1701,
	54, 1701,
	55, 1701,
	56, 1701,
	58, 1701,
	59, 1701,
	60, 1701,
	63, 1701,
	64, 1701,
	65, 1701,
	66, 1701,
	67, 1701,
	68, 1701,
	69, 1701,
	70, 1701,
	71, 1701,
	72, 1701,
	74, 1701,
	75, 1701,
	76, 1701,
	77, 1701,
	79, 1701,
	80, 1701,
	81, 1701,
	82, 1701,
	90, 1701,
	91, 1701,
	92, 1701,
	93, 1701,
	94, 1701,
	95, 1701,
	96, 1701,
	97, 1701,
	99, 1701,
	101, 1701,
	103, 1701,
	106, 1701,
	107, 1701,
	109, 1701,
	113, 1701,
	114, 1701,
	115, 1701,
	116, 1701,
	117, 1701,
	118, 1701,
	119, 1701,
	120, 1701,
	121, 1701,
	125, 1701,
	126, 1701,
	127, 1701,
	128, 1701,
	129, 1701,
	130, 1701,
	131, 1701,
	132, 1701,
	133, 1701,
	134, 1701,
	135, 1701,
	137, 1701,
	140, 1701,
	141, 1701,
	143, 1701,
	144, 1701,
	146, 1701,
	148, 1701,
	149, 1701,
	150, 1701,
	151, 1701,
	152, 1701,
	153, 1701,
	154, 1701,
	155, 1701,
	156, 1701,
	157, 1701,
	158, 1701,
	159, 1701,
	160, 1701,
	161, 1701,
	162, 1701,
	164, 1701,
	166, 1701,
	167, 1701,
	168, 1701,
	169, 1701,
	170, 1701,
	171, 1701,
	172, 1701,
	173, 1701,
	174, 1701,
	176, 1701,
	178, 1701,
	179, 1701,
	180, 1701,
	181, 1701,
	182, 1701,
	183, 1701,
	184, 1701,
	185, 1701,
	186, 1701,
	187, 1701,
	188, 1701,
	189, 1701,
	190, 1701,
	191, 1701,
	193, 1701,
	194, 1701,
	196, 1701,
	197, 1701,
	198, 1701,
	199, 1701,
	200, 1701,
	202, 1701,
	203, 1701,
	206, 1701,
	207, 1701,
	208, 1701,
	211, 1701,
	212, 1701,
	213, 1701,
	214, 1701,
	215, 1701,
	216, 1701,
	217, 1701,
	218, 1701,
	219, 1701,
	220, 1701,
	223, 1701,
	225, 1701,
	226, 1701,
	227, 1701,
	228, 1701,
	229, 1701,
	231, 1701,
	232, 1701,
	235, 1701,
	236, 1701,
	237, 1701,
	239, 1701,
	240, 1701,
	242, 1701,
	244, 1701,
	245, 1701,
	246, 1701,
	247, 1701,
	248, 1701,
	249, 1701,
	250, 1701,
	251, 1701,
	253, 1701,
	254, 1701,
	255, 1701,
	256, 1701,
	257, 1701,
	259, 1701,
	260, 1701,
	261, 1701,
	262, 1701,
	263, 1701,
	264, 1701,
	265, 1701,
	266, 1701,
	268, 1701,
	269, 1701,
	270, 1701,
	271, 1701,
	272, 1701,
	273, 1701,
	274, 1701,
	275, 1701,
	276, 1701,
	277, 1701,
	278, 1701,
	279, 1701,
	280, 1701,
	282, 1701,
	283, 1701,
	284, 1701,
	285, 1701,
	286, 1701,
	287, 1701,
	288, 1701,
	289, 1701,
	290, 1701,
	291, 1701,
	292, 1701,
	293, 1701,
	294, 1701,
	295, 1701,
	296, 1701,
	297, 1701,
	299, 1701,
	300, 1701,
	301, 1701,
	302, 1701,
	303, 1701,
	304, 1701,
	305, 1701,
	306, 1701,
	307, 1701,
	309, 1701,
	310, 1701,
	311, 1701,
	312, 1701,
	313, 1701,
	314, 1701,
	315, 1701,
	316, 1701,
	317, 1701,
	319, 1701,
	320, 1701,
	321, 1701,
	322, 1701,
	323, 1701,
	324, 1701,
	325, 1701,
	326, 1701,
	327, 1701,
	329, 1701,
	330, 1701,
	332, 1701,
	333, 1701,
	335, 1701,
	336, 1701,
	337, 1701,
	338, 1701,
	339, 1701,
	340, 1701,
	341, 1701,
	342, 1701,
	343, 1701,
	344, 1701,
	346, 1701,
	347, 1701,
	348, 1701,
	351, 1701,
	352, 1701,
	353, 1701,
	354, 1701,
	356, 1701,
	357, 1701,
	358, 1701,
	359, 1701,
	362, 1701,
	363, 1701,
	364, 1701,
	365, 1701,
	367, 1701,
	369, 1701,
	370, 1701,
	371, 1701,
	372, 1701,
	373, 1701,
	374, 1701,
	377, 1701,
	378, 1701,
	383, 1701,
	384, 1701,
	385, 1701,
	386, 1701,
	387, 1701,
	388, 1701,
	389, 1701,
	390, 1701,
	392, 1701,
	393, 1701,
	394, 1701,
	395, 1701,
	396, 1701,
	397, 1701,
	399, 1701,
	400, 1701,
	401, 1701,
	402, 1701,
	403, 1701,
	404, 1701,
	405, 1701,
	406, 1701,
	407, 1701,
	409, 1701,
	412, 1701,
	413, 1701,
	416, 1701,
	417, 1701,
	-2, 0,
	-1, 1128,
	139, 1597,
	349, 1597,
	394, 1597,
	413, 1597,
	-2, 0,
	-1, 1153,
	139, 1622,
	349, 1622,
	394, 1622,
	413, 1622,
	-2, 0,
	-1, 1154,
	181, 773,
	259, 773,
	263, 773,
	-2, 383,
	-1, 1230,
	124, 875,
	201, 875,
	230, 875,
	-2, 835,
	-1, 1314,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 1194,
	-1, 1360,
	412, 1309,
	-2, 0,
	-1, 1367,
	181, 773,
	259, 773,
	263, 773,
	-2, 768,
	-1, 1396,
	412, 1309,
	-2, 0,
	-1, 1404,
	112, 839,
	124, 839,
	175, 839,
	201, 839,
	230, 839,
	238, 839,
	360, 839,
	-2, 942,
	-1, 1597,
	181, 773,
	259, 773,
	263, 773,
	-2, 385,
	-1, 1704,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1092,
	-1, 1705,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1093,
	-1, 1706,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1094,
	-1, 1707,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1095,
	-1, 1708,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1096,
	-1, 1709,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1097,
	-1, 1710,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1098,
	-1, 1711,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1099,
	-1, 1723,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1111,
	-1, 1724,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1112,
	-1, 1725,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	392, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	-2, 1113,
	-1, 1728,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1118,
	-1, 1734,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1120,
	-1, 1736,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1124,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1125,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1126,
	-1, 1739,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1127,
	-1, 1815,
	5, 1011,
	139, 1320,
	411, 1441,
	-2, 1432,
	-1, 1816,
	139, 1321,
	-2, 1639,
	-1, 1817,
	139, 1322,
	-2, 1533,
	-1, 1818,
	139, 1323,
	-2, 1486,
	-1, 1819,
	139, 1324,
	-2, 1509,
	-1, 1820,
	139, 1325,
	-2, 1532,
	-1, 1821,
	139, 1326,
	-2, 1593,
	-1, 1889,
	412, 1309,
	-2, 0,
	-1, 1899,
	1, 943,
	79, 943,
	112, 943,
	124, 943,
	140, 943,
	145, 943,
	147, 943,
	166, 943,
	175, 943,
	184, 943,
	197, 943,
	201, 943,
	216, 943,
	230, 943,
	233, 943,
	238, 943,
	281, 943,
	283, 943,
	360, 943,
	368, 943,
	380, 943,
	381, 943,
	391, 943,
	410, 943,
	412, 943,
	414, 943,
	415, 943,
	416, 943,
	-2, 942,
	-1, 1901,
	411, 1418,
	-2, 1430,
	-1, 1978,
	412, 1379,
	416, 1379,
	-2, 1406,
	-1, 2097,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1119,
	-1, 2098,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1121,
	-1, 2103,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1122,
	-1, 2121,
	243, 1280,
	-2, 1282,
	-1, 2328,
	249, 863,
	-2, 689,
	-1, 2391,
	181, 773,
	259, 773,
	263, 773,
	-2, 382,
	-1, 2405,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1123,
	-1, 2410,
	179, 0,
	180, 0,
	223, 0,
	-2, 1141,
	-1, 2419,
	243, 1281,
	-2, 1283,
	-1, 2468,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1171,
	-1, 2469,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1172,
	-1, 2470,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1173,
	-1, 2474,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1177,
	-1, 2475,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1178,
	-1, 2476,
	13, 0,
	14, 0,
	15, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1179,
	-1, 2517,
	411, 1419,
	-2, 1431,
	-1, 2629,
	179, 0,
	180, 0,
	223, 0,
	-2, 1142,
	-1, 2632,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1145,
	-1, 2633,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1147,
	-1, 2777,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1146,
	-1, 2778,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1148,
	-1, 2788,
	179, 0,
	-2, 1180,
	-1, 2877,
	179, 0,
	-2, 1181,
	-1, 2975,
	38, 0,
	156, 0,
	200, 0,
	313, 0,
	389, 0,
	397, 0,
	-2, 1642,
}

const sqlPrivate = 57344

const sqlLast = 55683

var sqlAct = [...]int{

	755, 1765, 2731, 2566, 2974, 2817, 2983, 2003, 3037, 2950,
	2951, 2953, 2984, 2937, 2985, 2048, 2881, 2806, 2440, 2745,
	2255, 2011, 1040, 2526, 2973, 1691, 2583, 2578, 1097, 2768,
	2091, 1233, 922, 1026, 2588, 729, 2342, 2701, 747, 2686,
	204, 752, 2793, 1751, 475, 2527, 2335, 2377, 2375, 2347,
	2000, 475, 1976, 2238, 544, 27, 2197, 1893, 475, 1528,
	475, 1394, 2604, 475, 204, 470, 475, 475, 2337, 1093,
	2664, 937, 2012, 475, 1061, 1375, 2214, 915, 1481, 1980,
	931, 475, 1407, 1480, 1502, 1403, 1477, 1913, 1486, 1432,
	1894, 2225, 1979, 2493, 1318, 1965, 1489, 2133, 2196, 1321,
	1763, 703, 126, 2882, 1677, 753, 523, 1682, 2087, 2528,
	1367, 1529, 1883, 2346, 1904, 2312, 1622, 1772, 1478, 520,
	1448, 1454, 738, 1940, 1414, 1376, 1412, 1748, 1966, 1156,
	1784, 1790, 887, 751, 1346, 1348, 1764, 1939, 556, 924,
	1886, 1977, 1108, 1080, 2005, 1983, 1875, 205, 206, 1090,
	1852, 2732, 472, 892, 1860, 1385, 869, 1811, 70, 582,
	126, 1309, 475, 475, 695, 719, 602, 794, 1232, 1234,
	1896, 1621, 746, 596, 559, 471, 132, 1496, 133, 200,
	1030, 1424, 1077, 1366, 867, 631, 2120, 2509, 1504, 1238,
	2510, 2004, 460, 475, 475, 475, 927, 475, 475, 940,
	940, 1504, 2050, 1504, 575, 1395, 3064, 699, 475, 475,
	1869, 1967, 699, 2403, 2381, 463, 460, 2167, 2168, 3058,
	1457, 2354, 3057, 1869, 1467, 27, 1869, 2353, 517, 1967,
	3034, 694, 2325, 568, 2700, 1869, 1516, 3031, 3009, 463,
	3003, 1463, 2700, 570, 1869, 3002, 2999, 2996, 1862, 1869,
	3000, 2997, 884, 709, 2496, 2993, 1139, 1249, 1250, 1463,
	918, 2971, 2970, 2933, 2969, 1463, 1463, 934, 1516, 2968,
	2866, 1516, 126, 1516, 1100, 896, 2932, 2919, 1463, 2496,
	2040, 1463, 1252, 551, 2912, 2910, 2908, 2879, 2700, 2700,
	2700, 2040, 2865, 700, 39, 2853, 2612, 2848, 2846, 2700,
	2836, 1463, 2700, 687, 1463, 686, 713, 1251, 42, 2835,
	2828, 2827, 2799, 1463, 1463, 2700, 1463, 2032, 2779, 2726,
	2722, 704, 2040, 1869, 1869, 908, 912, 917, 1861, 1130,
	2699, 2631, 870, 870, 2700, 2040, 550, 890, 2602, 938,
	1027, 2173, 2595, 1600, 2594, 2505, 2499, 871, 2595, 2506,
	1869, 1463, 2612, 2414, 2366, 1032, 1031, 1869, 2317, 2211,
	460, 1955, 2162, 1869, 2161, 552, 1869, 2155, 1869, 744,
	2154, 2156, 57, 554, 1869, 2059, 2124, 58, 1902, 1869,
	2039, 1257, 2125, 463, 2040, 1869, 873, 2028, 874, 1972,
	2132, 1869, 2036, 1463, 1868, 1520, 1131, 2481, 1869, 1521,
	2167, 2168, 2416, 39, 1787, 2317, 1279, 1280, 1281, 60,
	2090, 2070, 1462, 1371, 2183, 1767, 1505, 42, 2167, 2168,
	1029, 2185, 2186, 2187, 170, 2355, 1127, 1126, 167, 1505,
	1125, 1505, 1124, 1033, 1123, 1122, 2628, 1121, 2167, 2168,
	1120, 2185, 2186, 2187, 2356, 2037, 1119, 1118, 1117, 1116,
	1249, 1250, 1115, 1619, 1272, 1114, 2627, 1113, 1112, 1788,
	1111, 875, 872, 2008, 169, 693, 692, 691, 690, 689,
	920, 685, 684, 683, 2038, 1252, 2182, 682, 2167, 2168,
	681, 680, 554, 679, 475, 475, 475, 927, 927, 475,
	678, 1131, 475, 677, 676, 475, 2182, 2184, 2353, 675,
	1251, 475, 671, 168, 670, 669, 629, 2679, 61, 1463,
	628, 475, 475, 475, 475, 475, 927, 927, 60, 627,
	1789, 1786, 626, 927, 2173, 1861, 625, 624, 623, 702,
	622, 1803, 621, 1131, 620, 135, 63, 1273, 64, 888,
	619, 134, 2173, 618, 1892, 1101, 617, 616, 1249, 1250,
	615, 1054, 614, 1512, 475, 613, 167, 612, 611, 610,
	609, 608, 2173, 1051, 2396, 475, 1503, 553, 1661, 607,
	107, 606, 1066, 1252, 1257, 591, 1249, 1250, 590, 1282,
	1283, 1284, 1292, 1293, 1294, 475, 834, 2188, 589, 588,
	587, 586, 169, 508, 1285, 1094, 475, 2183, 1251, 507,
	481, 1252, 2173, 167, 1298, 480, 1791, 2188, 2177, 2169,
	2170, 2171, 2172, 2174, 2175, 2183, 479, 61, 465, 2167,
	2168, 2638, 2185, 2186, 2187, 464, 1251, 190, 189, 188,
	187, 168, 186, 1079, 1271, 2183, 927, 2413, 185, 169,
	161, 1268, 184, 183, 135, 63, 182, 64, 162, 1253,
	1254, 1255, 1256, 1258, 1259, 1084, 1087, 181, 180, 179,
	178, 2596, 1109, 167, 177, 167, 176, 175, 174, 134,
	173, 172, 1257, 475, 171, 2183, 553, 2182, 168, 107,
	2184, 700, 2514, 2251, 1319, 2130, 2079, 161, 1973, 1970,
	1402, 1274, 1275, 1276, 1277, 162, 1785, 1625, 2184, 169,
	1257, 169, 2167, 2168, 1801, 1799, 1411, 1797, 1154, 1325,
	1170, 1042, 1245, 2990, 2167, 2168, 134, 1164, 2184, 1035,
	2045, 1168, 1289, 1299, 2972, 1279, 1280, 1281, 2955, 1316,
	2944, 2873, 2869, 2849, 2867, 2762, 2753, 2816, 168, 2663,
	168, 2662, 2661, 2173, 2654, 1295, 1296, 161, 2650, 161,
	2649, 2648, 2644, 1266, 1267, 162, 2643, 162, 2184, 2642,
	2641, 1055, 1058, 2634, 2611, 2609, 1287, 2513, 2490, 1151,
	2489, 2488, 2426, 1272, 2320, 2316, 2007, 883, 134, 1759,
	2250, 2241, 2207, 2195, 1230, 2166, 2163, 2160, 2188, 1297,
	2176, 2177, 2169, 2170, 2171, 2172, 2174, 2175, 2159, 2157,
	2179, 2180, 2181, 1286, 2138, 1229, 2137, 2178, 2176, 2177,
	2169, 2170, 2171, 2172, 2174, 2175, 2183, 2121, 1171, 1899,
	2179, 2180, 2181, 1245, 1525, 167, 2173, 2178, 2176, 2177,
	2169, 2170, 2171, 2172, 2174, 2175, 1329, 1244, 2173, 1278,
	1249, 1250, 1253, 1254, 1255, 1256, 1258, 1259, 1620, 1941,
	1322, 1231, 1312, 3062, 3045, 3044, 1273, 2086, 1041, 2442,
	2963, 169, 2958, 2914, 475, 1252, 2905, 2904, 2900, 475,
	2169, 2170, 2171, 2172, 2174, 2175, 1249, 1250, 2899, 1290,
	687, 2893, 686, 2890, 1382, 2864, 700, 1241, 1242, 2863,
	1251, 1246, 1753, 1373, 2812, 2790, 475, 2740, 2736, 2184,
	168, 1252, 1760, 2734, 2721, 2705, 2659, 2613, 2581, 161,
	1177, 2573, 2572, 2570, 2752, 2547, 2546, 162, 2536, 2535,
	2501, 2409, 2372, 2301, 2370, 2285, 1251, 2265, 2264, 2210,
	2194, 2147, 1344, 2146, 2143, 2117, 1347, 2112, 134, 1349,
	1350, 1802, 1255, 1256, 1258, 1259, 1354, 2047, 1889, 1408,
	1880, 1867, 1795, 1379, 1380, 1288, 1357, 1473, 1263, 1264,
	1270, 1269, 1265, 1291, 1257, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 1336, 1335, 1401, 1227, 1334, 1333,
	1396, 1392, 2651, 1374, 1365, 1364, 1360, 1359, 126, 1279,
	1280, 1281, 1358, 1356, 1355, 896, 745, 1352, 1351, 896,
	1257, 2179, 2180, 2181, 1342, 1341, 1393, 1340, 2178, 2176,
	2177, 2169, 2170, 2171, 2172, 2174, 2175, 1339, 1338, 1337,
	2042, 1326, 2265, 1370, 1313, 1279, 1280, 1281, 1312, 927,
	475, 1249, 1250, 1150, 1431, 1135, 940, 1272, 1368, 870,
	1105, 2884, 475, 940, 475, 475, 2761, 1405, 2636, 2608,
	2508, 2504, 700, 1372, 2123, 1881, 1252, 1398, 2167, 2168,
	1420, 890, 1322, 2368, 1310, 475, 475, 1167, 2058, 1474,
	1425, 1967, 475, 1272, 475, 2338, 475, 2758, 2615, 2614,
	475, 1251, 2511, 1834, 1485, 1402, 1455, 1619, 1145, 2231,
	1361, 1619, 1606, 2545, 2169, 2170, 2171, 2172, 2174, 2175,
	1362, 2842, 2305, 1619, 1331, 2300, 1363, 1519, 2171, 2172,
	2174, 2175, 2296, 2057, 1800, 1798, 1450, 1796, 2284, 2870,
	1273, 2868, 2202, 2050, 2201, 2200, 2096, 1593, 1163, 475,
	204, 475, 475, 865, 1482, 2383, 2295, 927, 1444, 204,
	475, 2794, 1943, 475, 475, 1493, 2815, 2004, 2444, 475,
	1472, 2991, 1595, 2128, 1491, 1773, 1273, 1526, 3001, 1345,
	2998, 1220, 2349, 2522, 2947, 1583, 866, 1470, 2579, 1507,
	2033, 940, 1509, 195, 1534, 1511, 1464, 1032, 1031, 1514,
	475, 3024, 460, 1468, 2918, 475, 882, 2060, 3025, 2713,
	204, 475, 1646, 475, 516, 475, 1218, 475, 487, 475,
	2393, 2992, 1615, 1206, 1079, 463, 3061, 2730, 1205, 475,
	1461, 475, 2841, 2840, 1610, 1609, 2838, 1619, 1616, 475,
	475, 475, 2837, 1587, 2560, 2555, 2554, 497, 2519, 1262,
	1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 1219, 861,
	859, 857, 1328, 855, 1607, 2518, 2142, 1426, 475, 852,
	1500, 1906, 940, 1498, 1495, 1415, 2141, 2140, 1416, 1397,
	2139, 2099, 2550, 888, 1597, 2031, 1664, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 1423, 1960, 515, 1165, 1954, 1950,
	486, 1931, 460, 1735, 1369, 1028, 1054, 1618, 1534, 1534,
	1847, 460, 1787, 498, 1653, 1846, 1427, 1428, 1655, 1845,
	1693, 2001, 1151, 1460, 1658, 463, 1524, 1141, 1613, 1522,
	673, 1626, 565, 1660, 463, 1594, 698, 2872, 1584, 1316,
	1906, 1964, 1166, 1750, 1659, 2917, 940, 2369, 1777, 1044,
	1627, 1905, 2565, 2819, 1750, 191, 1611, 1971, 1623, 580,
	1417, 2987, 460, 581, 1809, 1415, 1628, 1788, 1416, 2966,
	1924, 1419, 1499, 1814, 1814, 1523, 581, 1825, 1827, 1408,
	1832, 1683, 1690, 1226, 1585, 463, 1915, 1855, 1204, 1637,
	475, 1631, 475, 1791, 1248, 2344, 1859, 3016, 2538, 697,
	1757, 2292, 1149, 2929, 2345, 1755, 1554, 1180, 1201, 2088,
	2089, 2287, 1692, 2433, 1443, 3047, 940, 1142, 2043, 1429,
	1662, 1421, 475, 1663, 475, 2896, 2167, 2168, 1789, 1786,
	2930, 475, 940, 1614, 1681, 687, 475, 1673, 687, 687,
	1674, 1675, 1770, 475, 1773, 196, 2394, 2304, 1259, 1451,
	1417, 475, 2344, 2167, 2168, 1202, 2185, 2186, 2187, 1343,
	1217, 1419, 699, 475, 1810, 2556, 927, 1918, 2988, 1746,
	3024, 2412, 1144, 2436, 2434, 2175, 1504, 475, 940, 1768,
	1992, 1898, 1947, 475, 475, 1446, 1774, 1744, 661, 1872,
	1761, 700, 1534, 1758, 475, 1657, 700, 475, 1951, 1928,
	1882, 1421, 1620, 1941, 1890, 1891, 1620, 1941, 708, 500,
	499, 2182, 896, 2392, 1791, 1907, 197, 1844, 1620, 1941,
	475, 196, 475, 1421, 475, 1957, 2844, 475, 918, 475,
	1822, 475, 896, 475, 475, 2989, 475, 927, 927, 927,
	1948, 1933, 927, 2774, 2785, 1911, 1961, 475, 1857, 1856,
	2173, 1919, 1921, 1887, 1865, 1866, 1877, 1878, 2548, 1791,
	1791, 1645, 870, 1873, 1672, 1934, 2026, 2027, 1876, 1307,
	3040, 2006, 1901, 2006, 890, 1926, 662, 2173, 1740, 466,
	1405, 1910, 1421, 1932, 696, 700, 1741, 1917, 1933, 1742,
	1962, 1421, 197, 1747, 890, 1949, 1942, 1944, 1945, 1946,
	2539, 199, 2022, 1911, 1785, 2820, 863, 475, 1453, 862,
	853, 853, 506, 854, 2145, 198, 2024, 2282, 514, 853,
	1897, 1043, 2188, 2183, 1418, 699, 1452, 1903, 2603, 2015,
	1032, 1968, 1620, 1617, 501, 460, 3015, 2277, 2617, 1214,
	2101, 1140, 126, 3048, 1447, 1172, 940, 661, 475, 126,
	2183, 1749, 194, 1449, 2035, 475, 1911, 475, 463, 1143,
	2029, 2623, 674, 2010, 564, 1181, 1188, 708, 1160, 2986,
	2019, 2276, 2020, 3023, 2021, 1427, 1428, 199, 475, 475,
	475, 1109, 475, 2023, 2030, 2044, 1835, 192, 2034, 513,
	1916, 198, 2017, 1415, 1756, 3021, 1416, 2063, 2278, 663,
	1630, 475, 1247, 2053, 1505, 2054, 2184, 2046, 2385, 2065,
	1148, 2744, 1182, 2770, 1418, 1179, 2742, 1215, 2280, 195,
	1743, 1990, 1598, 1998, 1350, 1155, 1357, 1745, 194, 193,
	1996, 1476, 2049, 2184, 1347, 662, 1381, 3038, 1138, 2066,
	1952, 1129, 1553, 478, 1237, 2052, 1161, 1236, 2081, 2061,
	1162, 2064, 2775, 2309, 2830, 1459, 3014, 3053, 2279, 467,
	2829, 2313, 2657, 192, 2810, 126, 2697, 2887, 1605, 126,
	2521, 2261, 2709, 2257, 1999, 2115, 888, 1997, 1417, 2388,
	1384, 1216, 2118, 2076, 1494, 1484, 2071, 2078, 1483, 1419,
	2477, 2694, 664, 1479, 1475, 195, 888, 2102, 3039, 2712,
	2239, 2135, 2136, 2769, 1732, 193, 2711, 2432, 1935, 1669,
	516, 2025, 2085, 2938, 2083, 2178, 2176, 2177, 2169, 2170,
	2171, 2172, 2174, 2175, 1235, 511, 1603, 1650, 3041, 1236,
	665, 1601, 2695, 1388, 2746, 2179, 2180, 2181, 468, 2584,
	1604, 1388, 2178, 2176, 2177, 2169, 2170, 2171, 2172, 2174,
	2175, 2811, 2228, 1237, 2267, 2266, 1553, 1553, 663, 1391,
	512, 2193, 2094, 502, 2387, 1871, 1870, 1391, 1975, 1974,
	1076, 1855, 1855, 1855, 697, 2318, 2209, 1874, 2384, 2073,
	2100, 2074, 2240, 3052, 940, 1386, 2658, 1065, 2212, 2221,
	1389, 2771, 515, 2219, 2220, 2708, 1670, 1189, 1389, 1064,
	475, 1160, 510, 475, 1160, 1074, 1235, 2478, 2567, 2127,
	503, 475, 475, 940, 2479, 3028, 475, 1387, 2733, 1421,
	549, 35, 1730, 1733, 475, 475, 475, 1936, 1937, 2710,
	475, 2308, 700, 475, 2227, 548, 34, 573, 567, 2248,
	475, 475, 475, 475, 475, 1413, 504, 2808, 505, 3,
	2386, 664, 475, 2263, 2665, 2690, 2494, 1794, 2691, 475,
	2235, 2269, 2131, 2273, 2274, 2216, 1729, 851, 2244, 2245,
	1534, 475, 927, 2223, 2224, 475, 1390, 2229, 2809, 1161,
	2314, 940, 1161, 1162, 1390, 475, 1162, 2234, 896, 665,
	2230, 940, 2693, 2741, 940, 2233, 896, 896, 3030, 2236,
	896, 2696, 2283, 1224, 1211, 2249, 475, 2213, 475, 2258,
	475, 1209, 475, 927, 927, 927, 1199, 475, 700, 475,
	2204, 2205, 2206, 475, 2218, 2789, 2286, 2656, 475, 2564,
	475, 2299, 547, 31, 2254, 2198, 1054, 475, 1197, 1911,
	1553, 2408, 1418, 2262, 1195, 1075, 2242, 2252, 2293, 2268,
	890, 2271, 475, 2246, 927, 2297, 1193, 2158, 890, 890,
	546, 76, 890, 2323, 1472, 545, 75, 2351, 1191, 2226,
	2330, 475, 475, 2281, 1420, 1835, 1835, 1054, 2111, 1731,
	1073, 2288, 542, 22, 1185, 2374, 2247, 2291, 509, 2326,
	2051, 35, 1959, 2302, 2319, 2692, 1930, 2298, 1420, 1534,
	475, 2289, 2303, 2339, 2322, 2290, 34, 856, 858, 543,
	23, 2315, 1466, 1225, 2109, 475, 739, 572, 566, 1072,
	906, 1136, 2199, 2077, 2358, 2359, 2360, 1455, 2361, 2362,
	2055, 2311, 2107, 1455, 2311, 541, 29, 2348, 2982, 1647,
	1223, 1210, 1634, 1586, 540, 20, 2348, 1332, 1208, 1793,
	2357, 940, 1531, 1198, 2562, 1458, 461, 2935, 538, 19,
	473, 2683, 2373, 1835, 1835, 1835, 475, 493, 2543, 2541,
	2520, 1534, 2367, 2334, 519, 1196, 560, 2332, 514, 519,
	461, 1194, 560, 578, 2002, 1994, 700, 1993, 2340, 585,
	1991, 2391, 2411, 1192, 2389, 2390, 1989, 605, 1518, 126,
	2350, 1517, 1515, 31, 1513, 1190, 1510, 2395, 1534, 1534,
	539, 18, 1508, 2399, 1506, 2401, 1644, 2397, 528, 15,
	1456, 1184, 1445, 2104, 529, 16, 1534, 1534, 537, 55,
	2491, 76, 536, 54, 2105, 1174, 75, 1442, 2110, 1430,
	1422, 2417, 527, 53, 2421, 2420, 2294, 535, 12, 513,
	526, 48, 888, 22, 2336, 475, 1071, 1384, 2858, 3025,
	888, 888, 1534, 2760, 888, 2445, 1531, 1531, 2759, 2441,
	475, 2452, 940, 2483, 2415, 879, 2363, 2447, 519, 519,
	23, 1683, 2448, 2454, 533, 45, 902, 2327, 2328, 2329,
	2515, 2424, 2435, 2437, 2438, 2456, 2380, 880, 1624, 1683,
	2457, 534, 46, 525, 47, 2605, 29, 2553, 2860, 473,
	473, 473, 2507, 932, 473, 20, 2484, 1239, 1388, 2428,
	2429, 2430, 1923, 2559, 461, 1034, 2593, 2533, 2365, 19,
	2495, 2503, 126, 2497, 2498, 2487, 2500, 2492, 475, 475,
	2551, 475, 2092, 2563, 1391, 2728, 475, 2512, 532, 7,
	1643, 2482, 2557, 940, 896, 940, 2558, 1906, 927, 1963,
	2516, 2561, 1386, 531, 6, 2106, 2056, 2574, 1922, 1173,
	516, 2524, 2108, 1906, 475, 1389, 2542, 881, 2544, 1958,
	2597, 18, 530, 37, 1920, 511, 1953, 524, 36, 15,
	2586, 896, 2589, 1929, 1387, 16, 2898, 1240, 555, 55,
	2590, 1933, 475, 54, 2702, 940, 475, 475, 940, 475,
	896, 2093, 2517, 53, 1591, 1592, 890, 2549, 12, 2532,
	512, 48, 896, 1183, 940, 2585, 896, 1835, 1835, 2571,
	2568, 896, 2577, 2576, 2875, 2569, 2666, 1938, 2587, 1925,
	2591, 2621, 1249, 1250, 1249, 1250, 2598, 1911, 1243, 2606,
	1531, 2599, 515, 2625, 1956, 45, 1927, 2216, 2934, 2739,
	2009, 1390, 510, 475, 574, 2580, 1319, 2582, 1534, 1252,
	1995, 1988, 46, 1858, 47, 1596, 2618, 1527, 2622, 3036,
	896, 2364, 3051, 2015, 2167, 2168, 2619, 2610, 1176, 2630,
	1249, 1250, 1251, 1175, 1251, 2607, 1835, 1835, 1835, 1835,
	1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,
	1835, 1835, 1835, 1835, 1835, 2439, 1835, 2371, 1553, 7,
	2068, 2067, 475, 2068, 2069, 1824, 1783, 1213, 2639, 2431,
	1212, 2655, 940, 475, 6, 940, 2626, 1329, 1327, 475,
	475, 475, 890, 2756, 2601, 938, 1222, 1221, 1027, 1207,
	1203, 1200, 1186, 37, 1147, 1599, 864, 475, 36, 672,
	2681, 2818, 475, 659, 475, 2275, 1633, 475, 475, 475,
	475, 475, 1187, 1635, 2232, 475, 475, 927, 1879, 2706,
	2928, 940, 2645, 2673, 2715, 927, 2671, 2703, 2668, 2669,
	2676, 2720, 2144, 475, 475, 2880, 2784, 2533, 1792, 2667,
	473, 1050, 473, 1330, 51, 473, 927, 2529, 932, 732,
	2684, 1069, 2523, 2729, 2735, 1982, 475, 473, 888, 2677,
	2682, 2672, 896, 1981, 943, 2743, 2616, 473, 473, 473,
	473, 932, 2533, 475, 475, 927, 927, 1608, 2748, 756,
	1813, 1054, 1684, 2533, 2674, 2750, 2738, 1553, 2680, 2723,
	1911, 2773, 758, 2724, 1532, 2534, 761, 760, 2749, 940,
	759, 896, 1533, 1353, 757, 2755, 1530, 1106, 2013, 2754,
	605, 2714, 649, 2747, 2552, 2678, 1612, 2776, 1754, 2719,
	2763, 473, 2764, 1771, 890, 2126, 2552, 1323, 2796, 2532,
	2552, 724, 736, 2727, 735, 2552, 896, 1769, 475, 1134,
	940, 1146, 723, 1911, 475, 2237, 475, 896, 940, 475,
	2343, 2751, 605, 1668, 2084, 1665, 2540, 475, 1534, 1553,
	489, 2164, 1104, 940, 2532, 2348, 2804, 2826, 1841, 1833,
	1829, 2797, 2798, 2805, 1228, 2532, 1308, 2014, 1169, 2791,
	2352, 2041, 1676, 2839, 888, 878, 2670, 877, 2823, 876,
	2952, 2949, 2822, 2772, 2824, 2802, 1553, 1553, 1602, 2062,
	1301, 728, 2533, 475, 2217, 475, 2821, 2321, 927, 1048,
	1300, 860, 1534, 475, 1553, 1553, 2889, 2800, 2845, 1159,
	2847, 2707, 2757, 2803, 2851, 1158, 2843, 1157, 2260, 473,
	2801, 2716, 2717, 3046, 2897, 940, 2533, 2537, 2533, 2781,
	2856, 2946, 2533, 166, 163, 165, 164, 2307, 79, 2589,
	1553, 33, 2861, 1911, 2850, 475, 2857, 2737, 32, 2833,
	2834, 475, 2862, 106, 105, 2783, 896, 104, 2871, 475,
	103, 102, 101, 100, 491, 2855, 99, 98, 97, 96,
	2781, 2892, 95, 94, 93, 2832, 2886, 92, 1692, 1534,
	91, 2725, 2113, 2114, 2532, 90, 896, 89, 475, 475,
	896, 88, 896, 1692, 2885, 475, 896, 482, 87, 86,
	2878, 85, 2909, 2911, 84, 83, 927, 82, 2883, 2902,
	81, 475, 601, 2894, 927, 927, 888, 598, 2532, 475,
	2532, 475, 78, 475, 2532, 77, 30, 2931, 2906, 25,
	2913, 2920, 110, 111, 2916, 24, 74, 73, 2915, 2765,
	2766, 475, 2922, 2923, 475, 2941, 2924, 475, 2921, 940,
	490, 28, 17, 11, 21, 2534, 2956, 2957, 1531, 131,
	130, 2954, 129, 2959, 2961, 1027, 2960, 128, 2962, 127,
	2190, 2191, 2192, 14, 2948, 2943, 13, 2967, 125, 124,
	123, 122, 121, 120, 475, 10, 2965, 491, 2964, 8,
	2534, 109, 9, 2767, 1383, 2382, 67, 2901, 896, 2874,
	2980, 2534, 68, 2981, 26, 2979, 2533, 41, 40, 475,
	585, 108, 3005, 1835, 3006, 519, 3007, 475, 2994, 157,
	156, 155, 154, 150, 153, 151, 152, 2859, 149, 119,
	3013, 159, 158, 475, 3011, 3012, 1400, 3008, 3010, 2697,
	902, 2895, 473, 147, 144, 146, 1553, 148, 3022, 3020,
	3019, 145, 1835, 143, 2903, 2533, 487, 3027, 3026, 3032,
	3033, 2954, 3029, 160, 2694, 118, 117, 2687, 3035, 116,
	896, 485, 115, 490, 114, 551, 113, 5, 2, 1,
	2685, 0, 0, 3043, 3042, 2689, 39, 1531, 0, 1692,
	3049, 3050, 0, 0, 484, 0, 3054, 3055, 2532, 0,
	42, 0, 0, 3056, 0, 2695, 483, 0, 0, 3059,
	3060, 0, 0, 0, 3063, 0, 0, 3065, 0, 896,
	2534, 0, 0, 0, 0, 0, 2015, 0, 550, 0,
	2688, 711, 0, 492, 0, 0, 0, 0, 486, 0,
	0, 0, 0, 2925, 0, 2926, 1835, 2532, 488, 0,
	2552, 706, 0, 661, 2534, 0, 2534, 552, 0, 1531,
	2534, 0, 0, 0, 57, 554, 0, 0, 2942, 58,
	0, 0, 0, 708, 0, 0, 461, 0, 0, 487,
	0, 476, 0, 0, 0, 0, 0, 0, 1034, 0,
	473, 1471, 0, 0, 485, 0, 1531, 1531, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 707, 0, 0,
	0, 1490, 1490, 0, 1531, 1531, 0, 484, 473, 0,
	473, 203, 473, 0, 0, 0, 519, 0, 2690, 483,
	0, 2691, 0, 3004, 2406, 2407, 0, 0, 0, 0,
	1433, 662, 0, 0, 0, 203, 0, 1249, 1250, 0,
	1531, 0, 0, 0, 0, 0, 492, 1437, 0, 0,
	0, 486, 2552, 0, 0, 2693, 0, 0, 0, 0,
	0, 488, 1252, 0, 2696, 605, 461, 1034, 560, 0,
	0, 0, 0, 0, 0, 461, 1034, 0, 0, 932,
	473, 0, 0, 0, 0, 605, 1553, 1251, 1434, 0,
	61, 0, 0, 2458, 2459, 2460, 2461, 2462, 2463, 2464,
	2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474,
	2475, 2476, 0, 2480, 0, 0, 605, 135, 63, 0,
	64, 473, 0, 0, 2534, 0, 461, 473, 0, 473,
	0, 473, 0, 473, 0, 473, 894, 0, 167, 0,
	1553, 0, 2167, 2168, 0, 1648, 2075, 1649, 0, 553,
	1438, 0, 107, 0, 663, 473, 473, 473, 2692, 0,
	0, 1257, 0, 0, 0, 0, 0, 928, 0, 0,
	941, 941, 0, 2534, 169, 0, 0, 0, 0, 0,
	469, 0, 0, 0, 605, 0, 1279, 1280, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2182, 0, 0, 0, 0, 0, 0, 1439, 1440, 0,
	0, 0, 0, 168, 0, 0, 1435, 1553, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 705, 1531, 664, 0, 0,
	0, 134, 1036, 1038, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2173, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 665, 0, 0, 551, 0,
	0, 733, 71, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 0, 0, 0, 0, 585, 0, 519, 0,
	0, 0, 0, 42, 0, 0, 0, 1273, 0, 1441,
	0, 0, 0, 902, 0, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 936, 0, 0, 0, 519, 2183,
	519, 550, 0, 902, 0, 0, 0, 473, 0, 0,
	71, 1133, 1914, 0, 0, 0, 0, 1137, 0, 473,
	833, 0, 0, 0, 0, 0, 0, 473, 521, 0,
	552, 0, 0, 0, 0, 0, 0, 57, 554, 473,
	0, 0, 58, 0, 0, 711, 0, 0, 0, 711,
	0, 551, 0, 473, 0, 0, 0, 0, 0, 461,
	1969, 0, 39, 0, 0, 0, 0, 0, 0, 0,
	1978, 0, 0, 1034, 60, 0, 42, 0, 688, 0,
	0, 0, 2184, 0, 0, 0, 701, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 0, 1914, 0, 519, 0,
	473, 0, 0, 473, 550, 473, 0, 473, 0, 473,
	473, 0, 932, 0, 0, 0, 0, 0, 928, 928,
	0, 891, 71, 1914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 552, 0, 0, 0, 0, 0, 0,
	57, 554, 0, 0, 0, 58, 0, 928, 928, 0,
	0, 0, 0, 0, 928, 0, 1531, 0, 0, 1302,
	1303, 1304, 1305, 1306, 0, 0, 0, 0, 0, 0,
	0, 0, 1315, 61, 0, 0, 0, 60, 0, 0,
	0, 0, 1324, 560, 0, 0, 0, 0, 0, 0,
	0, 2178, 2176, 2177, 2169, 2170, 2171, 2172, 2174, 2175,
	135, 63, 0, 64, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 0, 0, 0, 929, 0, 0, 942,
	942, 167, 0, 0, 473, 0, 0, 0, 0, 0,
	0, 1034, 553, 1034, 0, 107, 0, 0, 0, 0,
	2788, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 473, 473, 473, 169, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 473, 0, 2813,
	1046, 0, 0, 0, 142, 1063, 0, 1531, 0, 38,
	0, 0, 0, 0, 0, 0, 168, 0, 0, 0,
	39, 137, 0, 135, 63, 161, 64, 1083, 1083, 1083,
	936, 0, 0, 162, 42, 0, 0, 0, 0, 0,
	0, 1377, 1377, 1377, 167, 0, 0, 0, 44, 139,
	0, 0, 0, 0, 134, 553, 0, 0, 107, 0,
	43, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 1132, 0, 50, 0, 0, 0, 52, 0, 0,
	0, 56, 0, 2877, 140, 0, 0, 0, 57, 69,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 168,
	0, 0, 0, 0, 0, 0, 59, 0, 161, 0,
	0, 0, 0, 0, 0, 60, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 902, 902, 0,
	0, 902, 0, 0, 701, 0, 519, 0, 0, 519,
	0, 0, 0, 0, 0, 0, 0, 519, 519, 0,
	0, 0, 519, 0, 0, 0, 0, 0, 0, 0,
	473, 1914, 2256, 0, 0, 0, 1914, 929, 929, 2256,
	0, 0, 0, 0, 61, 0, 1914, 2256, 1914, 2256,
	2256, 62, 0, 0, 0, 0, 0, 0, 473, 0,
	0, 0, 0, 0, 0, 1471, 929, 929, 0, 0,
	72, 135, 63, 929, 64, 0, 65, 473, 0, 0,
	141, 932, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 473, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 107, 0, 0, 0,
	0, 0, 1490, 0, 1490, 138, 473, 0, 473, 0,
	0, 0, 0, 473, 0, 473, 0, 0, 169, 932,
	0, 0, 0, 0, 1914, 0, 519, 0, 0, 0,
	711, 711, 0, 1914, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 1034, 136,
	0, 0, 0, 0, 0, 0, 0, 168, 0, 2167,
	2168, 0, 2185, 2186, 2187, 0, 161, 2378, 1034, 0,
	0, 0, 0, 0, 162, 688, 929, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 941, 134, 2398, 1311, 4, 1314,
	1666, 0, 1671, 0, 0, 0, 1320, 0, 1678, 0,
	0, 473, 1409, 0, 0, 0, 0, 2182, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 0, 1734, 0, 1736, 1737, 1738, 1739,
	0, 0, 2443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1762, 0, 0, 0, 0,
	0, 203, 1315, 2173, 0, 0, 0, 0, 928, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1804, 1805, 1806, 1807, 1808, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 1831, 0, 1843, 0, 0, 2188, 1848,
	1853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 519, 0, 0, 0, 0, 2183, 0, 71, 0,
	1469, 1399, 0, 0, 0, 1404, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2531, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 1400, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1400, 0, 0, 0, 1400, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1914, 1490, 0, 1490, 0, 2184,
	0, 0, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1914, 902, 0, 0, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1034, 0,
	0, 1632, 932, 473, 0, 473, 0, 1638, 0, 1639,
	0, 1640, 0, 1641, 0, 1642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1651, 1063, 0, 0, 0,
	0, 2179, 2180, 2181, 0, 0, 0, 941, 2178, 2176,
	2177, 2169, 2170, 2171, 2172, 2174, 2175, 0, 0, 2646,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 902, 0, 0, 0, 0, 1034, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	0, 0, 0, 0, 0, 1914, 2256, 1914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2531, 1034, 0, 0, 0, 0, 1914, 0,
	2256, 0, 0, 1034, 1034, 473, 1914, 2256, 928, 928,
	928, 473, 473, 928, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2531, 0, 1034,
	1978, 0, 0, 0, 2097, 2098, 0, 0, 2531, 0,
	2103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	688, 942, 1914, 688, 688, 0, 0, 0, 0, 2116,
	0, 0, 0, 0, 0, 0, 0, 1900, 0, 2378,
	2378, 0, 2122, 0, 0, 0, 0, 0, 2129, 0,
	0, 0, 0, 2134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1752, 0, 936, 0, 0, 0, 941, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 1314,
	0, 0, 942, 0, 519, 0, 0, 0, 0, 0,
	1914, 0, 2256, 0, 1315, 2807, 0, 0, 0, 0,
	0, 0, 0, 473, 1853, 1853, 1853, 2531, 0, 0,
	2018, 0, 0, 1083, 0, 1083, 1377, 1083, 0, 936,
	936, 0, 0, 0, 2222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1400, 0, 0,
	0, 2531, 0, 2531, 0, 0, 0, 2531, 891, 473,
	0, 473, 0, 0, 0, 0, 942, 0, 0, 1034,
	0, 0, 0, 0, 0, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2443, 0, 0, 0, 0, 0, 519, 0, 0,
	0, 0, 71, 0, 0, 2807, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 0, 2072, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 1914, 2256, 0, 0, 0, 1400,
	0, 473, 0, 0, 0, 0, 0, 0, 71, 2341,
	71, 0, 0, 0, 2080, 936, 2082, 2256, 0, 0,
	0, 0, 0, 551, 0, 1034, 929, 1034, 0, 473,
	0, 0, 71, 0, 39, 0, 0, 2095, 942, 71,
	0, 0, 0, 0, 0, 0, 0, 2939, 42, 0,
	1034, 0, 0, 473, 0, 941, 0, 0, 0, 0,
	0, 0, 711, 711, 1249, 1250, 0, 0, 0, 0,
	0, 2531, 0, 0, 0, 711, 550, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 1252,
	2443, 2400, 0, 0, 0, 1678, 0, 929, 929, 929,
	0, 2404, 929, 0, 2405, 552, 0, 0, 0, 0,
	0, 0, 57, 554, 1251, 1034, 2410, 58, 0, 0,
	2531, 0, 1271, 1914, 0, 2418, 0, 0, 0, 0,
	0, 0, 0, 2422, 0, 0, 0, 2222, 0, 2807,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 60,
	0, 0, 941, 0, 0, 71, 2449, 2450, 2451, 71,
	0, 0, 941, 2453, 0, 941, 1249, 1250, 0, 0,
	2455, 0, 1292, 1293, 1294, 0, 0, 0, 0, 1274,
	1275, 1276, 1277, 0, 928, 928, 928, 0, 1257, 0,
	0, 1252, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 2485, 2486, 0, 942, 0, 0, 0,
	0, 0, 0, 1279, 1280, 1281, 1251, 0, 0, 0,
	0, 0, 0, 0, 1271, 928, 0, 0, 0, 0,
	0, 0, 2502, 0, 2167, 2168, 0, 2185, 2186, 2187,
	0, 0, 0, 0, 0, 1752, 0, 0, 61, 0,
	0, 0, 0, 2167, 2168, 0, 2185, 2186, 2187, 0,
	2253, 1272, 0, 0, 0, 1314, 0, 0, 0, 2525,
	0, 0, 0, 0, 0, 135, 63, 0, 64, 0,
	0, 1274, 1275, 1276, 1277, 0, 0, 0, 1063, 0,
	1257, 0, 2182, 0, 0, 0, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 0, 0,
	107, 2182, 1289, 1299, 0, 1279, 1280, 1281, 0, 0,
	0, 2306, 941, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 0, 2324, 0, 0, 1377,
	0, 1314, 0, 2331, 0, 2333, 1287, 0, 2173, 0,
	2600, 0, 0, 1272, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 891, 0, 0, 2173, 0, 0,
	161, 2189, 891, 891, 0, 0, 891, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2188, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 2629, 0, 0, 0, 2632, 2633, 0,
	0, 2635, 0, 0, 0, 0, 0, 0, 2637, 1278,
	0, 2183, 2640, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 941, 942, 0, 1273, 0, 0, 2647,
	2183, 2402, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256,
	1258, 1259, 0, 0, 0, 0, 0, 0, 71, 1290,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 2184, 0, 0, 0, 0, 701,
	0, 0, 0, 0, 941, 0, 941, 0, 0, 928,
	0, 0, 929, 2184, 0, 2704, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 1288, 0, 0, 0, 0,
	0, 942, 0, 1291, 942, 1262, 1260, 1261, 1253, 1254,
	1255, 1256, 1258, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 929, 929, 929, 941, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 0, 2179, 2180, 2181, 0,
	0, 0, 0, 2178, 2176, 2177, 2169, 2170, 2171, 2172,
	2174, 2175, 2777, 2778, 0, 2179, 2180, 2181, 0, 0,
	0, 0, 2178, 2176, 2177, 2169, 2170, 2171, 2172, 2174,
	2175, 0, 0, 0, 0, 0, 2787, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2795, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2575, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 941, 0, 0, 0,
	0, 942, 0, 0, 0, 0, 2831, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 2620, 0, 936, 0, 0, 928, 0,
	0, 0, 941, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 630, 0, 661, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 637, 0, 928, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 635, 2888, 0, 0,
	2891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 942, 0, 0, 0, 0, 0, 636, 0,
	0, 0, 0, 638, 0, 0, 0, 666, 0, 0,
	0, 0, 0, 644, 645, 0, 0, 0, 656, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	0, 941, 662, 639, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 660, 650, 0, 0,
	0, 0, 0, 0, 0, 2718, 0, 0, 0, 0,
	0, 1063, 0, 942, 0, 942, 0, 0, 929, 0,
	0, 0, 0, 640, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 2978, 2978, 0, 0, 0, 928,
	0, 0, 0, 641, 642, 0, 0, 0, 0, 0,
	0, 0, 2995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 648, 0, 942, 941, 0, 942, 0,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2978, 0, 0, 647, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 1249, 1250, 663, 1282, 1283, 1284, 1292,
	1293, 1294, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 1252, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	646, 2978, 0, 1251, 0, 0, 0, 928, 0, 0,
	0, 1271, 0, 2814, 0, 928, 928, 0, 1268, 0,
	0, 0, 0, 0, 0, 658, 0, 0, 0, 0,
	0, 0, 0, 0, 653, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 632, 651, 664, 0,
	941, 0, 942, 0, 0, 942, 0, 0, 0, 2852,
	0, 2854, 633, 0, 0, 0, 71, 0, 1274, 1275,
	1276, 1277, 654, 0, 0, 652, 0, 1257, 0, 667,
	668, 0, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 0, 655, 0, 0, 0, 0, 929, 0, 1289,
	1299, 942, 1279, 1280, 1281, 929, 0, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 1296, 0, 0, 929, 0, 0, 0,
	1266, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 929, 929, 0, 0, 0,
	0, 2907, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 2927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 2945, 0, 0, 1278, 0, 0, 0,
	942, 0, 0, 0, 0, 0, 0, 0, 942, 0,
	1752, 0, 0, 1273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 2153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 0, 0, 0, 929, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	273, 274, 275, 276, 944, 277, 945, 946, 947, 948,
	209, 949, 950, 951, 952, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 953, 282, 216, 217, 283,
	284, 285, 954, 955, 218, 219, 220, 956, 286, 221,
	957, 903, 958, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 959, 296, 0, 297, 298, 960, 835,
	299, 300, 301, 961, 962, 964, 963, 965, 966, 967,
	302, 303, 477, 304, 222, 305, 223, 224, 968, 306,
	969, 307, 970, 308, 971, 972, 309, 310, 973, 311,
	974, 0, 975, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 976, 836, 977, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 978, 323, 979, 980,
	837, 324, 981, 325, 231, 982, 232, 983, 326, 327,
	328, 329, 330, 331, 233, 234, 839, 984, 235, 0,
	0, 0, 335, 985, 332, 986, 838, 333, 236, 334,
	237, 238, 239, 240, 241, 987, 242, 988, 336, 840,
	841, 337, 338, 339, 842, 243, 244, 0, 0, 340,
	341, 342, 989, 344, 343, 990, 245, 843, 345, 346,
	844, 991, 347, 348, 992, 993, 349, 0, 350, 905,
	904, 351, 352, 354, 246, 353, 845, 355, 356, 358,
	357, 994, 995, 846, 996, 247, 359, 248, 360, 361,
	997, 362, 363, 998, 999, 364, 365, 1000, 1001, 366,
	249, 847, 367, 848, 250, 368, 369, 370, 371, 372,
	373, 374, 1002, 375, 251, 376, 252, 377, 1003, 378,
	379, 380, 381, 382, 253, 383, 384, 1004, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 1005, 397, 849, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 1006, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 1007, 418,
	403, 404, 419, 850, 420, 259, 260, 421, 1008, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 1009, 427,
	262, 1010, 430, 431, 1011, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 1012, 263, 264, 265, 1013,
	1014, 440, 441, 266, 267, 1015, 442, 443, 444, 445,
	1016, 1017, 446, 447, 448, 449, 1018, 450, 1019, 268,
	451, 452, 453, 269, 270, 1020, 1021, 454, 271, 1022,
	1023, 1024, 1025, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 1884,
	0, 0, 0, 0, 0, 0, 0, 0, 1885, 273,
	274, 275, 276, 944, 277, 945, 946, 947, 948, 209,
	949, 950, 951, 952, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 953, 282, 216, 217, 283, 284,
	285, 954, 955, 218, 219, 220, 956, 286, 221, 957,
	903, 958, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 959, 296, 0, 297, 298, 960, 835, 299,
	300, 301, 961, 962, 964, 963, 965, 966, 967, 302,
	303, 477, 304, 222, 305, 223, 224, 968, 306, 969,
	307, 970, 308, 971, 972, 309, 310, 973, 311, 974,
	0, 975, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 976, 836, 977, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 978, 323, 979, 980, 837,
	324, 981, 325, 231, 982, 232, 983, 326, 327, 328,
	329, 330, 331, 233, 234, 839, 984, 235, 0, 0,
	0, 335, 985, 332, 986, 838, 333, 236, 334, 237,
	238, 239, 240, 241, 987, 242, 988, 336, 840, 841,
	337, 338, 339, 842, 243, 244, 0, 0, 340, 341,
	342, 989, 344, 343, 990, 245, 843, 345, 346, 844,
	991, 347, 348, 992, 993, 349, 0, 350, 905, 904,
	351, 352, 354, 246, 353, 845, 355, 356, 358, 357,
	994, 995, 846, 996, 247, 359, 248, 360, 361, 997,
	362, 363, 998, 999, 364, 365, 1000, 1001, 366, 249,
	847, 367, 848, 250, 368, 369, 370, 371, 372, 373,
	374, 1002, 375, 251, 376, 252, 377, 1003, 378, 379,
	380, 381, 382, 253, 383, 384, 1004, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	1005, 397, 849, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 1006, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 1007, 418, 403,
	404, 419, 850, 420, 259, 260, 421, 1008, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 1009, 427, 262,
	1010, 430, 431, 1011, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 1012, 263, 264, 265, 1013, 1014,
	440, 441, 266, 267, 1015, 442, 443, 444, 445, 1016,
	1017, 446, 447, 448, 449, 1018, 450, 1019, 268, 451,
	452, 453, 269, 270, 1020, 1021, 454, 271, 1022, 1023,
	1024, 1025, 455, 456, 272, 457, 458, 459, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2675, 273,
	274, 275, 276, 944, 277, 945, 946, 947, 948, 209,
	949, 950, 951, 952, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 953, 282, 216, 217, 283, 284,
	285, 954, 955, 218, 219, 220, 956, 286, 221, 957,
	903, 958, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 959, 296, 0, 297, 298, 960, 835, 299,
	300, 301, 961, 962, 964, 963, 965, 966, 967, 302,
	303, 477, 304, 222, 305, 223, 224, 968, 306, 969,
	307, 970, 308, 971, 972, 309, 310, 973, 311, 974,
	0, 975, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 976, 836, 977, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 978, 323, 979, 980, 837,
	324, 981, 325, 231, 982, 232, 983, 326, 327, 328,
	329, 330, 331, 233, 234, 839, 984, 235, 0, 0,
	0, 335, 985, 332, 986, 838, 333, 236, 334, 237,
	238, 239, 240, 241, 987, 242, 988, 336, 840, 841,
	337, 338, 339, 842, 243, 244, 0, 0, 340, 341,
	342, 989, 344, 343, 990, 245, 843, 345, 346, 844,
	991, 347, 348, 992, 993, 349, 0, 350, 905, 904,
	351, 352, 354, 246, 353, 845, 355, 356, 358, 357,
	994, 995, 846, 996, 247, 359, 248, 360, 361, 997,
	362, 363, 998, 999, 364, 365, 1000, 1001, 366, 249,
	847, 367, 848, 250, 368, 369, 370, 371, 372, 373,
	374, 1002, 375, 251, 376, 252, 377, 1003, 378, 379,
	380, 381, 382, 253, 383, 384, 1004, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	1005, 397, 849, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 1006, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 1007, 418, 403,
	404, 419, 850, 420, 259, 260, 421, 1008, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 1009, 427, 262,
	1010, 430, 431, 1011, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 1012, 263, 264, 265, 1013, 1014,
	440, 441, 266, 267, 1015, 442, 443, 444, 445, 1016,
	1017, 446, 447, 448, 449, 1018, 450, 1019, 268, 451,
	452, 453, 269, 270, 1020, 1021, 454, 271, 1022, 1023,
	1024, 1025, 455, 456, 272, 457, 458, 459, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2782, 273, 274, 275, 276, 944, 277,
	945, 946, 947, 948, 209, 949, 950, 951, 952, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 953,
	282, 216, 217, 283, 284, 285, 954, 955, 218, 219,
	220, 956, 286, 221, 957, 903, 958, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 959, 296, 0,
	297, 298, 960, 835, 299, 300, 301, 961, 962, 964,
	963, 965, 966, 967, 302, 303, 477, 304, 222, 305,
	223, 224, 968, 306, 969, 307, 970, 308, 971, 972,
	309, 310, 973, 311, 974, 0, 975, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 976, 836, 977, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	978, 323, 979, 980, 837, 324, 981, 325, 231, 982,
	232, 983, 326, 327, 328, 329, 330, 331, 233, 234,
	839, 984, 235, 0, 0, 0, 335, 985, 332, 986,
	838, 333, 236, 334, 237, 238, 239, 240, 241, 987,
	242, 988, 336, 840, 841, 337, 338, 339, 842, 243,
	244, 0, 0, 340, 341, 342, 989, 344, 343, 990,
	245, 843, 345, 346, 844, 991, 347, 348, 992, 993,
	349, 0, 350, 905, 904, 351, 352, 354, 246, 353,
	845, 355, 356, 358, 357, 994, 995, 846, 996, 247,
	359, 248, 360, 361, 997, 362, 363, 998, 999, 364,
	365, 1000, 1001, 366, 249, 847, 367, 848, 250, 368,
	369, 370, 371, 372, 373, 374, 1002, 375, 251, 376,
	252, 377, 1003, 378, 379, 380, 381, 382, 253, 383,
	384, 1004, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 1005, 397, 849, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 1006, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 1007, 418, 403, 404, 419, 850, 420, 259,
	260, 421, 1008, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 1009, 427, 262, 1010, 430, 431, 1011, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 1012,
	263, 264, 265, 1013, 1014, 440, 441, 266, 267, 1015,
	442, 443, 444, 445, 1016, 1017, 446, 447, 448, 449,
	1018, 450, 1019, 268, 451, 452, 453, 269, 270, 1020,
	1021, 454, 271, 1022, 1023, 1024, 1025, 455, 456, 272,
	457, 458, 459, 939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2425, 273,
	274, 275, 276, 944, 277, 945, 946, 947, 948, 209,
	949, 950, 951, 952, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 953, 282, 216, 217, 283, 284,
	285, 954, 955, 218, 219, 220, 956, 286, 221, 957,
	903, 958, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 959, 296, 0, 297, 298, 960, 835, 299,
	300, 301, 961, 962, 964, 963, 965, 966, 967, 302,
	303, 477, 304, 222, 305, 223, 224, 968, 306, 969,
	307, 970, 308, 971, 972, 309, 310, 973, 311, 974,
	0, 975, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 976, 836, 977, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 978, 323, 979, 980, 837,
	324, 981, 325, 231, 982, 232, 983, 326, 327, 328,
	329, 330, 331, 233, 234, 839, 984, 235, 0, 0,
	0, 335, 985, 332, 986, 838, 333, 236, 334, 237,
	238, 239, 240, 241, 987, 242, 988, 336, 840, 841,
	337, 338, 339, 842, 243, 244, 0, 0, 340, 341,
	342, 989, 344, 343, 990, 245, 843, 345, 346, 844,
	991, 347, 348, 992, 993, 349, 0, 350, 905, 904,
	351, 352, 354, 246, 353, 845, 355, 356, 358, 357,
	994, 995, 846, 996, 247, 359, 248, 360, 361, 997,
	362, 363, 998, 999, 364, 365, 1000, 1001, 366, 249,
	847, 367, 848, 250, 368, 369, 370, 371, 372, 373,
	374, 1002, 375, 251, 376, 252, 377, 1003, 378, 379,
	380, 381, 382, 253, 383, 384, 1004, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	1005, 397, 849, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 1006, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 1007, 418, 403,
	404, 419, 850, 420, 259, 260, 421, 1008, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 1009, 427, 262,
	1010, 430, 431, 1011, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 1012, 263, 264, 265, 1013, 1014,
	440, 441, 266, 267, 1015, 442, 443, 444, 445, 1016,
	1017, 446, 447, 448, 449, 1018, 450, 1019, 268, 451,
	452, 453, 269, 270, 1020, 1021, 454, 271, 1022, 1023,
	1024, 1025, 455, 456, 272, 457, 458, 459, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2310, 273, 274, 275, 276, 944, 277,
	945, 946, 947, 948, 209, 949, 950, 951, 952, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 953,
	282, 216, 217, 283, 284, 285, 954, 955, 218, 219,
	220, 956, 286, 221, 957, 903, 958, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 959, 296, 0,
	297, 298, 960, 835, 299, 300, 301, 961, 962, 964,
	963, 965, 966, 967, 302, 303, 477, 304, 222, 305,
	223, 224, 968, 306, 969, 307, 970, 308, 971, 972,
	309, 310, 973, 311, 974, 0, 975, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 976, 836, 977, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	978, 323, 979, 980, 837, 324, 981, 325, 231, 982,
	232, 983, 326, 327, 328, 329, 330, 331, 233, 234,
	839, 984, 235, 0, 0, 0, 335, 985, 332, 986,
	838, 333, 236, 334, 237, 238, 239, 240, 241, 987,
	242, 988, 336, 840, 841, 337, 338, 339, 842, 243,
	244, 0, 0, 340, 341, 342, 989, 344, 343, 990,
	245, 843, 345, 346, 844, 991, 347, 348, 992, 993,
	349, 0, 350, 905, 904, 351, 352, 354, 246, 353,
	845, 355, 356, 358, 357, 994, 995, 846, 996, 247,
	359, 248, 360, 361, 997, 362, 363, 998, 999, 364,
	365, 1000, 1001, 366, 249, 847, 367, 848, 250, 368,
	369, 370, 371, 372, 373, 374, 1002, 375, 251, 376,
	252, 377, 1003, 378, 379, 380, 381, 382, 253, 383,
	384, 1004, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 1005, 397, 849, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 1006, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 1007, 418, 403, 404, 419, 850, 420, 259,
	260, 421, 1008, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 1009, 427, 262, 1010, 430, 431, 1011, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 1012,
	263, 264, 265, 1013, 1014, 440, 441, 266, 267, 1015,
	442, 443, 444, 445, 1016, 1017, 446, 447, 448, 449,
	1018, 450, 1019, 268, 451, 452, 453, 269, 270, 1020,
	1021, 454, 271, 1022, 1023, 1024, 1025, 455, 456, 272,
	457, 458, 459, 939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1775, 273,
	274, 275, 276, 944, 277, 945, 946, 947, 948, 209,
	949, 950, 951, 952, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 953, 282, 216, 217, 283, 284,
	285, 954, 955, 218, 219, 220, 956, 286, 221, 957,
	903, 958, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 959, 296, 0, 297, 298, 960, 835, 299,
	300, 301, 961, 962, 964, 963, 965, 966, 967, 302,
	303, 477, 304, 222, 305, 223, 224, 968, 306, 969,
	307, 970, 308, 971, 972, 309, 310, 973, 311, 974,
	0, 975, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 976, 836, 977, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 978, 323, 979, 980, 837,
	324, 981, 325, 231, 982, 232, 983, 326, 327, 328,
	329, 330, 331, 233, 234, 839, 984, 235, 0, 0,
	0, 335, 985, 332, 986, 838, 333, 236, 334, 237,
	238, 239, 240, 241, 987, 242, 988, 336, 840, 841,
	337, 338, 339, 842, 243, 244, 0, 0, 340, 341,
	342, 989, 344, 343, 990, 245, 843, 345, 346, 844,
	991, 347, 348, 992, 993, 349, 0, 350, 905, 904,
	351, 352, 354, 246, 353, 845, 355, 356, 358, 357,
	994, 995, 846, 996, 247, 359, 248, 360, 361, 997,
	362, 363, 998, 999, 364, 365, 1000, 1001, 366, 249,
	847, 367, 848, 250, 368, 369, 370, 371, 372, 373,
	374, 1002, 375, 251, 376, 252, 377, 1003, 378, 379,
	380, 381, 382, 253, 383, 384, 1004, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	1005, 397, 849, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 1006, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 1007, 418, 403,
	404, 419, 850, 420, 259, 260, 421, 1008, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 1009, 427, 262,
	1010, 430, 431, 1011, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 1012, 263, 264, 265, 1013, 1014,
	440, 441, 266, 267, 1015, 442, 443, 444, 445, 1016,
	1017, 446, 447, 448, 449, 1018, 450, 1019, 268, 451,
	452, 453, 269, 270, 1020, 1021, 454, 271, 1022, 1023,
	1024, 1025, 455, 456, 272, 457, 458, 459, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 273, 274, 275, 276, 944, 277,
	945, 946, 947, 948, 209, 949, 950, 951, 952, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 953,
	282, 216, 217, 283, 284, 285, 954, 955, 218, 219,
	220, 956, 286, 221, 957, 903, 958, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 959, 296, 0,
	297, 298, 960, 835, 299, 300, 301, 961, 962, 964,
	963, 965, 966, 967, 302, 303, 477, 304, 222, 305,
	223, 224, 968, 306, 969, 307, 970, 308, 971, 972,
	309, 310, 973, 311, 974, 0, 975, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 976, 836, 977, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	978, 323, 979, 980, 837, 324, 981, 325, 231, 982,
	232, 983, 326, 327, 328, 329, 330, 331, 233, 234,
	839, 984, 235, 0, 0, 0, 335, 985, 332, 986,
	838, 333, 236, 334, 237, 238, 239, 240, 241, 987,
	242, 988, 336, 840, 841, 337, 338, 339, 842, 243,
	244, 0, 0, 340, 341, 342, 989, 344, 343, 990,
	245, 843, 345, 346, 844, 991, 347, 348, 992, 993,
	349, 0, 350, 905, 904, 351, 352, 354, 246, 353,
	845, 355, 356, 358, 357, 994, 995, 846, 996, 247,
	359, 248, 360, 361, 997, 362, 363, 998, 999, 364,
	365, 1000, 1001, 366, 249, 847, 367, 848, 250, 368,
	369, 370, 371, 372, 373, 374, 1002, 375, 251, 376,
	252, 377, 1003, 378, 379, 380, 381, 382, 253, 383,
	384, 1004, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 1005, 397, 849, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 1006, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 1007, 418, 403, 404, 419, 850, 420, 259,
	260, 421, 1008, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 1009, 427, 262, 1010, 430, 431, 1011, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 1012,
	263, 264, 265, 1013, 1014, 440, 441, 266, 267, 1015,
	442, 443, 444, 445, 1016, 1017, 446, 447, 448, 449,
	1018, 450, 1019, 268, 451, 452, 453, 269, 270, 1020,
	1021, 454, 271, 1022, 1023, 1024, 1025, 455, 456, 272,
	457, 458, 459, 1782, 0, 754, 742, 743, 740, 741,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 1779, 277, 0, 0, 0,
	0, 789, 734, 0, 0, 0, 278, 279, 280, 210,
	796, 774, 797, 762, 798, 799, 0, 282, 764, 763,
	283, 284, 285, 737, 788, 800, 801, 220, 0, 286,
	793, 0, 779, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	835, 299, 300, 301, 782, 780, 781, 785, 0, 783,
	784, 302, 303, 477, 304, 802, 305, 803, 804, 720,
	306, 0, 307, 0, 308, 1780, 0, 795, 310, 0,
	311, 0, 0, 0, 725, 312, 313, 315, 318, 314,
	319, 805, 806, 749, 836, 0, 0, 0, 0, 0,
	320, 321, 807, 808, 809, 0, 322, 0, 323, 0,
	0, 837, 324, 0, 325, 810, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 790, 792, 839, 0, 773,
	0, 0, 0, 335, 0, 332, 0, 838, 333, 811,
	777, 812, 813, 814, 815, 816, 0, 778, 0, 336,
	840, 841, 337, 338, 339, 842, 817, 818, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 819, 843, 345,
	346, 844, 0, 347, 348, 0, 0, 349, 0, 350,
	722, 721, 351, 352, 354, 766, 353, 845, 355, 356,
	358, 357, 717, 0, 846, 750, 791, 359, 820, 360,
	361, 0, 775, 776, 0, 0, 364, 365, 0, 0,
	366, 249, 847, 367, 848, 821, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 822, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 823, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 849, 398, 399, 400, 401, 726,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 767, 768, 769, 770, 413, 416, 417, 786,
	418, 403, 404, 419, 850, 420, 824, 771, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 825, 426, 0,
	427, 826, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 765, 439, 0, 827, 828, 829,
	0, 0, 440, 441, 830, 831, 748, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 787, 450, 0,
	772, 451, 452, 453, 269, 832, 1778, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	718, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 714, 715, 1781, 0, 0, 0, 0,
	0, 0, 727, 1776, 0, 0, 0, 702, 730, 754,
	742, 743, 740, 741, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 167, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 169,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 1110, 832,
	0, 0, 454, 271, 0, 0, 0, 161, 455, 456,
	272, 457, 458, 459, 718, 162, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 754,
	742, 743, 740, 741, 731, 0, 1317, 0, 0, 0,
	0, 0, 730, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 167, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 169,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 1110, 832,
	0, 0, 454, 271, 0, 0, 0, 161, 455, 456,
	272, 457, 458, 459, 718, 162, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 754,
	742, 743, 740, 741, 731, 0, 1317, 0, 0, 0,
	0, 0, 730, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	1849, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 1854, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	1850, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 1851, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 754,
	742, 743, 740, 741, 731, 0, 727, 0, 0, 0,
	0, 0, 730, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 2592, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 1378,
	754, 742, 743, 740, 741, 731, 727, 0, 0, 0,
	0, 0, 730, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 789, 734, 0, 0,
	0, 278, 279, 280, 210, 796, 774, 797, 762, 798,
	799, 0, 282, 764, 763, 283, 284, 285, 737, 788,
	800, 801, 220, 0, 286, 793, 0, 779, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 835, 299, 300, 301, 782,
	780, 781, 785, 0, 783, 784, 302, 303, 477, 304,
	802, 305, 803, 804, 720, 306, 0, 307, 0, 308,
	0, 0, 795, 310, 0, 311, 0, 0, 0, 725,
	312, 313, 315, 318, 314, 319, 805, 806, 749, 836,
	0, 0, 0, 0, 0, 320, 321, 807, 808, 809,
	0, 322, 0, 323, 0, 0, 837, 324, 0, 325,
	810, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	790, 792, 839, 0, 773, 0, 0, 0, 335, 1680,
	332, 0, 838, 333, 811, 777, 812, 813, 814, 815,
	816, 0, 778, 0, 336, 840, 841, 337, 338, 339,
	842, 817, 818, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 819, 843, 345, 346, 844, 0, 347, 348,
	0, 0, 349, 0, 350, 722, 721, 351, 352, 354,
	766, 353, 845, 355, 356, 358, 357, 717, 0, 846,
	750, 791, 359, 820, 360, 361, 0, 775, 776, 0,
	0, 364, 365, 0, 0, 366, 249, 847, 367, 848,
	821, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	822, 376, 252, 377, 1679, 378, 379, 380, 381, 382,
	823, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 849,
	398, 399, 400, 401, 726, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 767, 768, 769,
	770, 413, 416, 417, 786, 418, 403, 404, 419, 850,
	420, 824, 771, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 825, 426, 0, 427, 826, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 765,
	439, 0, 827, 828, 829, 0, 0, 440, 441, 830,
	831, 748, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 787, 450, 0, 772, 451, 452, 453, 269,
	832, 0, 0, 454, 271, 0, 0, 0, 0, 455,
	456, 272, 457, 458, 459, 718, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 0, 0, 714, 715,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 710, 730, 754, 742, 743, 740, 741, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	789, 734, 0, 0, 0, 278, 279, 280, 210, 796,
	774, 797, 762, 798, 799, 0, 282, 764, 763, 283,
	284, 285, 737, 788, 800, 801, 220, 0, 286, 793,
	0, 779, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 835,
	299, 300, 301, 782, 780, 781, 785, 0, 783, 784,
	302, 303, 477, 304, 802, 305, 803, 804, 720, 306,
	0, 307, 0, 308, 0, 0, 795, 310, 0, 311,
	0, 0, 0, 725, 312, 313, 315, 318, 314, 319,
	805, 806, 749, 836, 0, 0, 0, 0, 0, 320,
	321, 807, 808, 809, 0, 322, 0, 323, 0, 0,
	837, 324, 0, 325, 810, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 790, 792, 839, 0, 773, 0,
	0, 0, 335, 0, 332, 0, 838, 333, 811, 777,
	812, 813, 814, 815, 816, 0, 778, 0, 336, 840,
	841, 337, 338, 339, 842, 817, 818, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 819, 843, 345, 346,
	844, 0, 347, 348, 0, 0, 349, 0, 350, 722,
	721, 351, 352, 354, 766, 353, 845, 355, 356, 358,
	357, 717, 0, 846, 750, 791, 359, 820, 360, 361,
	0, 775, 776, 712, 0, 364, 365, 0, 0, 366,
	249, 847, 367, 848, 821, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 822, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 823, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 849, 398, 399, 400, 401, 726, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 767, 768, 769, 770, 413, 416, 417, 786, 418,
	403, 404, 419, 850, 420, 824, 771, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 825, 426, 0, 427,
	826, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 765, 439, 0, 827, 828, 829, 0,
	0, 440, 441, 830, 831, 748, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 787, 450, 0, 772,
	451, 452, 453, 269, 832, 0, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 718,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	0, 0, 714, 715, 754, 742, 743, 740, 741, 731,
	0, 727, 0, 0, 0, 0, 0, 730, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	789, 734, 0, 0, 0, 278, 279, 280, 210, 796,
	774, 797, 762, 798, 799, 0, 282, 764, 763, 283,
	284, 285, 737, 788, 800, 801, 220, 0, 286, 793,
	0, 779, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 835,
	299, 300, 301, 782, 780, 781, 785, 0, 783, 784,
	302, 303, 477, 304, 802, 305, 803, 804, 720, 306,
	0, 307, 0, 308, 0, 0, 795, 310, 0, 311,
	0, 0, 0, 725, 312, 313, 315, 318, 314, 319,
	805, 806, 749, 836, 0, 0, 0, 0, 0, 320,
	321, 807, 808, 809, 0, 322, 0, 323, 0, 0,
	837, 324, 0, 325, 810, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 790, 792, 839, 0, 773, 0,
	0, 0, 335, 0, 332, 0, 838, 333, 811, 777,
	812, 813, 814, 815, 816, 0, 778, 0, 336, 840,
	841, 337, 338, 339, 842, 817, 818, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 819, 843, 345, 346,
	844, 0, 347, 348, 0, 0, 349, 0, 350, 722,
	721, 351, 352, 354, 766, 353, 845, 355, 356, 358,
	357, 717, 0, 846, 750, 791, 359, 820, 360, 361,
	0, 775, 776, 0, 0, 364, 365, 0, 0, 366,
	249, 847, 367, 848, 821, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 822, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 823, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 849, 398, 399, 400, 401, 726, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 767, 768, 769, 770, 413, 416, 417, 786, 418,
	403, 404, 419, 850, 420, 824, 771, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 825, 426, 0, 427,
	826, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 765, 439, 0, 827, 828, 829, 0,
	0, 440, 441, 830, 831, 748, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 787, 450, 0, 772,
	451, 452, 453, 269, 832, 2427, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 718,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	0, 0, 714, 715, 754, 742, 743, 740, 741, 731,
	0, 727, 0, 0, 0, 0, 0, 730, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	789, 734, 0, 0, 0, 278, 279, 280, 210, 796,
	774, 797, 762, 798, 799, 0, 282, 764, 763, 283,
	284, 285, 737, 788, 800, 801, 220, 0, 286, 793,
	0, 779, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 835,
	299, 300, 301, 782, 780, 781, 785, 0, 783, 784,
	302, 303, 477, 304, 802, 305, 803, 804, 720, 306,
	0, 307, 0, 308, 0, 0, 795, 310, 0, 311,
	0, 0, 0, 725, 312, 313, 315, 318, 314, 319,
	805, 806, 749, 836, 0, 0, 0, 0, 0, 320,
	321, 807, 808, 809, 0, 322, 0, 323, 0, 0,
	837, 324, 0, 325, 810, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 790, 792, 839, 0, 773, 0,
	0, 0, 335, 0, 332, 0, 838, 333, 811, 777,
	812, 813, 814, 815, 816, 0, 778, 0, 336, 840,
	841, 337, 338, 339, 842, 817, 818, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 819, 843, 345, 346,
	844, 0, 347, 348, 0, 0, 349, 0, 350, 722,
	721, 351, 352, 354, 766, 353, 845, 355, 356, 358,
	357, 717, 0, 846, 750, 791, 359, 820, 360, 361,
	0, 775, 776, 712, 0, 364, 365, 0, 0, 366,
	249, 847, 367, 848, 821, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 822, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 823, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 849, 398, 399, 400, 401, 726, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 767, 768, 769, 770, 413, 416, 417, 786, 418,
	403, 404, 419, 850, 420, 824, 771, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 825, 426, 0, 427,
	826, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 765, 439, 0, 827, 828, 829, 0,
	0, 440, 441, 830, 831, 748, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 787, 450, 0, 772,
	451, 452, 453, 269, 832, 0, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 718,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	0, 0, 714, 715, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 2243, 730, 754, 742,
	743, 740, 741, 731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 789, 734, 0, 0, 0, 278,
	279, 280, 210, 796, 774, 797, 762, 798, 799, 0,
	282, 764, 763, 283, 284, 285, 737, 788, 800, 801,
	220, 0, 286, 793, 0, 779, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 835, 299, 300, 301, 782, 780, 781,
	785, 0, 783, 784, 302, 303, 477, 304, 802, 305,
	803, 804, 720, 306, 0, 307, 0, 308, 0, 0,
	795, 310, 0, 311, 0, 0, 0, 725, 312, 313,
	315, 318, 314, 319, 805, 806, 749, 836, 0, 0,
	0, 0, 0, 320, 321, 807, 808, 809, 0, 322,
	0, 323, 0, 0, 837, 324, 0, 325, 810, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 790, 792,
	839, 0, 773, 0, 0, 0, 335, 0, 332, 0,
	838, 333, 811, 777, 812, 813, 814, 815, 816, 0,
	778, 0, 336, 840, 841, 337, 338, 339, 842, 817,
	818, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	819, 843, 345, 346, 844, 0, 347, 348, 0, 0,
	349, 0, 350, 722, 721, 351, 352, 354, 766, 353,
	845, 355, 356, 358, 357, 717, 0, 846, 750, 791,
	359, 820, 360, 361, 0, 775, 776, 0, 0, 364,
	365, 0, 0, 366, 249, 847, 367, 848, 821, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 822, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 823, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 849, 398, 399,
	400, 401, 726, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 767, 768, 769, 770, 413,
	416, 417, 786, 418, 403, 404, 419, 850, 420, 824,
	771, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	825, 426, 0, 427, 826, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 765, 439, 0,
	827, 828, 829, 0, 0, 440, 441, 830, 831, 748,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	787, 450, 0, 772, 451, 452, 453, 269, 832, 0,
	0, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 718, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 0, 0, 714, 715, 754, 742,
	743, 740, 741, 731, 0, 727, 0, 0, 0, 0,
	0, 730, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 789, 734, 0, 0, 0, 278,
	279, 280, 210, 796, 774, 797, 762, 798, 799, 0,
	282, 764, 763, 283, 284, 285, 737, 788, 800, 801,
	220, 0, 286, 793, 0, 779, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 835, 299, 300, 301, 782, 780, 781,
	785, 0, 783, 784, 302, 303, 477, 304, 802, 305,
	803, 804, 720, 306, 0, 307, 0, 308, 0, 0,
	795, 310, 0, 311, 0, 0, 0, 725, 312, 313,
	315, 318, 314, 319, 805, 806, 749, 836, 0, 0,
	0, 0, 0, 320, 321, 807, 808, 809, 0, 322,
	0, 323, 0, 0, 837, 324, 0, 325, 810, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 790, 792,
	839, 0, 773, 0, 0, 0, 335, 0, 332, 0,
	838, 333, 811, 777, 812, 813, 814, 815, 816, 0,
	778, 0, 336, 840, 841, 337, 338, 339, 842, 817,
	818, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	819, 843, 345, 346, 844, 0, 347, 348, 0, 0,
	349, 0, 350, 722, 721, 351, 352, 354, 766, 353,
	845, 355, 356, 358, 357, 717, 0, 846, 750, 791,
	359, 820, 360, 361, 0, 775, 776, 0, 0, 364,
	365, 0, 0, 366, 249, 847, 367, 848, 821, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 822, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 823, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 849, 398, 399,
	400, 401, 726, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 767, 768, 769, 770, 413,
	416, 417, 786, 418, 403, 404, 419, 850, 420, 824,
	771, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	825, 426, 0, 427, 826, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 765, 439, 0,
	827, 828, 829, 0, 0, 440, 441, 830, 831, 748,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	787, 450, 0, 772, 451, 452, 453, 269, 832, 0,
	0, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 718, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 0, 0, 714, 715, 1378, 754,
	742, 743, 740, 741, 731, 727, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 1854, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 1888, 730, 754, 742, 743, 740, 741, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 305, 803, 804, 720, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	351, 352, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 0, 1842, 730, 754, 742, 743,
	740, 741, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 305, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 351, 352, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 0, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 269, 832, 0, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 718, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 1830,
	730, 754, 742, 743, 740, 741, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 789, 734, 0,
	0, 0, 278, 279, 280, 210, 796, 774, 797, 762,
	798, 799, 0, 282, 764, 763, 283, 284, 285, 737,
	788, 800, 801, 220, 0, 286, 793, 0, 779, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 835, 299, 300, 301,
	782, 780, 781, 785, 0, 783, 784, 302, 303, 477,
	304, 802, 305, 803, 804, 720, 306, 0, 307, 0,
	308, 0, 0, 795, 310, 0, 311, 0, 0, 0,
	725, 312, 313, 315, 318, 314, 319, 805, 806, 749,
	836, 0, 0, 0, 0, 0, 320, 321, 807, 808,
	809, 0, 322, 0, 323, 0, 0, 837, 324, 0,
	325, 810, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 790, 792, 839, 0, 773, 0, 0, 0, 335,
	0, 332, 0, 838, 333, 811, 777, 812, 813, 814,
	815, 816, 0, 778, 0, 336, 840, 841, 337, 338,
	339, 842, 817, 818, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 819, 843, 345, 346, 844, 0, 347,
	348, 0, 0, 349, 0, 350, 722, 721, 351, 352,
	354, 766, 353, 845, 355, 356, 358, 357, 717, 0,
	846, 750, 791, 359, 820, 360, 361, 0, 775, 776,
	0, 0, 364, 365, 0, 0, 366, 249, 847, 367,
	848, 821, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 822, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 823, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	849, 398, 399, 400, 401, 726, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 767, 768,
	769, 770, 413, 416, 417, 786, 418, 403, 404, 419,
	850, 420, 824, 771, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 825, 426, 0, 427, 826, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	765, 439, 0, 827, 828, 829, 0, 0, 440, 441,
	830, 831, 748, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 787, 450, 0, 772, 451, 452, 453,
	269, 832, 0, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 718, 0, 0, 0,
	0, 0, 0, 0, 716, 0, 0, 0, 0, 714,
	715, 0, 0, 0, 0, 0, 0, 0, 727, 0,
	0, 0, 0, 1828, 730, 754, 742, 743, 740, 741,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 789, 734, 0, 0, 0, 278, 279, 280, 210,
	796, 774, 797, 762, 798, 799, 0, 282, 764, 763,
	283, 284, 285, 737, 788, 800, 801, 220, 0, 286,
	793, 0, 779, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	835, 299, 300, 301, 782, 780, 781, 785, 0, 783,
	784, 302, 303, 477, 304, 802, 305, 803, 804, 720,
	306, 0, 307, 0, 308, 0, 0, 795, 310, 0,
	311, 0, 0, 0, 725, 312, 313, 315, 318, 314,
	319, 805, 806, 749, 836, 0, 0, 0, 0, 0,
	320, 321, 807, 808, 809, 0, 322, 0, 323, 0,
	0, 837, 324, 0, 325, 810, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 790, 792, 839, 0, 773,
	0, 0, 0, 335, 0, 332, 0, 838, 333, 811,
	777, 812, 813, 814, 815, 816, 0, 778, 0, 336,
	840, 841, 337, 338, 339, 842, 817, 818, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 819, 843, 345,
	346, 844, 0, 347, 348, 0, 0, 349, 0, 350,
	722, 721, 351, 352, 354, 766, 353, 845, 355, 356,
	358, 357, 717, 0, 846, 750, 791, 359, 820, 360,
	361, 0, 775, 776, 0, 0, 364, 365, 0, 0,
	366, 249, 847, 367, 848, 821, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 822, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 823, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 849, 398, 399, 400, 401, 726,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 767, 768, 769, 770, 413, 416, 417, 786,
	418, 403, 404, 419, 850, 420, 824, 771, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 825, 426, 0,
	427, 826, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 765, 439, 0, 827, 828, 829,
	0, 0, 440, 441, 830, 831, 748, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 787, 450, 0,
	772, 451, 452, 453, 269, 832, 0, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	718, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 714, 715, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 1826, 730, 754,
	742, 743, 740, 741, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 1823, 730, 1815, 742, 743, 740, 741, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 789,
	734, 0, 0, 0, 278, 279, 280, 210, 796, 774,
	797, 762, 798, 799, 0, 282, 764, 763, 283, 284,
	285, 737, 788, 800, 801, 220, 0, 286, 793, 0,
	779, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 782, 780, 781, 785, 0, 783, 784, 302,
	303, 477, 304, 802, 1818, 803, 804, 720, 306, 0,
	307, 0, 308, 0, 0, 795, 310, 0, 311, 0,
	0, 0, 725, 312, 313, 315, 318, 314, 319, 805,
	806, 749, 836, 0, 0, 0, 0, 0, 320, 321,
	807, 808, 809, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 810, 0, 232, 0, 326, 327, 1819,
	329, 330, 331, 790, 792, 839, 0, 773, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 811, 777, 812,
	813, 814, 815, 816, 0, 778, 0, 336, 840, 841,
	337, 338, 339, 842, 817, 818, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 819, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 722, 721,
	1820, 1817, 354, 766, 353, 845, 355, 356, 358, 357,
	717, 0, 846, 750, 791, 359, 820, 360, 361, 0,
	775, 776, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 821, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 822, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 823, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 726, 402, 0,
	406, 407, 408, 409, 410, 411, 1821, 0, 414, 415,
	767, 768, 769, 770, 413, 416, 417, 786, 418, 403,
	404, 419, 850, 420, 824, 771, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 825, 426, 0, 427, 826,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 765, 439, 0, 827, 828, 829, 0, 0,
	440, 441, 830, 831, 748, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 787, 450, 0, 772, 451,
	452, 453, 269, 832, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 1816, 459, 718, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 714, 715, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 0, 1812, 730, 1815, 742, 743,
	740, 741, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 1818, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 1819, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 1820, 1817, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 0, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	1821, 0, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 269, 832, 0, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	1816, 459, 718, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 754, 742, 743,
	740, 741, 731, 0, 727, 0, 0, 0, 0, 0,
	730, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 789, 734, 0, 0, 0, 278, 279,
	280, 210, 796, 774, 797, 762, 798, 799, 0, 282,
	764, 763, 283, 284, 285, 737, 788, 800, 801, 220,
	0, 286, 793, 0, 779, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 782, 780, 781, 785,
	0, 783, 784, 302, 303, 477, 304, 802, 305, 803,
	804, 720, 306, 0, 307, 0, 308, 0, 0, 795,
	310, 0, 311, 0, 0, 0, 725, 312, 313, 315,
	318, 314, 319, 805, 806, 749, 836, 0, 0, 0,
	0, 0, 320, 321, 807, 808, 809, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 790, 792, 839,
	0, 773, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 811, 777, 812, 813, 814, 815, 816, 0, 778,
	0, 336, 840, 841, 337, 338, 339, 842, 817, 818,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 722, 721, 351, 352, 354, 766, 353, 845,
	355, 356, 358, 357, 717, 0, 846, 750, 791, 359,
	820, 360, 361, 0, 775, 776, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 823, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 726, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 767, 768, 769, 770, 413, 416,
	417, 786, 418, 403, 404, 419, 850, 420, 824, 771,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 825,
	426, 0, 427, 826, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 765, 439, 0, 827,
	828, 829, 0, 0, 440, 441, 830, 831, 748, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 787,
	450, 0, 772, 451, 452, 453, 269, 832, 0, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 718, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 714, 715, 0, 0, 0,
	0, 0, 1322, 0, 727, 0, 0, 0, 0, 0,
	730, 754, 742, 743, 740, 741, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 1667, 277, 0, 0, 0, 0, 789, 734, 0,
	0, 0, 278, 279, 280, 210, 796, 774, 797, 762,
	798, 799, 0, 282, 764, 763, 283, 284, 285, 737,
	788, 800, 801, 220, 0, 286, 793, 0, 779, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 835, 299, 300, 301,
	782, 780, 781, 785, 0, 783, 784, 302, 303, 477,
	304, 802, 305, 803, 804, 720, 306, 0, 307, 0,
	308, 0, 0, 795, 310, 0, 311, 0, 0, 0,
	725, 312, 313, 315, 318, 314, 319, 805, 806, 749,
	836, 0, 0, 0, 0, 0, 320, 321, 807, 808,
	809, 0, 322, 0, 323, 0, 0, 837, 324, 0,
	325, 810, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 790, 792, 839, 0, 773, 0, 0, 0, 335,
	0, 332, 0, 838, 333, 811, 777, 812, 813, 814,
	815, 816, 0, 778, 0, 336, 840, 841, 337, 338,
	339, 842, 817, 818, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 819, 843, 345, 346, 844, 0, 347,
	348, 0, 0, 349, 0, 350, 722, 721, 351, 352,
	354, 766, 353, 845, 355, 356, 358, 357, 717, 0,
	846, 750, 791, 359, 820, 360, 361, 0, 775, 776,
	0, 0, 364, 365, 0, 0, 366, 249, 847, 367,
	848, 821, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 822, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 823, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	849, 398, 399, 400, 401, 726, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 767, 768,
	769, 770, 413, 416, 417, 786, 418, 403, 404, 419,
	850, 420, 824, 771, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 825, 426, 0, 427, 826, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	765, 439, 0, 827, 828, 829, 0, 0, 440, 441,
	830, 831, 748, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 787, 450, 0, 772, 451, 452, 453,
	269, 832, 0, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 718, 0, 0, 0,
	0, 0, 0, 0, 716, 0, 0, 0, 0, 714,
	715, 0, 0, 0, 0, 0, 0, 0, 727, 0,
	0, 0, 0, 1039, 730, 754, 742, 743, 740, 741,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 789, 734, 0, 0, 0, 278, 279, 280, 210,
	796, 774, 797, 762, 798, 799, 0, 282, 764, 763,
	283, 284, 285, 737, 788, 800, 801, 220, 0, 286,
	793, 0, 779, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	835, 299, 300, 301, 782, 780, 781, 785, 0, 783,
	784, 302, 303, 477, 304, 802, 305, 803, 804, 720,
	306, 0, 307, 0, 308, 0, 0, 795, 310, 0,
	311, 0, 0, 0, 725, 312, 313, 315, 318, 314,
	319, 805, 806, 749, 836, 0, 0, 0, 0, 0,
	320, 321, 807, 808, 809, 0, 322, 0, 323, 0,
	0, 837, 324, 0, 325, 810, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 790, 792, 839, 0, 773,
	0, 0, 0, 335, 0, 332, 0, 838, 333, 811,
	777, 812, 813, 814, 815, 816, 0, 778, 0, 336,
	840, 841, 337, 338, 339, 842, 817, 818, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 819, 843, 345,
	346, 844, 0, 347, 348, 0, 0, 349, 0, 350,
	722, 721, 351, 352, 354, 766, 353, 845, 355, 356,
	358, 357, 717, 0, 846, 750, 791, 359, 820, 360,
	361, 0, 775, 776, 0, 0, 364, 365, 0, 0,
	366, 249, 847, 367, 848, 821, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 822, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 823, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 849, 398, 399, 400, 401, 726,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 767, 768, 769, 770, 413, 416, 417, 786,
	418, 403, 404, 419, 850, 420, 824, 771, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 825, 426, 0,
	427, 826, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 765, 439, 0, 827, 828, 829,
	0, 0, 440, 441, 830, 831, 748, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 787, 450, 0,
	772, 451, 452, 453, 269, 832, 0, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	718, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 714, 715, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 1037, 730, 754,
	742, 743, 740, 741, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 754,
	742, 743, 740, 741, 731, 0, 727, 0, 0, 0,
	0, 0, 730, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 754,
	742, 743, 740, 741, 731, 0, 727, 0, 0, 0,
	0, 0, 730, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 2977, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 2976, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 754,
	742, 743, 740, 741, 731, 0, 727, 0, 0, 0,
	0, 0, 730, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 2975, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 2977, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 720, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 722, 721, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 717, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 726, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 2976, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 718, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 0, 0, 714, 715, 754,
	742, 743, 740, 741, 731, 0, 727, 0, 0, 0,
	0, 0, 730, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 789, 734, 0, 0, 0,
	278, 279, 280, 210, 796, 774, 797, 762, 798, 799,
	0, 282, 764, 763, 283, 284, 285, 737, 788, 800,
	801, 220, 0, 286, 793, 0, 779, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 782, 780,
	781, 785, 0, 783, 784, 302, 303, 477, 304, 802,
	305, 803, 804, 0, 306, 0, 307, 0, 308, 0,
	0, 795, 310, 0, 311, 0, 0, 0, 725, 312,
	313, 315, 318, 314, 319, 805, 806, 749, 836, 0,
	0, 0, 0, 0, 320, 321, 807, 808, 809, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 810,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 790,
	792, 839, 0, 773, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 811, 777, 812, 813, 814, 815, 816,
	0, 778, 0, 336, 840, 841, 337, 338, 339, 842,
	817, 818, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 819, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 905, 904, 351, 352, 354, 766,
	353, 845, 355, 356, 358, 357, 0, 0, 846, 750,
	791, 359, 820, 360, 361, 0, 775, 776, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 821,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 822,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 823,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 1840, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 767, 768, 769, 770,
	413, 416, 417, 786, 418, 403, 404, 419, 850, 420,
	824, 771, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 825, 426, 0, 427, 826, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 765, 439,
	0, 827, 828, 829, 0, 0, 440, 441, 830, 831,
	748, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 787, 450, 0, 772, 451, 452, 453, 269, 832,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 754, 742, 743, 740, 741, 731,
	0, 0, 1838, 0, 0, 0, 0, 1836, 1837, 0,
	273, 274, 275, 276, 0, 277, 1839, 0, 0, 0,
	789, 734, 730, 0, 0, 278, 279, 280, 0, 796,
	774, 797, 762, 798, 799, 0, 282, 764, 763, 283,
	284, 285, 737, 788, 800, 801, 220, 0, 286, 793,
	0, 779, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 835,
	299, 300, 2977, 782, 780, 781, 785, 0, 783, 784,
	302, 303, 477, 304, 802, 305, 803, 804, 720, 306,
	0, 307, 0, 308, 0, 0, 795, 310, 0, 311,
	0, 0, 0, 725, 312, 313, 315, 318, 314, 319,
	805, 806, 749, 836, 0, 0, 0, 0, 0, 320,
	321, 807, 808, 809, 0, 322, 0, 323, 0, 0,
	837, 324, 0, 325, 810, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 790, 792, 0, 0, 773, 0,
	0, 0, 335, 0, 332, 0, 838, 333, 811, 777,
	812, 813, 814, 815, 816, 0, 778, 0, 336, 0,
	0, 337, 338, 339, 842, 817, 818, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 819, 843, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 722,
	721, 351, 352, 354, 766, 353, 845, 355, 356, 358,
	357, 717, 0, 0, 750, 791, 359, 820, 360, 361,
	0, 775, 776, 0, 0, 364, 365, 0, 0, 366,
	249, 847, 367, 848, 821, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 822, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 823, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 849, 398, 399, 400, 401, 726, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 767, 768, 769, 770, 413, 416, 417, 786, 418,
	403, 404, 419, 0, 420, 824, 771, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 825, 426, 0, 427,
	826, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 765, 439, 0, 827, 828, 829, 0,
	0, 440, 441, 830, 831, 748, 442, 443, 2976, 445,
	0, 0, 446, 447, 448, 449, 787, 450, 0, 772,
	451, 452, 453, 269, 832, 0, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 702, 0, 901, 0, 0,
	0, 0, 714, 715, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 273, 274, 275, 276, 730, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 903, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 0, 897, 898, 0,
	0, 899, 900, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 805, 806, 0, 836, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 810, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 839,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 840, 841, 337, 338, 339, 842, 243, 244,
	0, 0, 340, 341, 342, 889, 344, 343, 0, 819,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 905, 904, 351, 352, 354, 246, 353, 845,
	355, 356, 358, 357, 0, 0, 846, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 895, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 821, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 822, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 167, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 850, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 826, 0, 430, 431, 169, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 830, 831, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 1110, 270, 0, 0,
	454, 271, 0, 0, 901, 161, 455, 456, 272, 457,
	458, 459, 0, 162, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 886, 0, 1406, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 903, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 835,
	299, 300, 301, 0, 897, 898, 0, 0, 899, 900,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	805, 806, 0, 836, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	837, 324, 0, 325, 810, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 839, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 838, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 840,
	841, 337, 338, 339, 842, 243, 244, 0, 0, 340,
	341, 342, 889, 344, 343, 0, 819, 843, 345, 346,
	844, 0, 347, 348, 0, 0, 349, 0, 350, 905,
	904, 351, 352, 354, 246, 353, 845, 355, 356, 358,
	357, 0, 0, 846, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 895, 364, 365, 0, 0, 366,
	249, 847, 367, 848, 821, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 822, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 849, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 167, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 850, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	826, 0, 430, 431, 169, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 830, 831, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 1110, 270, 0, 0, 454, 271, 0,
	0, 901, 161, 455, 456, 272, 457, 458, 459, 0,
	162, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 789, 0, 886,
	0, 1406, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	788, 218, 219, 220, 0, 286, 793, 0, 779, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 835, 299, 300, 301,
	782, 780, 781, 785, 0, 783, 784, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 805, 806, 0,
	836, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 837, 324, 0,
	325, 810, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 790, 792, 839, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 838, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 840, 841, 337, 338,
	339, 842, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 819, 843, 345, 346, 844, 0, 347,
	348, 0, 0, 349, 0, 350, 905, 904, 351, 352,
	354, 246, 353, 845, 355, 356, 358, 357, 0, 0,
	846, 0, 791, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 847, 367,
	848, 821, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 822, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	849, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 786, 418, 403, 404, 419,
	850, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 826, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	830, 831, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 787, 450, 0, 268, 451, 452, 453,
	269, 270, 0, 0, 454, 271, 2215, 0, 901, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 2530, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 903, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 835, 299, 300, 301, 0, 897, 898,
	0, 0, 899, 900, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 805, 806, 0, 836, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 837, 324, 0, 325, 810, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	839, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	838, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 840, 841, 337, 338, 339, 842, 243,
	244, 0, 0, 340, 341, 342, 889, 344, 343, 0,
	819, 843, 345, 346, 844, 0, 347, 348, 0, 0,
	349, 0, 350, 905, 904, 351, 352, 354, 246, 353,
	845, 355, 356, 358, 357, 0, 0, 846, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 895, 364,
	365, 0, 0, 366, 249, 847, 367, 848, 821, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 822, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 849, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 850, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 826, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 830, 831, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 885, 0, 901, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 886, 0, 893, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 903, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	835, 299, 300, 301, 0, 897, 898, 0, 0, 899,
	900, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 805, 806, 0, 836, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 837, 324, 0, 325, 810, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 839, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 838, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	840, 841, 337, 338, 339, 842, 243, 244, 0, 0,
	340, 341, 342, 889, 344, 343, 0, 819, 843, 345,
	346, 844, 0, 347, 348, 0, 0, 349, 0, 350,
	905, 904, 351, 352, 354, 246, 353, 845, 355, 356,
	358, 357, 0, 0, 846, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 895, 364, 365, 0, 0,
	366, 249, 847, 367, 848, 821, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 822, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 849, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 850, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 826, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 830, 831, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	0, 0, 901, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	886, 0, 893, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 903,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 835, 299, 300,
	301, 0, 897, 898, 0, 0, 899, 900, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 805, 806,
	0, 836, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 837, 324,
	0, 325, 810, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 839, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 838, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 840, 841, 337,
	338, 339, 842, 243, 244, 0, 0, 340, 341, 342,
	889, 344, 343, 0, 819, 843, 345, 346, 844, 0,
	347, 348, 0, 0, 349, 0, 350, 905, 904, 351,
	352, 354, 246, 353, 845, 355, 356, 358, 357, 0,
	0, 846, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 895, 364, 365, 0, 0, 366, 249, 847,
	367, 848, 821, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 822, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 849, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 850, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 826, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 830, 831, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 1107, 0, 926,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 886, 0, 893,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 903, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 836, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 839, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 840, 841, 337, 338, 339, 842,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 905, 904, 351, 352, 354, 246,
	353, 845, 355, 356, 358, 357, 0, 0, 846, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 167, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 850, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 169,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 1110, 270,
	0, 0, 454, 271, 0, 0, 901, 161, 455, 456,
	272, 457, 458, 459, 0, 162, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 134, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 903, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 835, 299, 300, 301, 0, 897, 898, 0, 0,
	899, 900, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 805, 806, 0, 836, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 837, 324, 0, 325, 810, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 839, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 838, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 840, 841, 337, 338, 339, 842, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 819, 843,
	345, 346, 844, 0, 347, 348, 0, 0, 349, 0,
	350, 905, 904, 351, 352, 354, 246, 353, 845, 355,
	356, 358, 357, 0, 0, 846, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 847, 367, 848, 821, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 822, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 849, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 850, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 826, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 830, 831, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 702, 0, 474, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 1312, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 167, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 169, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 1110, 270, 0, 0, 454, 271, 0, 0,
	0, 161, 455, 456, 272, 457, 458, 459, 0, 162,
	754, 742, 743, 740, 741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	134, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 796, 774, 797, 762, 798,
	799, 0, 282, 764, 763, 283, 284, 285, 0, 0,
	800, 801, 220, 0, 286, 221, 0, 903, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 835, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	802, 305, 803, 804, 0, 306, 0, 307, 0, 308,
	0, 0, 795, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 749, 836,
	0, 0, 0, 0, 0, 320, 321, 807, 808, 809,
	0, 322, 0, 323, 0, 0, 837, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 839, 0, 773, 0, 0, 0, 335, 0,
	332, 0, 838, 333, 811, 777, 812, 813, 814, 815,
	816, 0, 778, 0, 336, 840, 841, 337, 338, 339,
	842, 817, 818, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 843, 345, 346, 844, 0, 347, 348,
	0, 0, 349, 0, 350, 905, 904, 351, 352, 354,
	766, 353, 845, 355, 356, 358, 357, 0, 0, 846,
	750, 247, 359, 820, 360, 361, 0, 775, 776, 0,
	0, 364, 365, 0, 0, 366, 249, 847, 367, 848,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	823, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 849,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 767, 768, 769,
	770, 413, 416, 417, 0, 418, 403, 404, 419, 850,
	420, 824, 771, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 825, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 765,
	439, 0, 827, 828, 829, 0, 0, 440, 441, 266,
	267, 748, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 772, 451, 452, 453, 269,
	832, 474, 0, 454, 271, 0, 0, 0, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 0, 0, 454, 271, 0, 0, 474, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 2016, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 0, 0, 474, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 2442, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	1178, 0, 926, 925, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 1410, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 903,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 835, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 836, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 837, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 839, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 838, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 840, 841, 337,
	338, 339, 842, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 843, 345, 346, 844, 0,
	347, 348, 0, 0, 349, 0, 350, 905, 904, 351,
	352, 354, 246, 353, 845, 355, 356, 358, 357, 0,
	0, 846, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 847,
	367, 848, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 849, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 850, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 1103, 0, 926,
	925, 0, 0, 0, 923, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 903, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 836, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 1102,
	234, 839, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 840, 841, 337, 338, 339, 842,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 905, 904, 351, 352, 354, 246,
	353, 845, 355, 356, 358, 357, 0, 0, 846, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 850, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 1099, 0, 926, 925, 0, 0,
	0, 923, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 903, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 835, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 836, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 837, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 1098, 234, 839, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 838, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 840, 841, 337, 338, 339, 842, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 843,
	345, 346, 844, 0, 347, 348, 0, 0, 349, 0,
	350, 905, 904, 351, 352, 354, 246, 353, 845, 355,
	356, 358, 357, 0, 0, 846, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 847, 367, 848, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 849, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 850, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 0, 0, 0, 0, 455, 456, 272, 457, 458,
	459, 1060, 0, 926, 925, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	903, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 835, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 836, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 837,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 1059, 234, 839, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 838, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 840, 841,
	337, 338, 339, 842, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 843, 345, 346, 844,
	0, 347, 348, 0, 0, 349, 0, 350, 905, 904,
	351, 352, 354, 246, 353, 845, 355, 356, 358, 357,
	0, 0, 846, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	847, 367, 848, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 849, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 850, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 1057, 0,
	926, 925, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 903, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 835, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 836,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 837, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	1056, 234, 839, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 838, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 840, 841, 337, 338, 339,
	842, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 843, 345, 346, 844, 0, 347, 348,
	0, 0, 349, 0, 350, 905, 904, 351, 352, 354,
	246, 353, 845, 355, 356, 358, 357, 0, 0, 846,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 847, 367, 848,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 849,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 850,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 0, 0, 0, 0, 455,
	456, 272, 457, 458, 459, 919, 0, 926, 925, 0,
	0, 0, 923, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 903, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 835, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 836, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 837, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 921, 234, 839,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 838,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 840, 841, 337, 338, 339, 842, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	843, 345, 346, 844, 0, 347, 348, 0, 0, 349,
	0, 350, 905, 904, 351, 352, 354, 246, 353, 845,
	355, 356, 358, 357, 0, 0, 846, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 847, 367, 848, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 849, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 850, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 926, 925,
	454, 271, 0, 923, 0, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 903, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 835, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 836, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 837, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	839, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	838, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 840, 841, 337, 338, 339, 842, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 843, 345, 346, 844, 0, 347, 348, 0, 0,
	349, 0, 350, 905, 904, 351, 352, 354, 246, 353,
	845, 355, 356, 358, 357, 0, 0, 846, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 847, 367, 848, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 849, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 850, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 926,
	925, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 903, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 835, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 836, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 837, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 839, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 838, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 840, 841, 337, 338, 339, 842,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 843, 345, 346, 844, 0, 347, 348, 0,
	0, 349, 0, 350, 905, 904, 351, 352, 354, 246,
	353, 845, 355, 356, 358, 357, 0, 0, 846, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 847, 367, 848, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 849, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 850, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	926, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 903, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 835, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 836,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 837, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 839, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 838, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 840, 841, 337, 338, 339,
	842, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 843, 345, 346, 844, 0, 347, 348,
	0, 0, 349, 0, 350, 905, 904, 351, 352, 354,
	246, 353, 845, 355, 356, 358, 357, 0, 0, 846,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 847, 367, 848,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 849,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 850,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 571, 0, 202, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 208, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 207, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 201, 0, 202, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 462, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 208, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 207, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 202, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 462, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 208, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 1636, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 207, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 202, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 462, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 208, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 207, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 474, 0, 454,
	271, 0, 0, 0, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 462, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 474, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 462, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 1915, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 1912, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 1987, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 1918, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 1985, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 1984, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 1917, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 1986, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 474,
	0, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 1915, 286, 221, 0, 0, 1909, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 1912, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 1918, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 1908,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 1917, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 1916, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 577, 0, 474, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 576, 558, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	561, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 562, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 408, 409, 410, 411, 412,
	563, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 557, 0, 474, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 558, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 561, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 562, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 563, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 474, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 561, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 562, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 563, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 0, 0, 454, 271, 1078,
	0, 474, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 895, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 0, 0, 454, 271, 914, 0, 474, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 916, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 895, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 911, 0, 474, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 913, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 895, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	907, 0, 474, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 909, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 895, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 496, 0, 474,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 495,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 494, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	474, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 1895, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 474, 2379, 454, 271, 0, 0, 0, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 474, 2379, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 2376, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 474, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 895, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 1656, 0,
	474, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 1654, 0, 474, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 1652, 0, 474, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 233, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 474, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 273, 274, 275, 276, 1629, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	1590, 0, 474, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 1588, 0, 474,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 603, 0, 474, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 1152, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 604, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 406, 407, 600, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 599, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 1488, 0, 474, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 1487, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 603, 0,
	474, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 1152, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 604, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 600,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 599, 264, 265, 0, 0, 440, 1153, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 603, 0, 474, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 593, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 604, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 600, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 1128,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 599,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 1096, 0, 474, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 1095, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 0, 0, 454, 271, 1092,
	0, 474, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 1091, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 0, 0, 454, 271, 1089, 0, 474, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 1088, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 1086, 0, 474, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 1085, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	1082, 0, 474, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 1081, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 474, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 273,
	274, 275, 276, 1070, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 1068, 0,
	474, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	1067, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 1062, 0, 474, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 0, 0,
	454, 271, 1053, 0, 474, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 1052, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 0, 0, 454, 271, 1049,
	0, 474, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 233, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 0, 0, 454, 271, 1045, 0, 474, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 1047, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 0,
	0, 454, 271, 933, 0, 474, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 935, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 0, 0, 454, 271,
	930, 0, 474, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 406,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 0, 0, 454, 271, 603, 0, 474,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 593, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 233,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 592, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	604, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 594, 402, 0, 406, 407, 600, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 595, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 599, 264, 265, 0, 0, 440, 597, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	0, 0, 454, 271, 583, 0, 474, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 381, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 402, 0, 584, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 579, 0, 474, 0, 455, 456, 272, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 418, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 0, 0, 454, 271, 569, 0,
	474, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	233, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 0, 0, 454, 271, 518, 0, 474, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 276, 0, 277, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 278, 279,
	280, 210, 211, 212, 213, 281, 214, 215, 0, 282,
	216, 217, 283, 284, 285, 0, 0, 218, 219, 220,
	0, 286, 221, 0, 0, 0, 287, 288, 289, 290,
	291, 0, 293, 294, 295, 292, 0, 296, 0, 297,
	298, 0, 0, 299, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 477, 304, 222, 305, 223,
	224, 0, 306, 0, 307, 0, 308, 0, 0, 309,
	310, 0, 311, 0, 0, 0, 225, 312, 313, 315,
	318, 314, 319, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 320, 321, 228, 229, 230, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 231, 0, 232,
	0, 326, 327, 328, 329, 330, 331, 233, 234, 0,
	0, 235, 0, 0, 0, 335, 0, 332, 0, 0,
	333, 236, 334, 237, 238, 239, 240, 241, 0, 242,
	0, 336, 0, 0, 337, 338, 339, 0, 243, 244,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 245,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 246, 353, 0,
	355, 356, 358, 357, 0, 0, 0, 0, 247, 359,
	248, 360, 361, 0, 362, 363, 0, 0, 364, 365,
	0, 0, 366, 249, 0, 367, 0, 250, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 251, 376, 252,
	377, 0, 378, 379, 380, 381, 382, 253, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 390,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 254, 402, 0, 406, 407, 408, 409, 410, 411,
	412, 0, 414, 415, 255, 256, 257, 258, 413, 416,
	417, 0, 418, 403, 404, 419, 0, 420, 259, 260,
	421, 0, 429, 422, 423, 424, 405, 425, 428, 261,
	426, 0, 427, 262, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 316, 437, 317, 438, 439, 0, 263,
	264, 265, 0, 0, 440, 441, 266, 267, 0, 442,
	443, 444, 445, 0, 0, 446, 447, 448, 449, 0,
	450, 0, 268, 451, 452, 453, 269, 270, 474, 0,
	454, 271, 0, 0, 0, 0, 455, 456, 272, 457,
	458, 459, 0, 0, 273, 274, 275, 276, 0, 277,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 278,
	279, 280, 210, 211, 212, 213, 281, 214, 215, 0,
	282, 216, 217, 283, 284, 285, 0, 0, 218, 219,
	220, 0, 286, 221, 0, 0, 0, 287, 288, 289,
	290, 291, 0, 293, 294, 295, 292, 0, 296, 0,
	297, 298, 0, 0, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 477, 304, 222, 305,
	223, 224, 0, 306, 0, 307, 0, 308, 0, 0,
	309, 310, 0, 311, 0, 0, 0, 225, 312, 313,
	315, 318, 314, 319, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 320, 321, 228, 229, 230, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 231, 0,
	232, 0, 326, 327, 328, 329, 330, 331, 233, 234,
	0, 0, 235, 0, 0, 0, 335, 0, 332, 0,
	0, 333, 236, 334, 237, 238, 239, 240, 241, 0,
	242, 0, 336, 0, 0, 337, 338, 339, 0, 243,
	244, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	245, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 246, 353,
	0, 355, 356, 358, 357, 0, 0, 0, 0, 247,
	359, 248, 360, 361, 0, 362, 363, 0, 0, 364,
	365, 0, 0, 366, 249, 0, 367, 0, 250, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 251, 376,
	252, 377, 0, 378, 379, 380, 381, 382, 253, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	390, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 254, 402, 0, 406, 407, 408, 409, 410,
	411, 412, 0, 414, 415, 255, 256, 257, 258, 413,
	416, 417, 0, 418, 403, 404, 419, 0, 420, 259,
	260, 421, 0, 429, 422, 423, 424, 405, 425, 428,
	261, 426, 0, 427, 262, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 316, 437, 317, 438, 439, 0,
	263, 264, 265, 0, 0, 440, 441, 266, 267, 0,
	442, 443, 444, 445, 0, 0, 446, 447, 448, 449,
	0, 450, 0, 268, 451, 452, 453, 269, 270, 474,
	0, 454, 271, 0, 0, 0, 0, 455, 456, 272,
	457, 458, 459, 0, 0, 273, 274, 275, 276, 0,
	277, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	278, 279, 280, 210, 211, 212, 213, 281, 214, 215,
	0, 282, 216, 217, 283, 284, 285, 0, 0, 218,
	219, 220, 0, 286, 221, 0, 0, 0, 287, 288,
	289, 290, 291, 0, 293, 294, 295, 292, 0, 296,
	0, 297, 298, 0, 0, 299, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 477, 304, 222,
	305, 223, 224, 0, 306, 0, 307, 0, 308, 0,
	0, 309, 310, 0, 311, 0, 0, 0, 225, 312,
	313, 315, 318, 314, 319, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 320, 321, 228, 229, 230, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 231,
	0, 232, 0, 326, 327, 328, 329, 330, 331, 2272,
	234, 0, 0, 235, 0, 0, 0, 335, 0, 332,
	0, 0, 333, 236, 334, 237, 238, 239, 240, 241,
	0, 242, 0, 336, 0, 0, 337, 338, 339, 0,
	243, 244, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 245, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 246,
	353, 0, 355, 356, 358, 357, 0, 0, 0, 0,
	247, 359, 248, 360, 361, 0, 362, 363, 0, 0,
	364, 365, 0, 0, 366, 249, 0, 367, 0, 250,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 251,
	376, 252, 377, 0, 378, 379, 380, 381, 382, 253,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 390, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 254, 402, 0, 406, 407, 408, 409,
	410, 411, 412, 0, 414, 415, 255, 256, 257, 258,
	413, 416, 417, 0, 418, 403, 404, 419, 0, 420,
	259, 260, 421, 0, 429, 422, 423, 424, 405, 425,
	428, 261, 426, 0, 427, 262, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 316, 437, 317, 438, 439,
	0, 263, 264, 265, 0, 0, 440, 441, 266, 267,
	0, 442, 443, 444, 445, 0, 0, 446, 447, 448,
	449, 0, 450, 0, 268, 451, 452, 453, 269, 270,
	474, 0, 454, 271, 0, 0, 0, 0, 455, 456,
	272, 457, 458, 459, 0, 0, 273, 274, 275, 276,
	0, 277, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 278, 279, 280, 210, 211, 212, 213, 281, 214,
	215, 0, 282, 216, 217, 283, 284, 285, 0, 0,
	218, 219, 220, 0, 286, 221, 0, 0, 0, 287,
	288, 289, 290, 291, 0, 293, 294, 295, 292, 0,
	296, 0, 297, 298, 0, 0, 299, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 302, 303, 477, 304,
	222, 305, 223, 224, 0, 306, 0, 307, 0, 308,
	0, 0, 309, 310, 0, 311, 0, 0, 0, 225,
	312, 313, 315, 318, 314, 319, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 228, 229, 230,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	231, 0, 232, 0, 326, 327, 328, 329, 330, 331,
	2270, 234, 0, 0, 235, 0, 0, 0, 335, 0,
	332, 0, 0, 333, 236, 334, 237, 238, 239, 240,
	241, 0, 242, 0, 336, 0, 0, 337, 338, 339,
	0, 243, 244, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 245, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	246, 353, 0, 355, 356, 358, 357, 0, 0, 0,
	0, 247, 359, 248, 360, 361, 0, 362, 363, 0,
	0, 364, 365, 0, 0, 366, 249, 0, 367, 0,
	250, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	251, 376, 252, 377, 0, 378, 379, 380, 381, 382,
	253, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 390, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 254, 402, 0, 406, 407, 408,
	409, 410, 411, 412, 0, 414, 415, 255, 256, 257,
	258, 413, 416, 417, 0, 418, 403, 404, 419, 0,
	420, 259, 260, 421, 0, 429, 422, 423, 424, 405,
	425, 428, 261, 426, 0, 427, 262, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 316, 437, 317, 438,
	439, 0, 263, 264, 265, 0, 0, 440, 441, 266,
	267, 0, 442, 443, 444, 445, 0, 0, 446, 447,
	448, 449, 0, 450, 0, 268, 451, 452, 453, 269,
	270, 474, 0, 454, 271, 0, 0, 0, 0, 455,
	456, 272, 457, 458, 459, 0, 0, 273, 274, 275,
	276, 0, 277, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 278, 279, 280, 210, 211, 212, 213, 281,
	214, 215, 0, 282, 216, 217, 283, 284, 285, 0,
	0, 218, 219, 220, 0, 286, 221, 0, 0, 0,
	287, 288, 289, 290, 291, 0, 293, 294, 295, 292,
	0, 296, 0, 297, 298, 0, 0, 299, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 302, 303, 477,
	304, 222, 305, 223, 224, 0, 306, 0, 307, 0,
	308, 0, 0, 309, 310, 0, 311, 0, 0, 0,
	225, 312, 313, 315, 318, 314, 319, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 320, 321, 228, 229,
	230, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 231, 0, 232, 0, 326, 327, 328, 329, 330,
	331, 2259, 234, 0, 0, 235, 0, 0, 0, 335,
	0, 332, 0, 0, 333, 236, 334, 237, 238, 239,
	240, 241, 0, 242, 0, 336, 0, 0, 337, 338,
	339, 0, 243, 244, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 245, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 246, 353, 0, 355, 356, 358, 357, 0, 0,
	0, 0, 247, 359, 248, 360, 361, 0, 362, 363,
	0, 0, 364, 365, 0, 0, 366, 249, 0, 367,
	0, 250, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 251, 376, 252, 377, 0, 378, 379, 380, 381,
	382, 253, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 390, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 254, 402, 0, 406, 407,
	408, 409, 410, 411, 412, 0, 414, 415, 255, 256,
	257, 258, 413, 416, 417, 0, 418, 403, 404, 419,
	0, 420, 259, 260, 421, 0, 429, 422, 423, 424,
	405, 425, 428, 261, 426, 0, 427, 262, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 316, 437, 317,
	438, 439, 0, 263, 264, 265, 0, 0, 440, 441,
	266, 267, 0, 442, 443, 444, 445, 0, 0, 446,
	447, 448, 449, 0, 450, 0, 268, 451, 452, 453,
	269, 270, 474, 0, 454, 271, 0, 0, 0, 0,
	455, 456, 272, 457, 458, 459, 0, 0, 273, 274,
	275, 276, 0, 277, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 278, 279, 280, 210, 211, 212, 213,
	281, 214, 215, 0, 282, 216, 217, 283, 284, 285,
	0, 0, 218, 219, 220, 0, 286, 221, 0, 0,
	0, 287, 288, 289, 290, 291, 0, 293, 294, 295,
	292, 0, 296, 0, 297, 298, 0, 0, 299, 300,
	301, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	477, 304, 222, 305, 223, 224, 0, 306, 0, 307,
	0, 308, 0, 0, 309, 310, 0, 311, 0, 0,
	0, 225, 312, 313, 315, 318, 314, 319, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 320, 321, 228,
	229, 230, 0, 322, 0, 323, 0, 0, 0, 324,
	0, 325, 231, 0, 232, 0, 326, 327, 328, 329,
	330, 331, 233, 234, 0, 0, 235, 0, 0, 0,
	335, 0, 332, 0, 0, 333, 236, 334, 237, 238,
	239, 240, 241, 0, 242, 0, 336, 0, 0, 337,
	338, 339, 0, 243, 244, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 245, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 246, 353, 0, 355, 356, 358, 357, 0,
	0, 0, 0, 247, 359, 248, 360, 361, 0, 362,
	363, 0, 0, 364, 365, 0, 0, 366, 249, 0,
	367, 0, 250, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 251, 376, 252, 377, 0, 378, 379, 380,
	381, 382, 253, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 390, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 254, 402, 0, 584,
	407, 408, 409, 410, 411, 412, 0, 414, 415, 255,
	256, 257, 258, 413, 416, 417, 0, 418, 403, 404,
	419, 0, 420, 259, 260, 421, 0, 429, 422, 423,
	424, 405, 425, 428, 261, 426, 0, 427, 262, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 316, 437,
	317, 438, 439, 0, 263, 264, 265, 0, 0, 440,
	441, 266, 267, 0, 442, 443, 444, 445, 0, 0,
	446, 447, 448, 449, 0, 450, 0, 268, 451, 452,
	453, 269, 270, 474, 0, 454, 271, 0, 0, 0,
	0, 455, 456, 272, 457, 458, 459, 0, 0, 273,
	274, 275, 276, 0, 277, 0, 0, 0, 0, 209,
	0, 1501, 0, 0, 278, 279, 280, 210, 211, 212,
	213, 281, 214, 215, 0, 282, 216, 217, 283, 284,
	285, 0, 0, 218, 219, 220, 0, 286, 221, 0,
	0, 0, 287, 288, 289, 290, 291, 0, 293, 294,
	295, 292, 0, 296, 0, 297, 298, 0, 0, 299,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 477, 304, 222, 305, 223, 224, 0, 306, 0,
	307, 0, 308, 0, 0, 309, 310, 0, 311, 0,
	0, 0, 225, 312, 313, 315, 318, 314, 319, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 320, 321,
	228, 229, 230, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 231, 0, 232, 0, 326, 327, 328,
	329, 330, 331, 233, 234, 0, 0, 235, 0, 0,
	0, 335, 0, 332, 0, 0, 333, 236, 334, 237,
	238, 239, 240, 241, 0, 242, 0, 336, 0, 0,
	337, 338, 339, 0, 243, 244, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 245, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 246, 353, 0, 355, 356, 358, 357,
	0, 0, 0, 0, 247, 359, 248, 360, 361, 0,
	362, 363, 0, 0, 364, 365, 0, 0, 366, 249,
	0, 367, 0, 250, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 251, 376, 252, 377, 0, 378, 379,
	380, 381, 382, 253, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 390, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 254, 402, 0,
	406, 407, 408, 409, 410, 411, 412, 0, 414, 415,
	255, 256, 257, 258, 413, 416, 417, 0, 0, 403,
	404, 419, 0, 420, 259, 260, 421, 0, 429, 422,
	423, 424, 405, 425, 428, 261, 426, 0, 427, 262,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 316,
	437, 317, 438, 439, 0, 263, 264, 265, 0, 0,
	440, 441, 266, 267, 0, 442, 443, 444, 445, 0,
	0, 446, 447, 448, 449, 0, 450, 0, 268, 451,
	452, 453, 269, 270, 474, 0, 454, 271, 0, 0,
	0, 0, 455, 456, 272, 457, 458, 459, 0, 0,
	273, 274, 275, 276, 0, 277, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 278, 279, 280, 210, 211,
	212, 213, 281, 214, 215, 0, 282, 216, 217, 283,
	284, 285, 0, 0, 218, 219, 220, 0, 286, 221,
	0, 0, 0, 287, 288, 289, 290, 291, 0, 293,
	294, 295, 292, 0, 296, 0, 297, 298, 0, 0,
	299, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 477, 304, 222, 305, 223, 224, 0, 306,
	0, 307, 0, 308, 0, 0, 309, 310, 0, 311,
	0, 0, 0, 225, 312, 313, 315, 318, 314, 319,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 320,
	321, 228, 229, 230, 0, 322, 0, 323, 0, 0,
	0, 324, 0, 325, 231, 0, 232, 0, 326, 327,
	328, 329, 330, 331, 1492, 234, 0, 0, 235, 0,
	0, 0, 335, 0, 332, 0, 0, 333, 236, 334,
	237, 238, 239, 240, 241, 0, 242, 0, 336, 0,
	0, 337, 338, 339, 0, 243, 244, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 245, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 246, 353, 0, 355, 356, 358,
	357, 0, 0, 0, 0, 247, 359, 248, 360, 361,
	0, 362, 363, 0, 0, 364, 365, 0, 0, 366,
	249, 0, 367, 0, 250, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 251, 376, 252, 377, 0, 378,
	379, 380, 381, 382, 253, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 390, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 254, 402,
	0, 406, 407, 408, 409, 410, 411, 412, 0, 414,
	415, 255, 256, 257, 258, 413, 416, 417, 0, 418,
	403, 404, 419, 0, 420, 259, 260, 421, 0, 429,
	422, 423, 424, 405, 425, 428, 261, 426, 0, 427,
	262, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	316, 437, 317, 438, 439, 0, 263, 264, 265, 0,
	0, 440, 441, 266, 267, 0, 442, 443, 444, 445,
	0, 0, 446, 447, 448, 449, 0, 450, 0, 268,
	451, 452, 453, 269, 270, 474, 0, 454, 271, 0,
	0, 0, 0, 455, 456, 272, 457, 458, 459, 0,
	0, 273, 274, 275, 276, 0, 277, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 278, 279, 280, 210,
	211, 212, 213, 281, 214, 215, 0, 282, 216, 217,
	283, 284, 285, 0, 0, 218, 219, 220, 0, 286,
	221, 0, 0, 0, 287, 288, 289, 290, 291, 0,
	293, 294, 295, 292, 0, 296, 0, 297, 298, 0,
	0, 299, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 477, 304, 222, 305, 223, 224, 0,
	306, 0, 307, 0, 308, 0, 0, 309, 310, 0,
	311, 0, 0, 0, 225, 312, 313, 315, 318, 314,
	319, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	320, 321, 228, 229, 230, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 231, 0, 232, 0, 326,
	327, 328, 329, 330, 331, 233, 234, 0, 0, 235,
	0, 0, 0, 335, 0, 332, 0, 0, 333, 236,
	334, 237, 238, 239, 240, 241, 0, 242, 0, 336,
	0, 0, 337, 338, 339, 0, 243, 244, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 245, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 246, 353, 0, 355, 356,
	358, 357, 0, 0, 0, 0, 247, 359, 248, 360,
	361, 0, 362, 363, 0, 0, 364, 365, 0, 0,
	366, 249, 0, 367, 0, 250, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 251, 376, 252, 377, 0,
	378, 379, 380, 381, 382, 253, 868, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 390, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 254,
	402, 0, 406, 407, 408, 409, 410, 411, 412, 0,
	414, 415, 255, 256, 257, 258, 413, 416, 417, 0,
	418, 403, 404, 419, 0, 420, 259, 260, 421, 0,
	429, 422, 423, 424, 405, 425, 428, 261, 426, 0,
	427, 262, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 316, 437, 317, 438, 439, 0, 263, 264, 265,
	0, 0, 440, 441, 266, 267, 0, 442, 443, 444,
	445, 0, 0, 446, 447, 448, 449, 0, 450, 0,
	268, 451, 452, 453, 269, 270, 474, 0, 454, 271,
	0, 0, 0, 0, 455, 456, 272, 457, 458, 459,
	0, 0, 273, 274, 275, 276, 0, 277, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 278, 279, 280,
	210, 211, 212, 213, 281, 214, 215, 0, 282, 216,
	217, 283, 284, 285, 0, 0, 218, 219, 220, 0,
	286, 221, 0, 0, 0, 287, 288, 289, 290, 291,
	0, 293, 294, 295, 292, 0, 296, 0, 297, 298,
	0, 0, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 477, 304, 222, 305, 223, 224,
	0, 306, 0, 307, 0, 308, 0, 0, 309, 310,
	0, 311, 0, 0, 0, 225, 312, 313, 315, 318,
	314, 319, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 320, 321, 228, 229, 230, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 231, 0, 232, 0,
	326, 327, 328, 329, 330, 331, 233, 234, 0, 0,
	235, 0, 0, 0, 335, 0, 332, 0, 0, 333,
	236, 334, 237, 238, 239, 240, 241, 0, 242, 0,
	336, 0, 0, 337, 338, 339, 0, 243, 244, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 245, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 246, 353, 0, 355,
	356, 358, 357, 0, 0, 0, 0, 247, 359, 248,
	360, 361, 0, 362, 363, 0, 0, 364, 365, 0,
	0, 366, 249, 0, 367, 0, 250, 368, 369, 370,
	0, 372, 373, 374, 0, 375, 251, 376, 252, 377,
	0, 378, 379, 380, 0, 382, 253, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 390, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	254, 0, 0, 406, 407, 408, 409, 410, 411, 412,
	0, 414, 415, 255, 256, 257, 258, 413, 416, 417,
	0, 418, 403, 404, 419, 0, 420, 259, 260, 421,
	0, 429, 422, 423, 424, 405, 425, 428, 261, 426,
	0, 427, 262, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 316, 437, 317, 438, 439, 0, 263, 264,
	265, 0, 0, 440, 441, 266, 267, 0, 442, 443,
	444, 445, 0, 0, 446, 447, 448, 449, 0, 450,
	0, 268, 451, 452, 453, 269, 270, 0, 0, 454,
	271, 0, 0, 0, 0, 455, 456, 272, 457, 458,
	459, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1249,
	1250, 0, 1282, 1283, 1284, 1292, 1293, 1294, 0, 0,
	0, 1251, 0, 0, 0, 0, 0, 1285, 0, 1271,
	0, 0, 0, 0, 1252, 0, 1268, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1251,
	0, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 1268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1274, 1275, 1276, 1277,
	0, 0, 0, 0, 0, 1257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1289, 1299, 0,
	1279, 1280, 1281, 0, 1274, 1275, 1276, 1277, 0, 0,
	0, 0, 0, 1257, 0, 0, 0, 0, 0, 0,
	1295, 1296, 0, 0, 0, 0, 0, 0, 1266, 1267,
	0, 0, 0, 0, 0, 1289, 1299, 0, 1279, 1280,
	1281, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1296,
	0, 0, 0, 0, 1297, 0, 1266, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1286, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292,
	1293, 1294, 1278, 0, 1290, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 1252, 1273,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 1251, 0, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 0,
	0, 0, 0, 0, 0, 0, 0, 2152, 1274, 1275,
	1276, 1277, 0, 0, 0, 0, 0, 1257, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 0, 0, 1289,
	1299, 0, 1279, 1280, 1281, 2151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 1296, 0, 0, 0, 0, 0, 0,
	1266, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1249, 1250, 0,
	1282, 1283, 1284, 1292, 1293, 1294, 1278, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 1252, 1273, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1249, 1250, 0, 1282, 1283,
	1284, 1292, 1293, 1294, 0, 0, 1290, 1251, 0, 0,
	0, 0, 0, 1285, 0, 1271, 0, 0, 0, 0,
	1252, 0, 1268, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1251, 0, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1274, 1275, 1276, 1277, 0, 0, 0, 0,
	0, 1257, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 0, 0, 1289, 1299, 0, 1279, 1280, 1281, 2150,
	1274, 1275, 1276, 1277, 0, 0, 0, 0, 0, 1257,
	0, 0, 0, 0, 0, 0, 1295, 1296, 0, 0,
	0, 0, 0, 0, 1266, 1267, 0, 0, 0, 0,
	0, 1289, 1299, 0, 1279, 1280, 1281, 1287, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 1296, 0, 0, 0, 0,
	1297, 0, 1266, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 1287, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1249,
	1250, 0, 1282, 1283, 1284, 1292, 1293, 1294, 1278, 0,
	1290, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 1252, 1273, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 1251,
	0, 0, 0, 0, 0, 1249, 1250, 1271, 1282, 1283,
	1284, 1292, 1293, 1294, 1268, 0, 0, 0, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	1252, 0, 0, 1298, 0, 0, 1288, 0, 0, 1263,
	1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 1251, 0, 0, 0, 2940,
	0, 0, 0, 1271, 1274, 1275, 1276, 1277, 0, 0,
	1268, 0, 0, 1257, 1288, 0, 0, 1263, 1264, 1270,
	1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255,
	1256, 1258, 1259, 0, 0, 1289, 1299, 2936, 1279, 1280,
	1281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1296,
	1274, 1275, 1276, 1277, 0, 0, 1266, 1267, 0, 1257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 1289, 1299, 0, 1279, 1280, 1281, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 1296, 1286, 0, 0, 0,
	0, 0, 1266, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	0, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 1249,
	1250, 0, 1282, 1283, 1284, 1292, 1293, 1294, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 1252, 1273, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1249, 1250, 0,
	1282, 1283, 1284, 1292, 1293, 1294, 0, 0, 1290, 1251,
	0, 0, 0, 0, 0, 1285, 0, 1271, 0, 0,
	0, 0, 1252, 0, 1268, 1298, 0, 0, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 1251, 0, 0,
	0, 2876, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1274, 1275, 1276, 1277, 0, 0,
	0, 0, 0, 1257, 1288, 0, 0, 1263, 1264, 1270,
	1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255,
	1256, 1258, 1259, 0, 0, 1289, 1299, 2825, 1279, 1280,
	1281, 0, 1274, 1275, 1276, 1277, 0, 0, 0, 0,
	0, 1257, 0, 0, 0, 0, 0, 0, 1295, 1296,
	0, 0, 0, 0, 0, 0, 1266, 1267, 0, 0,
	0, 0, 0, 1289, 1299, 0, 1279, 1280, 1281, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1295, 1296, 0, 0,
	0, 0, 1297, 0, 1266, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 1287, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 1286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294,
	1278, 0, 1290, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1252, 1273, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 1251, 0, 0, 0, 0, 0, 1249, 1250, 1271,
	1282, 1283, 1284, 1292, 1293, 1294, 1268, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 1298, 0, 0, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 1251, 0, 0,
	0, 2792, 0, 0, 0, 1271, 1274, 1275, 1276, 1277,
	0, 0, 1268, 0, 0, 1257, 1288, 0, 0, 1263,
	1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 0, 0, 1289, 1299, 2786,
	1279, 1280, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 1296, 1274, 1275, 1276, 1277, 0, 0, 1266, 1267,
	0, 1257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 1289, 1299, 0, 1279, 1280, 1281, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1295, 1296, 1286, 0,
	0, 0, 0, 0, 1266, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 1286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1252, 1273, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1249,
	1250, 0, 1282, 1283, 1284, 1292, 1293, 1294, 0, 0,
	1290, 1251, 0, 0, 0, 0, 0, 1285, 0, 1271,
	0, 0, 0, 0, 1252, 0, 1268, 1298, 0, 0,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 1251,
	0, 0, 0, 2780, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 1268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1274, 1275, 1276, 1277,
	0, 0, 0, 0, 0, 1257, 1288, 0, 0, 1263,
	1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 0, 0, 1289, 1299, 2698,
	1279, 1280, 1281, 0, 1274, 1275, 1276, 1277, 0, 0,
	0, 0, 0, 1257, 0, 0, 0, 0, 0, 0,
	1295, 1296, 0, 0, 0, 0, 0, 0, 1266, 1267,
	0, 0, 0, 0, 0, 1289, 1299, 0, 1279, 1280,
	1281, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1296,
	0, 0, 0, 0, 1297, 0, 1266, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1286, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292,
	1293, 1294, 1278, 0, 1290, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 1252, 1273,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 1251, 0, 0, 0, 0, 0, 1249,
	1250, 1271, 1282, 1283, 1284, 1292, 1293, 1294, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 1252, 0, 0, 1298, 0, 0,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 1251,
	0, 0, 0, 2653, 0, 0, 0, 1271, 1274, 1275,
	1276, 1277, 0, 0, 1268, 0, 0, 1257, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 0, 0, 1289,
	1299, 2652, 1279, 1280, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 1296, 1274, 1275, 1276, 1277, 0, 0,
	1266, 1267, 0, 1257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 1289, 1299, 0, 1279, 1280,
	1281, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1296,
	1286, 0, 0, 0, 0, 0, 1266, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 0, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292,
	1293, 1294, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 1252, 1273,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294,
	0, 0, 1290, 1251, 0, 0, 0, 0, 0, 1285,
	0, 1271, 0, 0, 0, 0, 1252, 0, 1268, 1298,
	0, 0, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 1251, 0, 0, 0, 2624, 0, 0, 0, 1271,
	0, 0, 0, 0, 0, 0, 1268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1274, 1275,
	1276, 1277, 0, 0, 0, 0, 0, 1257, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 0, 0, 1289,
	1299, 2446, 1279, 1280, 1281, 0, 1274, 1275, 1276, 1277,
	0, 0, 0, 0, 0, 1257, 0, 0, 0, 0,
	0, 0, 1295, 1296, 0, 0, 0, 0, 0, 0,
	1266, 1267, 0, 0, 0, 0, 0, 1289, 1299, 0,
	1279, 1280, 1281, 1287, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 1296, 0, 0, 0, 0, 1297, 0, 1266, 1267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1249, 1250, 0, 1282, 1283,
	1284, 1292, 1293, 1294, 1278, 0, 1290, 0, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	1252, 1273, 0, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 1251, 0, 0, 0, 0,
	0, 1249, 1250, 1271, 1282, 1283, 1284, 1292, 1293, 1294,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 1298,
	0, 0, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 1251, 0, 0, 0, 2419, 0, 0, 0, 1271,
	1274, 1275, 1276, 1277, 0, 0, 1268, 0, 0, 1257,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 0,
	0, 1289, 1299, 1766, 1279, 1280, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 1296, 1274, 1275, 1276, 1277,
	0, 0, 1266, 1267, 0, 1257, 3018, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 1289, 1299, 0,
	1279, 1280, 1281, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 1296, 1286, 0, 0, 0, 0, 0, 1266, 1267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3017, 0, 1290, 0,
	0, 0, 0, 0, 0, 1249, 1250, 0, 1282, 1283,
	1284, 1292, 1293, 1294, 1278, 0, 0, 0, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 2092, 0,
	1252, 1273, 0, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1249, 1250, 0, 1282, 1283, 1284, 1292,
	1293, 1294, 0, 0, 1290, 1251, 0, 0, 0, 0,
	0, 1285, 0, 1271, 0, 0, 0, 0, 1252, 0,
	1268, 1298, 0, 0, 1288, 0, 0, 1263, 1264, 1270,
	1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255,
	1256, 1258, 1259, 1251, 0, 2119, 0, 2093, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1274, 1275, 1276, 1277, 0, 0, 0, 0, 0, 1257,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 0,
	0, 1289, 1299, 0, 1279, 1280, 1281, 0, 1274, 1275,
	1276, 1277, 0, 0, 0, 0, 0, 1257, 0, 2199,
	0, 0, 2198, 0, 1295, 1296, 0, 0, 0, 0,
	0, 0, 1266, 1267, 0, 0, 0, 0, 0, 1289,
	1299, 0, 1279, 1280, 1281, 1287, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 1296, 0, 0, 0, 0, 1297, 0,
	1266, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 1287, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 0, 0,
	0, 1864, 0, 0, 0, 0, 0, 1249, 1250, 0,
	1282, 1283, 1284, 1292, 1293, 1294, 1278, 0, 1290, 0,
	0, 0, 0, 0, 0, 1285, 0, 0, 0, 1863,
	0, 0, 1252, 1273, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 1251, 0, 0,
	0, 0, 0, 1249, 1250, 1271, 1282, 1283, 1284, 1292,
	1293, 1294, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 1252, 0,
	0, 1298, 0, 0, 1288, 0, 0, 1263, 1264, 1270,
	1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255,
	1256, 1258, 1259, 1251, 0, 0, 0, 0, 0, 0,
	0, 1271, 1274, 1275, 1276, 1277, 0, 0, 1268, 0,
	0, 1257, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 0, 0, 1289, 1299, 0, 1279, 1280, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1295, 1296, 1274, 1275,
	1276, 1277, 0, 0, 1266, 1267, 0, 1257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 1289,
	1299, 0, 1279, 1280, 1281, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 1296, 1286, 0, 0, 0, 0, 0,
	1266, 1267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	1286, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 1249, 1250, 0,
	1282, 1283, 1284, 1292, 1293, 1294, 1278, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 1252, 1273, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1249, 1250, 0, 1282, 1283,
	1284, 1292, 1293, 1294, 0, 0, 1290, 1251, 0, 0,
	0, 0, 0, 1285, 0, 1271, 0, 0, 0, 0,
	1252, 0, 1268, 1298, 0, 0, 1288, 0, 0, 1263,
	1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 1251, 0, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1274, 1275, 1276, 1277, 0, 0, 0, 0,
	0, 1257, 1288, 0, 0, 1263, 1264, 1270, 1269, 1265,
	1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258,
	1259, 0, 0, 1289, 1299, 0, 1279, 1280, 1281, 0,
	1274, 1275, 1276, 1277, 0, 0, 0, 0, 0, 1257,
	0, 0, 0, 0, 2208, 0, 1295, 1296, 0, 0,
	0, 0, 0, 0, 1266, 1267, 0, 0, 0, 0,
	0, 1289, 1299, 0, 1279, 1280, 1281, 1287, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 1296, 0, 0, 0, 0,
	1297, 0, 1266, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 1287, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1249,
	1250, 0, 1282, 1283, 1284, 1292, 1293, 1294, 1278, 0,
	1290, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 2203, 0, 0, 1252, 1273, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2423, 0, 0, 0, 0, 0, 1290, 1251,
	0, 0, 0, 0, 0, 1249, 1250, 1271, 1282, 1283,
	1284, 1292, 1293, 1294, 1268, 0, 0, 0, 0, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	1252, 0, 0, 1298, 0, 0, 1288, 0, 0, 1263,
	1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 1251, 0, 0, 0, 0,
	0, 0, 0, 1271, 1274, 1275, 1276, 1277, 0, 0,
	1268, 0, 0, 1257, 1288, 0, 0, 1263, 1264, 1270,
	1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255,
	1256, 1258, 1259, 0, 0, 1289, 1299, 0, 1279, 1280,
	1281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1296,
	1274, 1275, 1276, 1277, 0, 0, 1266, 1267, 0, 1257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 1289, 1299, 0, 1279, 1280, 1281, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 1296, 1286, 0, 0, 0,
	0, 0, 1266, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	0, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2165, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 1249,
	1250, 0, 1282, 1283, 1284, 1292, 1293, 1294, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 2149, 0, 0, 1252, 1273, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1249, 1250, 0,
	1282, 1283, 1284, 1292, 1293, 1294, 0, 0, 1290, 1251,
	0, 0, 0, 0, 0, 1285, 0, 1271, 0, 0,
	0, 0, 1252, 0, 1268, 1298, 0, 0, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 1251, 0, 0,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1274, 1275, 1276, 1277, 0, 0,
	0, 0, 0, 1257, 1288, 0, 0, 1263, 1264, 1270,
	1269, 1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255,
	1256, 1258, 1259, 0, 0, 1289, 1299, 0, 1279, 1280,
	1281, 0, 1274, 1275, 1276, 1277, 0, 0, 0, 0,
	0, 1257, 0, 0, 0, 0, 0, 0, 1295, 1296,
	0, 0, 0, 0, 0, 0, 1266, 1267, 0, 0,
	0, 0, 0, 1289, 1299, 0, 1279, 1280, 1281, 1287,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1295, 1296, 0, 0,
	0, 0, 1297, 0, 1266, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 1287, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 1286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1249, 1250, 0, 1282, 1283, 1284, 1292, 1293, 1294,
	1278, 0, 1290, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1252, 1273, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 1251, 0, 0, 0, 0, 0, 1249, 1250, 1271,
	1282, 1283, 1284, 1292, 1293, 1294, 1268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 1298, 0, 0, 1288, 0,
	0, 1263, 1264, 1270, 1269, 1265, 1291, 0, 1262, 1260,
	1261, 1253, 1254, 1255, 1256, 1258, 1259, 1251, 0, 0,
	0, 0, 0, 0, 0, 1271, 1274, 1275, 1276, 1277,
	0, 0, 1268, 0, 0, 1257, 1288, 0, 0, 1263,
	1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 0, 0, 1289, 1299, 0,
	1279, 1280, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 1296, 1274, 1275, 1276, 1277, 0, 0, 1266, 1267,
	0, 1257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 1289, 1299, 0, 1279, 1280, 1281, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1295, 1296, 0, 0,
	0, 0, 0, 0, 1266, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 1249, 1250, 0, 1282, 1283, 1284,
	1292, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 1252,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1251, 0, 0, 1273, 0, 0,
	0, 0, 1271, 0, 0, 0, 0, 0, 0, 1268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 0, 0, 1263, 1264, 1270, 1269, 1265, 1291, 0,
	1262, 1260, 1261, 1253, 1254, 1255, 1256, 1258, 1259, 1274,
	1275, 1276, 1277, 0, 0, 0, 0, 0, 1257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1551, 0,
	1289, 1299, 0, 1279, 1280, 1281, 1288, 0, 0, 1263,
	1264, 1270, 1269, 1265, 1291, 0, 1262, 1260, 1261, 1253,
	1254, 1255, 1256, 1258, 1259, 0, 0, 0, 0, 0,
	0, 1266, 1267, 1562, 1547, 1552, 1535, 1572, 1571, 0,
	0, 1537, 1536, 0, 1287, 0, 0, 0, 1580, 1579,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1573, 0,
	1569, 1568, 0, 0, 0, 0, 0, 0, 0, 0,
	1567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 0, 1566, 1564, 1565, 0, 0,
	0, 0, 0, 0, 1273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1546, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 1555, 1550, 1556, 1557, 1558, 1559, 1560, 0,
	1554, 0, 0, 0, 0, 0, 0, 0, 0, 1577,
	1578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1570, 0, 0, 0, 1548, 1549, 0, 0, 0,
	0, 0, 1551, 1288, 0, 0, 1263, 1264, 1270, 1269,
	1265, 1291, 0, 1262, 1260, 1261, 1253, 1254, 1255, 1256,
	1258, 1259, 0, 0, 0, 0, 0, 0, 1563, 0,
	0, 0, 1687, 1685, 1686, 1689, 1688, 1562, 1547, 1552,
	1535, 1572, 1571, 0, 0, 1537, 1536, 0, 0, 0,
	0, 0, 1580, 1579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1540, 1541, 1542, 1543, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1561,
	1544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1582, 0, 1573, 0, 1569, 1568, 0, 0, 0, 0,
	0, 0, 0, 0, 1567, 0, 0, 1538, 0, 0,
	1574, 1575, 1576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1566,
	1564, 1565, 0, 1545, 0, 0, 0, 0, 1581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1555, 1550, 1556, 1557,
	1558, 1559, 1560, 0, 1554, 0, 0, 0, 0, 0,
	0, 0, 0, 1577, 1578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1570, 0, 0, 0, 1548,
	1549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1540,
	1541, 1542, 1543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1561, 1544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1538, 0, 0, 1574, 1575, 1576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1545, 0, 0,
	0, 0, 1581,
}
var sqlPact = [...]int{

	3764, -1000, 9, -1000, -1000, -1000, 260, -1000, -1000, -1000,
	-1000, 257, 256, 254, -1000, 253, 252, 250, 246, 245,
	244, 243, 232, 229, 228, 224, -1000, -1000, 218, -1000,
	-1000, -1000, -1000, 216, 215, 214, -1000, 213, 1333, 29580,
	211, 204, 1557, 46844, 1490, 202, 191, -1000, 186, 2845,
	34445, 1126, 1590, -1000, 185, 179, 2066, 46473, 3526, 32189,
	1310, 1916, 46096, 29203, 1915, 31812, 45719, -1000, -1000, 1044,
	-1000, -1000, 45342, 177, 176, 175, 174, 164, -1000, 161,
	44965, 157, 155, 147, 146, 145, 144, 143, 141, -1000,
	138, 136, 133, 132, 129, 126, 120, 118, 116, 114,
	113, 112, 108, 105, 96, 92, -1000, 5720, 91, 90,
	88, -1000, 1308, 85, 80, 79, 76, 69, -1000, -1000,
	67, 66, 63, 59, 58, 57, 130, 55, 54, 53,
	52, 51, -1000, 1204, 527, 3099, 11930, 1247, 1241, 1239,
	1238, 1237, 781, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49441, 46844, 48, -28, 47, -1000, 2253, 775, 22371,
	3764, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 34068, 33691, 33314, 27713, 44588, 44211, 9114, 9114,
	936, -1000, -1000, -1000, -1000, -1000, 4, 30693, 46844, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 306, -1000, -1000, -1000, -1000, -1000, 18485, 18071, 447,
	-1000, -1000, -1000, 298, -1000, -1000, -1000, -1000, 1267, -1000,
	-1000, -1000, -1000, 43834, 43457, 43080, 27326, 26939, 42703, 1716,
	1704, 42326, -1000, -1000, 41949, -1000, -1000, 2097, 1883, 1848,
	32937, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41578, 41201, 40824, 40447, 40070, 26552, 26165, 629, -1000, -1000,
	-1000, -1000, 23125, -1000, -1000, -1000, -1000, -1000, 46, -1000,
	44, 43, -1000, 41, 38, 35, 34, 33, 32, 26,
	23, -1000, 21, 20, -1000, 18, 16, -1000, 13, 12,
	2722, 1409, 1506, 39693, 1031, 1488, -20, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 46844, -1000, 18885, -1000, 624, -1000,
	1962, -1000, 18885, -1000, 1485, 117, 1386, -1000, -1000, -1000,
	1305, 1064, -1000, -1000, 46844, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2532, 1380, 622, 39316, -1000, 1703, -1000, 740,
	12730, -1000, 928, -1000, 12730, 297, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1623, 2213, 2466, 25778, 1385, 2345, 2062, 2530,
	1644, 2046, 2034, 2022, 2016, 1994, 2529, 1128, 2528, 1017,
	852, 2527, 1989, 1982, 2505, 1438, 862, 2525, 2524, 1981,
	1954, -1000, -1000, -1000, -1000, 975, -1000, -1000, -1000, -1000,
	-1000, -1000, 35929, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1204, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1603, 2273, 2273, 2273, 2382,
	425, 411, -1000, 130, -1000, 1464, -1000, 1372, -1000, -1000,
	-1000, 54387, -1000, -1000, 18885, 18885, 18885, 18885, 18885, 1306,
	-1000, -1000, -1000, 655, -1000, 617, 613, 10315, -1000, -1000,
	2439, -1000, -1000, -1000, 441, -1000, -1000, 18885, -1000, 296,
	-1000, -1000, -1000, -1000, 610, 2513, -1000, 831, -1000, -1000,
	-1000, 721, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1991,
	568, 567, -1000, 564, 563, -1000, -1000, -1000, 608, 607,
	606, 596, 594, 593, -1000, 1183, -1000, 782, -1000, -1000,
	782, 782, -1000, 528, 528, 587, 586, 535, -1000, -1000,
	583, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 582,
	528, 581, 576, -1000, -1000, -1000, 575, 706, 716, -1000,
	574, 573, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1467, -1000, -1000, 1467, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 935, 48328, -1000, -1000, -1000, -3, 46844, -1000,
	447, -3, -1000, -1000, 572, -1000, 13544, 13544, 13544, -1000,
	-1000, 1483, 18885, -1000, 2158, -1000, 3423, -212, 569, 23502,
	695, 695, -1000, 21240, 545, 25391, -1000, 568, 567, 564,
	563, -1000, 293, -1000, -1000, -1000, -1000, -1000, 1651, 2107,
	955, -1000, 1125, 2106, -1000, 3158, 2104, 1120, -1000, -1000,
	756, 2089, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1350, -1000, -1000, 1314, 2087, -197, 2020, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1507, -1000, 28084, 30693,
	-4, -1000, -1000, -138, -1000, 8729, 54387, -1000, 54387, -1000,
	1953, 46844, 9114, 46844, 46844, -1000, 546, 1553, 1478, -1000,
	-1000, 3158, 1552, -1000, -1000, 752, 1547, -1000, -1000, 1544,
	-1000, 447, -1000, -1000, 38939, 49070, 752, 1543, -1000, -1000,
	-1000, 35929, -1000, 46844, -1000, 46844, -1000, 1043, -1000, 48699,
	150, 2081, -1000, -1000, 150, 2079, -1000, 150, 2073, -1000,
	137, 2071, -1000, -1000, 1405, 2069, -1000, -145, 2068, -1000,
	-1000, -145, 2065, -1000, -1000, 18885, -17, -1000, -1000, -1000,
	775, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38562, 30322,
	46844, 32560, 746, 54387, 2425, 55308, 28084, 54387, 30322, 46844,
	1987, -1000, 38185, 37808, 2325, 739, -1000, -1000, 46844, -1000,
	18885, -1000, 2423, 1700, -73, -1000, -1000, -1000, -1000, -1000,
	1612, 1600, 858, 1210, -1000, 12730, 12730, 2196, -1000, 284,
	9114, -1000, -1000, 996, -1000, -1000, -1000, -1000, -1000, 37431,
	-1000, -1000, -1000, 1369, 46844, -1000, -1000, 1986, -1000, 29951,
	46844, -1000, 46844, -1000, 46844, -1000, 46844, -1000, 46844, -1000,
	-1000, -1000, -1000, -1000, 2194, 1190, 1983, -1000, 46844, -1000,
	46844, -1000, -1000, -1000, 1608, -1000, -1000, -1000, 37060, 36683,
	36306, -1000, -1000, 1141, -1000, 990, -1000, -1000, 152, -1000,
	-1000, 1603, -1000, 1494, 1685, 17657, 1659, 18885, 130, -1000,
	-1000, 130, 130, 11516, -1000, -1000, -1000, 46844, -1000, 55074,
	55308, 9114, 954, 18885, 18885, 18885, 18885, 18885, 18885, 18885,
	18885, 18885, 18885, 18885, 18885, 18885, 18885, 18885, 18885, 18885,
	18885, 18885, 18885, 18885, 18885, 18885, 18885, 18885, 18885, 18885,
	18885, 18885, 18885, 18885, 18885, 18885, 18885, 18885, 1746, 18885,
	934, 18885, 18885, 18885, 18885, 1345, -1000, -1000, 1300, 481,
	1356, -1000, 2460, 2460, 2460, 54697, 54697, 491, 655, -1000,
	18885, -1000, 305, 18885, 411, 52581, -1, 9915, -1000, -1000,
	-1000, -1000, 17243, 776, 54387, 8344, 9501, -1000, 2499, 1197,
	2000, 1792, 541, 705, 703, 702, 529, 18885, 18885, 18885,
	18885, 18885, 18885, -1000, -1000, -1000, -1000, -1000, -1000, 2439,
	-1000, 16843, 16429, -1000, 2498, 16015, 15601, -1000, 15187, 20085,
	14773, 953, 949, 944, 18885, 10715, -1000, -73, -1000, 48328,
	-1000, 46844, -3, 2421, 18885, 109, -1000, 53437, -1000, 109,
	109, 540, -18, 54387, 1662, 1661, 22748, 1673, 1307, 1307,
	1307, -1000, 539, 645, 695, 6400, 14359, 537, 695, 695,
	131, 34816, 1361, 34816, 300, 407, 20863, 2158, -1000, -1000,
	46844, 9114, -38, 1258, -1000, 31435, 2291, 2275, 2229, 1041,
	-1000, 2373, 35929, 2401, 305, 2302, 1937, -1000, -1000, 932,
	35929, 3158, -1000, 55308, -1000, 1698, 2371, 1084, 1096, 1084,
	1084, 1080, 35929, 930, 1229, 28084, 2295, 929, -55, 2399,
	305, 2288, 1933, 926, -1000, -1000, 46844, 9114, 2268, 987,
	680, -4, 30693, 46844, 276, -1000, 1013, -23, 275, 1670,
	1669, 131, -1000, 31064, 2419, 2063, 46844, -1000, 3158, 2057,
	-1000, 1211, -1000, 2054, 2052, 2418, 1477, 1536, -1000, -1000,
	-1000, 1470, 1533, 964, 2051, 767, 365, 2408, 365, 24637,
	-1000, 46844, -1000, 46844, -1000, -1000, 46844, -1000, 46844, -1000,
	46844, -1000, 46844, 46844, -1000, 46844, 28084, 28084, 28084, -25,
	4938, 28826, 916, -65, -1000, 802, 31064, 367, -32, -1000,
	989, -1000, -1000, -1000, 309, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 782, 536, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 535, 1183, 528, 528,
	528, -1000, -1000, -1000, 706, 716, -1000, -1000, -1000, 782,
	782, -1000, -1000, -180, 1931, -138, 32560, 680, -1000, 680,
	-1000, 1974, -1000, 2276, 719, -37, 835, -73, -1000, 1467,
	-1000, 1414, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2512, -1000, 2493, -1000, -1000,
	2497, -5, -1000, -5, -1000, 9114, -1000, 46844, -1000, -1000,
	-1000, -1000, -1000, -1000, 46844, -1000, 46844, -1000, -1000, -1000,
	-1000, -1000, -1000, 3000, -1000, 1967, -1000, 4938, 273, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 46844, 46844, 46844,
	-1000, 35929, -1000, -1000, -1000, -1000, 54387, -1000, 446, -1000,
	-1000, 54387, 1101, 1679, -1000, 1679, -6, -1000, 53145, 1653,
	46844, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 738, 538, 538, 1021, 1021, 1021, 1021,
	2414, 866, 247, 3187, 5096, 5096, 5096, 5096, 5096, 5096,
	5096, 5096, 830, 440, 440, 830, 830, 830, 830, 830,
	440, 440, 440, 5096, 5096, 5096, 54697, 54641, 4994, 18885,
	18885, 912, 1289, 481, 4994, 18885, 4994, 4994, 4994, 4994,
	-1000, 1990, -1000, -1000, -1000, -1000, 1919, 526, 20085, 20085,
	-1000, -1000, -1000, 10315, 18885, -1000, -1000, -1000, -1000, 524,
	18885, -1000, 52835, -234, 405, -181, -1000, 18885, 644, -34,
	-1000, 1045, -1000, 18885, 272, -1000, -1000, -26, 18885, 18885,
	18885, 394, -1000, 392, -1000, 911, -1000, 908, 907, 897,
	-1000, 523, 1352, 522, 520, 18885, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 54349, 50483, 50229, 50191, 5923, -42,
	-45, 387, -1000, 1898, -181, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 386, -1000, 375, -48, -1000, -50, -1000, 374,
	-1000, 54095, -181, 373, 5164, -1000, 20085, 20085, 20085, 10315,
	519, 371, -1000, 53183, -1000, 737, 736, 734, 54039, 13945,
	13945, 13945, 370, 53785, 18885, -181, -1000, -1000, 518, -53,
	767, 13544, 21994, 9114, -1000, 767, 767, 18885, -1000, 18885,
	22748, 22748, 1681, 1648, 22748, -1000, -1000, -1000, -1000, 34816,
	677, 695, 34816, -1000, 2439, 1643, -1000, 369, -1000, 13144,
	34816, 34816, 9114, -1000, -1000, 46844, 447, -1000, -1000, 695,
	368, 270, 1233, 46844, 46844, 46844, -1000, -1000, 1532, 47957,
	1530, 55308, 46844, -1000, -1000, 517, 516, 1646, 1645, 46844,
	46844, 47586, 47215, 46844, 1388, 1476, 1323, 305, -1000, 730,
	514, 46844, 1117, -1000, -1000, -1000, -1000, -1000, 46844, -1000,
	-1000, 2496, -1000, 1084, -1000, -1000, -1000, 1084, 3158, 1107,
	46844, 28084, 754, 724, 46844, 1255, 305, -1000, 717, 512,
	9114, 1153, -1000, 714, 46844, 1758, -1000, 1505, -1000, -1000,
	7959, -1000, -1000, 9114, 1736, 1736, 363, -11, -1000, -1000,
	-1000, -1000, -1000, -1000, 1692, 46844, 611, 46844, 305, 46844,
	93, 46844, 28084, 28084, 28084, 305, 46844, 2044, 46844, 2040,
	2125, 681, 46844, 1367, 18885, 1151, -1000, 23879, 789, 46844,
	1094, 82, -1000, -1000, -1000, 31, 46844, -1000, -1000, 150,
	150, 150, -1000, 137, 1405, -1000, -145, -145, -1000, -1000,
	-1000, 46844, 2438, 28084, -58, -1000, 807, 914, 910, -1000,
	55308, -1000, 654, 917, -1000, 2490, 511, 2439, -1000, 741,
	35558, 46844, 75, -1000, 753, 1596, -1000, 12730, 12730, -1000,
	1467, -1000, -1000, 1134, -1000, 1163, -1000, -1000, -1000, -1000,
	12730, -1000, -1000, -138, -138, -1000, -1000, 258, -1000, 46844,
	-1000, -1000, -1000, -1000, 1101, -1000, 18885, -1000, -1000, -1000,
	11516, -1000, -1000, -1000, 46844, -204, 18885, 4994, 4994, 18885,
	20085, 20085, -1000, 4994, -1000, -1000, -1000, -1000, -1000, 1882,
	510, 18885, 55308, 1423, 609, -59, 830, 18885, -14, -1000,
	18885, -1000, 52543, -1000, -1000, 653, 2114, -1000, 18885, 53747,
	7574, 360, 12330, -1000, 53493, -31, -31, -1000, 2504, 1575,
	1243, 1242, 1076, 2488, -1000, 25014, 768, 1367, 52289, 55074,
	55308, 18885, 18885, 18885, -1000, -1000, 2439, -1000, 18885, -1000,
	-1000, -1000, -1000, -1000, 1876, 18885, -1000, 55074, 55308, 20085,
	20085, 20085, 20085, 20085, 20085, 20085, 20085, 20085, 20085, 20085,
	20085, 20085, 20085, 20085, 20085, 20085, 20085, 20085, 1666, 20085,
	2454, 2454, 2454, -19, 18885, -1000, 1966, 1876, 18885, 18885,
	-1000, -1000, -1000, 55308, 359, 358, 356, -1000, 18885, -181,
	367, -1000, 1791, -1000, -162, -1000, 2158, -1000, -1000, 1791,
	1791, -66, 54387, -1000, 1681, -1000, 509, 18885, 22748, -1000,
	641, -1000, -67, -1000, 34816, -1000, 640, -229, -1000, 688,
	-1000, 695, 355, -1000, -1000, -1000, 269, 447, -1000, 34816,
	-1000, 9114, -1000, -1000, 896, 879, -1000, 2037, -1000, 1529,
	-1000, 793, -1000, 1309, 18885, 21617, 508, 507, 1271, -1000,
	2036, 1405, 2035, 1405, -1000, -1000, 707, -1000, 505, 504,
	-1000, -38, 1189, -1000, 24266, 18885, -1000, 877, -1000, -1000,
	-1000, 3158, 876, -1000, -1000, 1196, 24266, -1000, -1000, -1000,
	24266, 18885, -1000, -55, 875, 24266, 2019, 741, 1870, 999,
	-1000, -1000, -1000, -1000, -1000, -1000, 1726, 31064, 46844, 502,
	46844, 501, -1000, -1000, 500, 46844, 3158, -1000, 752, -1000,
	-1000, 800, 9114, 497, 9114, 1625, 681, 28455, -1000, 752,
	1685, 54387, -1000, 1094, 11115, 2234, -68, -1000, 248, -1000,
	-1000, -1000, 767, 24637, 22748, 18885, 2522, -74, -1000, -1000,
	-1000, -1000, -1000, -138, 1373, 2205, 2205, -1000, 2468, -1000,
	639, 353, 2439, 352, -1000, -64, 496, -1000, 685, 684,
	-138, 46844, -1000, 1382, 9114, 46844, 46844, 9114, 46844, -1000,
	-1000, -73, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1407,
	52233, -1000, 2289, 9114, 2412, 4994, 428, 408, 18885, 55308,
	54924, -81, 18885, 18885, -1000, 351, 18885, 638, 54387, -1000,
	-1000, -1000, 54387, 18885, 208, -1000, 2503, 18885, 348, 347,
	344, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 340,
	-1000, -1000, 49812, -1000, 18885, 339, -1000, 338, 336, 566,
	51979, 51941, 332, 54387, 1966, 54387, -1000, -1000, 704, 704,
	1048, 1048, 1048, 1048, 2454, 207, 468, 390, 3292, 3292,
	3292, 1396, 692, 692, 3292, 3292, 3292, 1868, 1638, 495,
	4129, 18885, 330, -1000, -1000, 54387, 54387, 329, -1000, -1000,
	-1000, -181, 327, 1787, 2370, -1000, 22748, 1787, 1787, -1000,
	-1000, 46844, 54387, -1000, -212, -1000, 2439, -1000, -1000, 1643,
	-1000, 6799, 34816, 695, 9114, -1000, -1000, 94, 46844, 46844,
	46844, 2028, -1000, 2957, -1000, 51687, -82, -1000, 2324, 2324,
	18885, 131, -1000, -1000, 494, 21617, 46844, -1000, 1654, 1688,
	832, 46844, -1000, 46844, -1000, -1000, 46844, 46844, 46844, 46844,
	46844, -1000, 493, -92, 46844, 46844, 28084, -1000, -1000, -93,
	9114, -1000, 2254, -1000, 28084, 861, 1255, 1741, -1000, 492,
	21617, 487, 46844, 31064, 2407, -1000, -1000, -1000, 486, 1832,
	1463, 21617, 1458, 1621, 681, 28455, -1000, 964, 1094, -1000,
	-1000, -88, -1000, 503, 305, 46844, 2521, 1367, -1000, -137,
	54387, -1000, 683, -1000, 2157, -1000, 2152, 636, -1000, -1000,
	323, -1000, 35187, 35187, 28084, 28084, -138, 1620, -1000, -1000,
	1275, 1504, -1000, -1000, -1000, -1000, 2289, 18885, 18885, 54924,
	-94, -1000, 4994, 4994, -1000, 51631, -1000, 54387, 7189, -1000,
	53493, -1000, -1000, -1000, -1000, 1276, -1000, 51377, -1000, -1000,
	-1000, 18885, -1000, -1000, -1000, -1000, 20085, 1866, 484, 55308,
	51339, -1000, -1000, -1000, 760, 18885, 18885, 2158, 760, 760,
	-100, 695, -1000, -1000, -1000, 2439, -1000, 34816, 94, 9114,
	-1000, -1000, -1000, 46844, -1000, 46844, -1000, 9114, 46844, 1804,
	1520, -1000, -1000, 1642, 483, 20085, 46844, 735, -1000, 1256,
	21617, 2289, 9114, 2289, 51085, 9501, -101, -102, 1516, -1000,
	1510, 18885, -1000, 55308, 1405, 1405, -103, -112, -1000, 873,
	867, 18885, 864, -1000, -1000, -1000, 863, -1000, 713, -145,
	24266, -1000, -1000, 1260, 21617, -114, 21617, -115, 321, 305,
	21617, -1000, 46844, -117, 46844, -1000, 681, 28455, -1000, 2125,
	-1000, 2133, 46844, 2215, -1000, -1000, -1000, 1685, 481, 478,
	474, -1000, -1000, -1000, -120, -1000, -1000, -146, -1000, 710,
	708, -1000, -1000, -1000, 9114, 983, -1000, 4994, 4994, -1000,
	-1000, -1000, -1000, 319, 1367, 2368, -1000, 51029, 5183, 20085,
	55308, -125, -1000, -1000, 46844, 54387, -181, -1000, -1000, -1000,
	34816, 631, -1000, -1000, 1714, -1000, -1000, -1000, 46844, 1526,
	-1000, -1000, 18885, 4129, 472, 18885, -1000, 1726, 470, -1000,
	-1000, -1000, -1000, -1000, -1000, 2324, -26, -1000, 1138, -1000,
	-1000, 54387, 2316, -1000, -1000, 467, 457, 46844, 46844, -31,
	456, 455, 24266, -1000, 46844, -126, 1256, -127, -1000, 1726,
	-1000, -128, 800, -1000, 452, 28455, -1000, 1625, 962, -135,
	46844, 1094, -1000, 28084, 28084, -1000, 1620, -1000, 46844, -1000,
	46844, -1000, 46844, -1000, 1121, 18885, -1000, 5183, -136, -1000,
	-153, -1000, 2406, -1000, -1000, -1000, -1000, 2024, 50775, 1585,
	46844, 50737, 1255, 46844, 2289, 318, 46844, 796, 9114, 1275,
	1275, -1000, -1000, 316, 18885, 18885, -1000, 451, -1000, 1726,
	1256, 1255, 1256, 449, 21617, -1000, 1621, 1040, -1000, 767,
	-1000, -1000, -143, -148, -1000, -150, -151, -1000, 312, 19685,
	19685, -181, -1000, 46844, 448, 1995, -1000, 1416, 1201, 301,
	823, -1000, -157, -1000, -1000, 447, -1000, 18885, -1000, -165,
	-1000, 787, -166, -1000, 785, 2503, -167, -172, 46844, 1255,
	1726, -1000, 1726, 21617, -174, -1000, 24637, -1000, 741, 741,
	-1000, -1000, -1000, -1000, -1000, 20470, 1481, 1089, 52891, -1000,
	-1000, -1000, 46844, -1000, 1442, 1420, 1087, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1585, 54387, -1000, 1275, 1738, -1000,
	1275, 1839, -1000, -1000, -175, -1000, 1255, 1255, -182, -1000,
	-189, -1000, -1000, 2431, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2138, -1000, 818, 1499, 1499, 1416, -1000, 444, -1000,
	443, 1344, -1000, -1000, 1256, -1000, 19285, -1000, 2441, -1000,
	-1000, 1639, -1000, -1000, 18885, 18885, -1000, -1000, -1000, 1726,
	-1000, -1000, -1000, -1000, -190, -193, 1255, 1255, 857, -1000,
	-1000, 442, 18885, -206, 1255, -1000,
}
var sqlPgo = [...]int{

	0, 3029, 3028, 1929, 3027, 2367, 3026, 3024, 3022, 3019,
	3016, 2362, 3015, 3013, 3003, 3001, 2997, 2995, 2994, 2993,
	2982, 2981, 2979, 2978, 2976, 2975, 2974, 2973, 2972, 2971,
	2970, 2969, 2343, 2961, 2328, 2958, 2957, 2954, 2952, 2946,
	2945, 2943, 29, 2942, 2941, 2939, 2935, 2283, 2933, 2932,
	2281, 2931, 2930, 2264, 2929, 2928, 2230, 2227, 2926, 2923,
	2222, 2919, 2917, 2212, 2912, 2208, 2910, 2909, 2204, 2904,
	106, 119, 2198, 2903, 2902, 2190, 2138, 2124, 2901, 2115,
	2887, 2886, 2089, 2062, 2885, 54, 2883, 2882, 2879, 2876,
	2045, 2040, 2875, 2872, 2867, 173, 2862, 2012, 2860, 2857,
	2855, 2854, 2851, 2849, 2848, 2841, 2837, 2835, 2830, 2827,
	2824, 2823, 2822, 2819, 2818, 2817, 2816, 2813, 2812, 2811,
	2810, 2807, 2804, 2803, 185, 115, 2798, 2791, 1915, 1900,
	2788, 2787, 47, 48, 15, 62, 158, 178, 3451, 176,
	2786, 2785, 2784, 2783, 2781, 2777, 30, 124, 126, 121,
	120, 2774, 84, 2773, 2768, 50, 46, 26, 19, 83,
	2767, 2765, 2759, 2096, 96, 2756, 2751, 174, 159, 2750,
	369, 37, 80, 112, 88, 109, 49, 2749, 103, 17,
	2747, 170, 20, 2744, 71, 33, 25, 3296, 77, 74,
	65, 175, 152, 148, 147, 122, 105, 2741, 177, 69,
	149, 2740, 2739, 2738, 52, 141, 3, 2, 151, 10,
	2733, 9, 2731, 11, 2730, 2729, 2727, 2725, 22, 113,
	97, 164, 2722, 23, 224, 138, 2721, 154, 2720, 76,
	180, 143, 1, 136, 2718, 75, 21, 72, 2717, 2716,
	93, 168, 2714, 36, 118, 86, 89, 189, 146, 91,
	155, 157, 2710, 2709, 2708, 150, 2702, 130, 131, 2701,
	2700, 114, 27, 2696, 31, 169, 34, 2695, 2694, 108,
	2693, 144, 2691, 2690, 183, 110, 129, 5, 79, 92,
	7, 161, 100, 61, 53, 2685, 2944, 1083, 306, 35,
	2682, 98, 56, 43, 70, 99, 172, 59, 2679, 2677,
	165, 2674, 2672, 2671, 2667, 2665, 117, 2663, 2658, 2656,
	90, 57, 85, 2652, 104, 45, 82, 153, 132, 182,
	125, 2648, 128, 95, 142, 2647, 111, 2646, 996, 2644,
	135, 2643, 2642, 2640, 2637, 38, 2636, 2634, 2632, 586,
	2622, 107, 2620, 134, 123, 137, 94, 116, 171, 166,
	140, 2619, 139, 32, 2617, 274, 28, 0, 3520, 3131,
	2604, 145, 87, 2603, 2595, 2592, 2590, 39, 13, 6,
	8, 14, 12, 133, 41, 167, 2589, 2587, 78, 101,
	2584, 184, 156, 2583, 2578, 2576, 42, 2575, 16, 2572,
	18, 2562, 2560, 24, 4, 2558, 2554, 179, 2553, 2552,
	2546, 2378, 2545, 181, 2543, 2541, 2539, 1947, 2536, 2535,
	68, 127,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 403, 403, 27, 13, 21,
	19, 19, 28, 17, 17, 24, 24, 148, 148, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 402, 402, 150, 150,
	149, 145, 145, 152, 152, 152, 154, 154, 151, 151,
	144, 144, 32, 32, 83, 83, 83, 135, 76, 76,
	76, 355, 355, 356, 356, 131, 131, 132, 132, 132,
	132, 133, 133, 134, 134, 134, 45, 34, 34, 34,
	34, 34, 35, 35, 36, 36, 43, 43, 125, 125,
	46, 46, 46, 46, 46, 46, 46, 46, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 56, 56, 57, 57, 58, 58, 58, 58, 58,
	58, 59, 59, 59, 59, 59, 59, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 66, 66, 66,
	67, 67, 67, 64, 64, 64, 62, 62, 62, 61,
	61, 61, 65, 65, 65, 63, 63, 63, 231, 231,
	68, 68, 68, 68, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 325, 325,
	69, 69, 298, 298, 72, 72, 256, 256, 73, 73,
	73, 73, 73, 74, 74, 74, 74, 84, 84, 84,
	84, 401, 401, 225, 225, 167, 167, 167, 167, 79,
	79, 79, 79, 80, 80, 80, 81, 81, 130, 130,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	37, 37, 37, 38, 38, 39, 39, 40, 40, 41,
	41, 42, 42, 42, 42, 42, 91, 91, 91, 93,
	90, 90, 90, 92, 92, 92, 92, 94, 94, 95,
	95, 95, 95, 95, 95, 96, 96, 349, 349, 234,
	234, 347, 347, 348, 348, 202, 202, 202, 202, 202,
	203, 203, 203, 354, 354, 354, 354, 354, 354, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	115, 115, 115, 124, 124, 124, 124, 124, 124, 124,
	117, 117, 108, 108, 98, 98, 104, 104, 104, 104,
	104, 99, 99, 105, 105, 107, 107, 109, 109, 109,
	109, 109, 109, 100, 100, 100, 100, 111, 111, 111,
	111, 110, 110, 120, 120, 120, 120, 120, 120, 120,
	313, 313, 116, 116, 116, 116, 119, 119, 119, 119,
	114, 114, 114, 118, 118, 121, 121, 121, 121, 101,
	101, 102, 102, 103, 103, 122, 122, 113, 113, 123,
	123, 123, 123, 123, 123, 123, 112, 112, 112, 404,
	404, 106, 399, 399, 397, 397, 397, 397, 397, 397,
	397, 398, 398, 400, 400, 77, 77, 51, 51, 52,
	52, 204, 204, 205, 205, 279, 279, 279, 279, 206,
	206, 153, 153, 153, 209, 210, 210, 207, 207, 208,
	208, 208, 212, 212, 211, 214, 214, 213, 278, 365,
	365, 366, 366, 366, 366, 366, 366, 366, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 363, 363,
	363, 364, 361, 361, 362, 362, 362, 362, 405, 405,
	277, 277, 218, 218, 368, 368, 368, 368, 369, 369,
	369, 369, 369, 372, 371, 370, 370, 370, 370, 370,
	309, 309, 309, 55, 55, 55, 245, 245, 244, 244,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 127, 127, 53, 53, 53, 159, 159,
	50, 50, 50, 54, 54, 49, 49, 49, 49, 49,
	262, 262, 260, 260, 223, 223, 315, 315, 315, 171,
	171, 146, 146, 146, 20, 22, 22, 16, 16, 16,
	16, 16, 16, 29, 29, 30, 30, 26, 26, 261,
	261, 263, 263, 78, 78, 82, 82, 88, 88, 126,
	126, 126, 126, 126, 126, 126, 33, 33, 33, 33,
	44, 44, 44, 44, 86, 408, 408, 408, 87, 87,
	407, 407, 166, 166, 166, 166, 168, 168, 274, 274,
	275, 275, 409, 409, 276, 276, 276, 161, 160, 162,
	162, 48, 48, 48, 155, 155, 156, 156, 157, 157,
	158, 158, 410, 410, 75, 75, 75, 129, 129, 198,
	198, 271, 271, 271, 219, 219, 176, 176, 273, 273,
	272, 272, 272, 243, 243, 243, 128, 128, 228, 228,
	236, 236, 237, 237, 321, 321, 238, 85, 85, 138,
	138, 136, 136, 136, 136, 136, 136, 137, 137, 137,
	139, 139, 139, 139, 139, 139, 139, 142, 142, 142,
	142, 143, 143, 143, 141, 141, 379, 379, 379, 381,
	381, 382, 378, 378, 380, 380, 406, 406, 247, 247,
	247, 216, 217, 215, 215, 221, 221, 220, 222, 222,
	314, 314, 314, 241, 241, 241, 241, 266, 266, 264,
	264, 265, 265, 267, 267, 268, 268, 268, 269, 269,
	270, 270, 240, 240, 294, 294, 140, 140, 140, 227,
	227, 227, 229, 229, 284, 284, 284, 285, 285, 283,
	283, 283, 283, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 395, 395, 395, 396,
	396, 312, 312, 317, 317, 317, 317, 317, 317, 310,
	310, 311, 311, 322, 323, 323, 250, 250, 250, 250,
	248, 248, 249, 249, 318, 318, 318, 318, 242, 242,
	319, 319, 319, 280, 280, 326, 326, 326, 341, 341,
	226, 226, 226, 336, 336, 327, 327, 327, 327, 327,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 330, 330, 330, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 340, 340, 340, 340, 340, 331, 331,
	337, 338, 332, 333, 339, 339, 339, 339, 343, 343,
	334, 334, 334, 334, 334, 334, 334, 335, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 258, 258, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 288, 288, 288, 288, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 373,
	373, 373, 373, 373, 373, 373, 373, 376, 376, 377,
	377, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 383, 383, 384, 384, 386, 386, 387,
	387, 388, 389, 389, 389, 390, 391, 391, 385, 385,
	392, 392, 392, 393, 393, 394, 394, 394, 394, 394,
	300, 300, 301, 302, 308, 308, 308, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 169, 169, 169, 169, 169, 233, 233,
	232, 232, 297, 297, 295, 295, 299, 299, 251, 251,
	342, 342, 342, 342, 342, 342, 342, 252, 252, 252,
	259, 253, 253, 254, 254, 254, 254, 254, 291, 292,
	255, 255, 255, 293, 293, 303, 307, 307, 306, 305,
	305, 304, 304, 281, 281, 282, 282, 239, 239, 411,
	411, 235, 235, 320, 320, 320, 320, 200, 200, 230,
	230, 199, 199, 193, 193, 194, 194, 194, 194, 224,
	224, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 344, 344, 344, 345, 346, 296, 186, 185,
	173, 174, 184, 183, 182, 172, 175, 179, 180, 181,
	177, 178, 189, 188, 187, 324, 195, 195, 196, 196,
	196, 197, 197, 197, 197, 170, 170, 190, 190, 191,
	192, 192, 163, 163, 163, 164, 164, 165, 165, 353,
	353, 351, 351, 351, 352, 352, 352, 352, 350, 350,
	350, 350, 350, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 1, 1, 5, 7, 7,
	7, 10, 7, 4, 12, 4, 12, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 3,
	3, 3, 6, 4, 3, 1, 2, 1, 1, 3,
	1, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 2, 5, 6, 2, 1, 12, 12,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 7, 3, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 3,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 3, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 5, 6, 5,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 2, 3, 2, 3, 7,
	7, 8, 10, 7, 4, 5, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 2, 8, 11, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 4, 7, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 7, 3, 1, 0, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 6, 3, 13, 16, 9, 12, 4,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 7, 3, 4, 3,
	4, 3, 4, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	5, 2, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 414, -4, -32, -34, -45, -43,
	-46, -73, -57, -58, -59, -72, -68, -74, -75, -76,
	-77, -69, -83, -82, -84, -88, -37, -85, -78, -79,
	-89, -97, -126, -127, -128, -129, -5, -11, 25, 36,
	-35, -36, 50, 76, 64, -53, -50, -47, -56, 78,
	99, -380, 103, -60, -63, -65, 107, 114, 119, 142,
	151, 250, 257, 278, 280, 282, 291, -39, -38, 115,
	-136, -138, 276, -80, -81, -90, -91, -92, -93, -130,
	309, -98, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, 312, -33, -44,
	-87, -86, 356, -6, -7, -8, -9, -10, -12, -22,
	-48, -49, -51, -52, -54, -55, -379, -61, -62, -64,
	-66, -67, -139, -137, 411, 277, 365, 37, 321, 65,
	110, 286, 20, -14, -18, -15, -17, -19, -16, -23,
	-27, -25, -24, -26, -28, -29, -30, -31, -20, -21,
	-13, 382, 390, -142, -140, -141, -143, 298, 373, 334,
	415, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 2, 334, 376, 299, 366, 92, 163, 262, 248,
	-397, 2, 4, -359, -357, -194, -193, 334, 92, 30,
	38, 39, 40, 41, 43, 44, 47, 48, 54, 55,
	56, 59, 94, 96, 97, 113, 120, 121, 131, 132,
	133, 144, 146, 154, 155, 158, 168, 170, 171, 172,
	173, 174, 176, 185, 186, 196, 214, 225, 227, 240,
	244, 254, 256, 264, 288, 301, 302, 303, 304, 315,
	316, 326, 330, 346, 347, 348, 353, 354, 369, 373,
	374, 378, 385, 20, 21, 22, 23, 25, 35, 36,
	37, 42, 46, 49, 50, 51, 58, 63, 64, 65,
	66, 67, 72, 69, 70, 71, 74, 76, 77, 80,
	81, 82, 90, 91, 93, 95, 99, 101, 103, 106,
	107, 109, 114, 115, 118, 116, 340, 342, 117, 119,
	129, 130, 135, 137, 141, 143, 148, 149, 150, 151,
	152, 153, 164, 167, 169, 162, 178, 181, 182, 183,
	189, 190, 191, 194, 193, 198, 199, 202, 203, 206,
	208, 211, 212, 215, 213, 217, 218, 220, 219, 226,
	228, 229, 231, 232, 235, 236, 239, 242, 245, 246,
	247, 248, 249, 250, 251, 253, 255, 257, 259, 260,
	261, 262, 263, 265, 266, 268, 269, 270, 271, 272,
	276, 274, 275, 277, 278, 279, 280, 282, 284, 285,
	286, 287, 289, 310, 311, 323, 291, 292, 293, 294,
	295, 296, 297, 305, 299, 300, 306, 307, 309, 312,
	314, 317, 320, 321, 322, 324, 327, 329, 325, 319,
	332, 333, 335, 336, 337, 338, 339, 341, 343, 344,
	351, 352, 356, 357, 358, 359, 362, 363, 364, 365,
	367, 370, 371, 372, 377, 383, 384, 386, 387, 388,
	-192, -163, 404, -191, 414, 414, 2, 182, 261, -187,
	-190, -191, -192, -163, 4, -357, -359, 92, 233, 414,
	414, 414, 2, 334, 322, 299, 366, 284, 376, -260,
	178, 92, 361, -163, 257, 24, 2, 101, 167, 364,
	363, 24, 253, 300, 336, 338, 2, 414, 414, 2,
	376, 299, 334, 163, 92, 366, 284, -181, 2, -163,
	-71, 2, 411, -70, -5, -47, -56, -60, -72, -68,
	-11, -32, -34, -53, -50, -57, -63, -65, -76, -75,
	-77, -79, -83, -82, -85, -90, -91, -97, -128, -129,
	78, 25, 107, 309, 115, -401, -225, 2, 24, -167,
	-163, 78, 142, 298, 334, 2, 182, 2, -181, 2,
	-397, 2, 182, 2, -401, -225, 23, 2, -163, 2,
	295, 312, -168, 2, 291, -163, 414, 414, 414, 414,
	414, 414, 203, 58, 288, 306, -95, 352, -94, 346,
	293, -96, -349, 2, 215, -163, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	2, -124, 306, 322, 149, 36, 58, 24, 63, 93,
	143, 163, 164, 190, 73, 74, 260, 203, 183, -313,
	117, 307, 335, 294, 332, 352, 78, 367, 285, -404,
	116, 4, 92, 215, 308, 346, 67, 339, 340, 414,
	414, 414, -406, 2, 334, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, -137, -139, -138, 414,
	414, 414, 414, 414, -220, -221, 360, 175, 112, 238,
	-136, -138, 2, -379, -124, 306, 2, 58, 24, -347,
	2, -286, 233, -288, 402, 403, 397, 221, 389, -300,
	98, 210, 209, -290, -303, 113, 288, 411, -197, -289,
	417, 9, -376, -138, 31, -301, -302, 52, -195, -163,
	7, 8, 5, 6, -170, -328, -296, -335, 355, 122,
	224, -373, -374, -196, 4, -357, -351, -329, -338, -333,
	-334, -336, 42, 48, 47, 343, 214, 301, 302, 303,
	304, 316, 369, 158, 40, 231, 232, 169, 176, 61,
	84, 85, 83, 88, 89, 86, 308, 366, 53, 30,
	154, 225, 155, 59, -375, 106, 39, 41, 43, 44,
	54, 55, 94, 96, 97, 120, 121, 131, 132, 133,
	144, 168, 170, 171, 172, 173, 174, 185, 186, 196,
	227, 244, 254, 264, 315, 326, 330, 346, 347, 348,
	353, 354, 374, -358, -339, 79, 123, 140, 166, 156,
	179, 180, 184, 197, 200, 216, 223, 241, 243, 283,
	313, -407, 2, 352, 352, 2, -407, 2, -407, 2,
	-166, 2, 352, 349, -408, 352, 385, -381, 265, -382,
	-181, -381, 414, 414, 416, 414, -215, -216, -217, 2,
	24, 104, 411, 2, -316, 2, 409, -318, -170, 192,
	-375, -138, -317, 411, -187, 234, -196, 84, 85, 88,
	89, 4, -163, 61, 210, 209, -3, 2, -318, 154,
	-187, 2, -318, 154, 2, -188, 154, -318, -190, 2,
	-355, 154, -353, 9, -352, 5, 4, -357, -359, -358,
	2, -172, -163, 2, -199, 154, -187, -184, -350, 4,
	-357, -359, -358, -360, 24, 26, 27, 28, 29, 31,
	32, 33, 34, 45, 52, 53, 57, 60, 62, 73,
	78, 83, 84, 86, 85, 87, 88, 89, 98, 100,
	102, 104, 105, 108, 110, 112, 122, 124, 136, 138,
	139, 142, 145, 147, 157, 163, 165, 175, 177, 192,
	195, 201, 204, 205, 221, 222, 224, 230, 233, 234,
	237, 238, 252, 258, 267, 281, 298, 308, 318, 328,
	331, 334, 345, 349, 350, 355, 360, 361, 366, 368,
	375, 376, 379, 380, 381, 382, -185, -350, 349, 416,
	-230, -193, -194, -224, -163, 413, -286, 2, -286, 2,
	-218, 411, 413, 334, 62, 2, -187, 154, -177, 2,
	-163, -188, 154, 2, -190, -355, 154, 2, -355, 154,
	2, -189, 2, -187, 163, 163, -172, 154, 2, -163,
	24, 139, 2, 177, 2, 177, 2, -319, 2, -318,
	-231, 154, 2, -187, -231, 154, 2, -231, 154, 2,
	-200, 154, 2, -199, -172, 154, 2, -356, 154, 2,
	-355, -356, 154, 2, -256, 411, -325, 2, -324, -352,
	373, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 306, 233,
	349, 416, -187, -286, -298, 411, 139, -286, 233, 139,
	235, 2, 92, 334, 388, 24, -163, 2, 310, 2,
	411, -95, 56, 352, -275, 2, -276, -160, -161, -162,
	181, 259, 263, 388, -347, 349, 394, 139, -347, -234,
	413, -124, 2, 136, 2, 7, 2, -355, 2, 310,
	2, 260, 307, 58, 139, 2, 2, -399, 2, 233,
	139, 2, 139, 2, 139, 2, 139, 2, 139, 2,
	2, 260, 307, 2, 351, 191, 351, 2, 139, 2,
	139, 2, 5, 2, 181, 259, 323, 2, 334, 376,
	299, 2, 2, 139, 2, 139, 388, 2, -242, -318,
	-220, -221, -241, -264, -265, 201, 124, 230, -247, 24,
	104, -247, -247, 46, 412, 412, -124, 310, 2, 10,
	11, 60, 35, 402, 403, 404, 405, 134, 406, 407,
	400, 401, 399, 392, 393, 396, 187, 188, 75, 395,
	394, 68, 207, 290, 125, 126, 127, 128, 273, 159,
	160, 161, 13, 14, 15, 28, 237, 200, 389, 156,
	313, 397, 16, 17, 18, 179, 180, 223, 38, 157,
	-169, -201, -286, -286, -286, -286, -286, 243, -239, -281,
	409, -138, 411, 411, -138, -286, -232, 411, -346, 7,
	-138, -295, 409, -304, -286, 413, 411, 5, 411, 5,
	-383, 383, 136, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 256, -343, 377, -343, -343, -330, 411,
	-330, 411, 411, -331, 411, 411, 411, -330, 411, 411,
	411, 384, 384, 390, 411, 411, -274, -275, -274, 349,
	-168, 416, -381, -218, 411, -235, -320, -286, 404, -235,
	-235, 233, -232, -286, 79, -250, 184, 216, 140, 197,
	283, 166, -346, -71, -283, 417, 411, -170, -375, -138,
	-163, -312, 390, -312, -138, -317, 411, -316, 404, -187,
	411, 413, -148, 274, -147, 22, 25, 107, 371, 118,
	-208, 248, 113, 319, -403, 115, 292, 341, 342, 274,
	113, -244, -246, 32, 90, 218, 245, 49, 152, 209,
	210, 321, 113, 274, 382, 113, 115, 274, -150, 319,
	-403, 115, 292, 274, -149, -208, 113, 417, 115, 228,
	-355, -230, 416, 416, -350, 404, 139, -224, -350, -187,
	-195, -163, -196, 411, -218, 221, 233, -245, -244, 221,
	-159, -378, 382, 221, 221, -218, -174, 154, 2, -164,
	-163, -174, 154, -378, 221, -319, -198, -187, -198, 309,
	-181, 32, -152, 416, 51, 279, 113, -152, 113, -152,
	113, -152, 416, 113, -152, 113, 416, 113, 113, -232,
	412, 416, -397, -224, -167, 78, 411, 32, -297, -326,
	-327, -328, -337, -332, -335, 42, 48, 47, 343, 214,
	301, 302, 303, 304, 316, 369, 158, 40, 231, 232,
	169, 4, 41, -339, 176, 168, 170, 171, 172, 173,
	174, 315, 39, 264, 132, 133, 131, 106, 97, 96,
	227, 44, 43, 94, 346, 347, 348, 185, 186, 55,
	54, 374, 326, -356, -397, -224, 136, -172, 2, -187,
	2, 69, 70, 388, -349, -232, 32, -275, 2, -409,
	416, 199, -203, 206, 220, 148, 234, 386, -354, 5,
	4, -296, -309, 98, 203, -335, 8, 403, -344, 7,
	402, -348, -347, -348, 82, 413, -350, 334, -349, 24,
	311, 2, -187, -400, 136, -398, 284, -397, -187, -187,
	-187, -187, -187, 136, 2, 351, 2, 136, -163, -163,
	199, -187, 2, -189, 2, -188, 2, 334, 163, 334,
	-152, 416, -241, -265, -264, -267, -286, 24, -270, 130,
	217, -286, -288, -137, -137, -137, -222, -314, -286, 258,
	163, -349, -341, -326, -340, 269, 270, 268, 272, 271,
	-326, -186, -350, 346, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
	-286, -286, -286, -286, -286, -286, -286, -286, -286, 200,
	156, 313, 38, 157, -286, 349, -286, -286, -286, -286,
	213, 221, 224, 355, 122, 362, 104, 228, -411, 331,
	34, -293, -138, 411, -308, 29, 318, 24, -300, 288,
	411, -281, -286, -282, -233, -232, 412, 416, -233, -299,
	-295, -307, -306, 379, -350, 404, 412, -232, 375, 24,
	104, 404, 2, 7, -257, 387, 212, 95, 150, 211,
	-258, 297, -384, 129, 145, 411, 412, 2, 412, 2,
	412, 2, 412, 2, -286, -286, -286, -286, -286, -232,
	-346, -251, 2, -342, -232, 4, 387, 212, 95, 150,
	211, 297, -251, 2, 7, -232, 2, -232, 2, -252,
	2, -286, -232, -253, -287, -288, 402, 403, 397, 411,
	288, -254, 2, -286, -233, 346, 346, 346, -286, 45,
	195, 350, -255, -286, 139, -232, -168, -382, 32, -232,
	-227, 416, 139, 32, 4, -227, -227, 411, 412, 416,
	184, 184, -316, -250, 184, -248, 241, -248, -248, -395,
	411, 410, -312, -173, 409, 418, -350, -233, 2, 411,
	-312, -312, 413, -311, -310, 32, -181, 239, -311, 412,
	-187, -350, 416, 349, -261, 73, 62, -278, 154, 62,
	-361, -175, 73, -362, -163, 57, 361, 258, 138, -261,
	73, -261, 73, 73, 309, 46, -318, 35, -85, 71,
	139, 349, -318, -246, -326, 90, 209, 210, 46, -345,
	-344, 403, -345, 46, -345, -345, -345, 382, -188, -318,
	349, 249, -355, 71, 349, 416, 35, -85, 71, 139,
	349, -199, -173, 71, 334, -323, -322, 391, -193, -163,
	413, 324, 412, 413, 179, 179, -204, -205, -163, -279,
	-278, -363, -364, -361, 178, 163, 361, 123, 32, 113,
	-224, 113, 249, 113, 113, 32, 233, 221, 233, 221,
	-155, 337, 113, -280, 380, -271, -85, 411, 98, 32,
	-271, -236, -237, -321, -238, -175, 411, -181, -187, -231,
	-231, -231, -199, -200, -172, -355, -356, -356, 412, -71,
	-324, 349, 382, 368, -205, -70, 25, 78, 107, 412,
	416, -226, 31, 409, -257, 411, -343, 411, -134, -322,
	382, 139, -225, -323, -323, 136, 70, 394, 349, 412,
	352, -276, -202, 263, 317, 275, 305, 8, 7, 7,
	416, -350, -187, -224, -224, 306, -71, 136, -71, 413,
	-187, -199, -187, -318, -268, -344, 411, -269, 288, 289,
	416, -146, 33, 102, 189, -187, 388, -286, -286, 349,
	-411, 331, -293, -286, 213, 224, 355, 122, 362, 104,
	228, 139, 411, -287, -287, -232, -286, 411, -232, 410,
	420, 412, -286, 410, 410, 416, -305, -306, 108, -286,
	413, -221, 416, -220, -286, -232, -232, 412, 412, 349,
	349, 349, 349, 411, -389, 242, 411, 411, -286, 32,
	416, 416, 416, 416, 412, 412, 416, 412, 139, 412,
	412, 412, 412, 412, -259, 252, 412, 10, 11, 402,
	403, 404, 405, 134, 406, 407, 400, 401, 399, 392,
	393, 394, 68, 207, 290, 13, 14, 15, 179, 157,
	-287, -287, -287, -232, 411, 412, -291, -292, 139, 136,
	388, 388, 388, 32, -255, -255, -255, 412, 139, -232,
	411, 412, -280, -320, -229, 2, -316, -183, -350, -280,
	-280, -232, -286, -316, -316, -249, 368, 233, 184, -316,
	-310, 412, -396, -346, -312, -311, -346, -285, -284, 137,
	219, 412, -233, 2, -311, -311, -350, -181, -218, -312,
	412, 413, -147, -187, -175, -182, -163, 221, -278, 154,
	-154, 221, -326, -182, 411, 411, 189, 189, -175, -182,
	154, -175, 154, -182, -182, -402, 263, 229, 202, 262,
	222, -148, 274, -85, 388, 411, -189, 274, -195, -345,
	-345, -244, 274, -188, -355, 382, 388, -172, -149, -85,
	388, 411, -173, -150, 274, 388, -187, -131, 153, 228,
	404, -350, -125, 5, 224, -125, 412, 416, 163, -174,
	163, -180, -164, -85, -187, 139, -188, -355, -355, -355,
	-85, -187, 113, -187, 113, -156, 109, -410, 394, -172,
	-221, -286, -243, -273, 281, 233, -219, -176, -175, 373,
	-181, -243, -228, 416, 139, 394, 413, -219, -152, -152,
	-152, -152, -152, -224, 23, -355, 412, -326, 409, 410,
	7, 7, 411, -346, -134, -133, 236, -132, -163, 5,
	-224, 139, -40, 382, 262, 92, 334, 248, 163, -347,
	-347, -275, 359, 66, 263, -347, 306, -71, -163, -269,
	-286, -314, -187, 417, -286, -286, -287, -287, 139, 411,
	-286, -297, 28, 28, 412, -233, 416, -282, -286, 412,
	-295, 110, -286, 345, -350, 404, 412, 375, -221, -221,
	-221, 5, 212, 150, 211, -258, 211, -258, -258, 7,
	-390, -178, 411, -163, 380, -220, 412, -341, -326, -286,
	-286, -286, -346, -286, -291, -286, -341, -326, -287, -287,
	-287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
	-287, -287, -287, -287, -287, -287, -287, 104, 221, 228,
	-287, 416, -233, -292, -291, -286, -286, -326, 412, 412,
	412, -232, -70, -240, 145, -323, 416, -240, -240, 412,
	-249, 411, -286, -316, 410, 412, 416, -311, 410, 416,
	419, 394, -312, 412, 413, -218, -310, -350, 349, 349,
	113, 221, 370, -365, -362, -286, -223, -315, -175, -377,
	411, -163, -373, -374, -170, 411, 411, -145, 107, 309,
	-263, 113, -152, 113, -152, 386, 411, 411, 349, -261,
	73, -289, -170, -232, 349, 349, 249, -289, -289, -232,
	349, -289, 115, -134, 139, 333, -206, 162, -279, -164,
	411, -174, 411, 411, -218, -187, -245, -159, -262, 368,
	-173, 411, -173, -157, 194, -410, -353, -378, -266, -264,
	-243, -235, 222, 72, 412, 416, 413, -280, -237, -229,
	-286, 2, 412, 235, -135, 80, -135, 7, 410, 412,
	-346, 412, 416, 411, 394, 394, -224, 236, -184, -172,
	-187, -185, -199, 234, 412, -146, -173, 28, 28, -286,
	-297, 412, -286, -286, 412, -286, 410, -286, 413, 5,
	-286, 412, 412, 412, 412, -391, -163, -286, 412, 412,
	412, 416, 412, 412, 412, -292, 139, 104, 228, 411,
	-286, 412, 412, 412, -294, 147, 46, -316, -294, -294,
	-224, -283, -346, -284, -173, 409, -311, -312, -350, 413,
	-175, -182, -278, 113, -366, 73, -367, 60, 123, 78,
	221, 224, 361, 258, 57, 98, 267, 32, 412, 412,
	416, -171, 60, -171, -286, 411, -223, -224, 221, 98,
	221, 98, 91, 357, -175, -182, -224, -224, -187, -175,
	-182, 411, 412, -189, -188, -355, 412, -173, 71, -356,
	346, -207, -208, 157, 411, -223, 411, -224, -204, 32,
	411, 141, 233, -223, 233, -158, 193, -410, -353, -155,
	-243, -272, 411, 233, -85, -176, 2, -221, 394, 91,
	91, 410, 412, -132, -133, -355, -355, -41, -42, 163,
	73, 251, -210, -209, 248, 228, -146, -286, -286, 412,
	412, -350, 404, -221, -385, 248, 412, -286, -287, 139,
	411, -297, 412, -386, 381, -286, -232, -386, -386, 412,
	-312, -346, -311, -278, -182, -186, -179, -163, 123, 154,
	224, 189, 411, -287, -187, 411, 2, -277, -405, 77,
	329, -315, -146, -186, -146, 412, -232, 412, 412, 224,
	224, -286, -326, -152, -152, 412, 412, 349, 349, -232,
	349, 349, 388, -289, 246, -223, 412, -223, 412, 412,
	-85, -223, -187, 412, -187, -410, -353, -156, 105, -224,
	73, -266, -293, 411, 411, 412, 416, 24, 411, 24,
	411, -185, 334, 412, -221, 46, 412, -287, -297, 412,
	-387, -388, -178, -311, 410, -367, -179, 221, -286, -165,
	411, -286, -206, 411, -171, -221, 267, -151, 60, 411,
	411, -175, -182, -221, 411, 411, -289, -187, 412, -277,
	412, -206, 412, -262, 411, -353, -157, 363, 222, 412,
	-182, -243, -356, -356, -42, -224, -224, -187, -392, 262,
	289, -232, 412, 416, 32, 113, 412, -368, 208, -163,
	412, -207, -224, -146, 412, -187, -144, 368, -186, -212,
	-211, -209, -214, -213, -209, 412, -232, -232, 411, -206,
	-277, -207, -277, 411, -223, -158, 309, -280, 412, 412,
	412, 412, 412, -393, -394, 38, 358, 82, -286, -393,
	-388, -390, 123, -369, -372, -371, 233, 140, 247, 314,
	412, 328, 378, 412, -218, -286, 412, 416, 373, 412,
	416, 373, 412, 412, -224, -207, -206, -206, -223, 412,
	-236, -134, -134, -394, 255, 135, 288, 255, 135, -179,
	-371, 233, -372, 233, 363, 101, -368, -211, 157, -213,
	139, 412, -207, -207, 412, -280, 28, -370, 218, 279,
	51, 309, -370, -369, 411, 411, -153, 51, 279, -277,
	-394, 21, 224, 98, -232, -232, -206, 412, 412, -207,
	-207, 349, 411, -232, 412, -207,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	177, 179, 0, 0, 0, 190, 192, 194, 195, -2,
	0, 0, 0, 221, 222, 224, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 361, 0,
	827, -2, 0, 339, 341, 350, 352, 354, 356, 357,
	0, 419, 421, 423, 425, 427, 429, 431, 433, 435,
	436, 438, 440, 442, 444, 446, 448, 450, 452, 454,
	456, 458, 460, 462, 464, 466, 468, -2, 739, 741,
	743, 745, -2, 60, 62, 64, 66, 68, 70, 85,
	198, 200, 202, 204, 207, 209, 864, 227, 229, 231,
	233, 235, -2, 876, 0, 0, 0, -2, 0, -2,
	-2, -2, 757, 71, 72, 73, 74, 75, 76, 91,
	92, 93, 94, 95, 96, 78, 80, 81, 87, 88,
	90, 0, 0, 840, 842, 844, 846, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 44, 50, 52, 54,
	58, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, -2, -2, -2, -2, 0, 0, 1484, 1641,
	1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
	1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
	1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681,
	1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
	1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1375, 1429, 1378, 1373, 178, 180, 181, 0, 0, 643,
	1414, 1427, 1428, 1429, 1432, 1433, 1434, 1484, 0, 191,
	193, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 318, 1558, 320, 322, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 220, 223, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 317, 315, 1409,
	260, 261, 0, 300, 301, 302, 303, 304, 305, 307,
	264, 266, 268, 269, 271, 273, 275, 277, 279, 281,
	283, 285, 286, 288, 290, 291, 293, 295, 296, 298,
	703, 0, 0, 0, 0, 0, 332, 326, 331, 333,
	335, 336, 337, 338, 0, 160, 0, 576, 313, 311,
	0, 156, 0, 736, 0, 332, 1456, 330, 737, 738,
	0, 0, 733, 734, 1587, 767, 340, 342, 351, 353,
	355, 358, -2, -2, 1686, -2, 381, -2, 389, 1695,
	1589, 392, 0, 394, -2, 397, 420, 422, 424, 426,
	428, 430, 432, 434, 437, 439, 441, 443, 445, 447,
	449, 451, 453, 455, 457, 459, 461, 463, 465, 467,
	469, 470, 0, 0, 0, 0, 0, 474, 0, -2,
	-2, 0, 0, 0, 0, 0, -2, 0, -2, 0,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 473, 475, 476, 477, 0, 520, 559, 560, 740,
	742, 744, 0, 684, 866, 61, 63, 65, 67, 69,
	199, 201, 203, 205, 208, 210, -2, 838, 839, 228,
	230, 232, 234, 236, -2, 0, 870, 870, 870, 0,
	0, 839, 837, 0, 343, 0, 345, 0, 474, 348,
	349, 401, 402, 1074, 0, 0, 0, 0, 0, 0,
	1152, -2, -2, 1184, 1186, 1657, 1686, 0, 1188, 1189,
	0, 1191, 1193, 1194, 0, 1197, 1198, 1352, 1421, 1416,
	1381, 1382, 1383, 1384, 0, 0, 1387, 0, 1389, 1390,
	1391, 1254, 1208, -2, -2, -2, 1425, 990, 991, 992,
	993, 994, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1705,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 0, 1641,
	1665, 1679, 1666, 1653, 1226, 1490, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1658, 1659, -2, -2, -2,
	1663, -2, -2, -2, -2, -2, -2, -2, -2, 1677,
	-2, 1682, 1683, -2, -2, -2, 1694, -2, -2, -2,
	1698, 1699, -2, 1443, 1043, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1718, 1719, 1720, 1721, 1722,
	1723, 769, 747, 760, 769, 749, 750, 751, 752, 753,
	758, 759, 762, 0, 754, 755, 756, 856, 1564, 859,
	643, 857, 841, 843, 0, 845, 0, 0, 0, 850,
	873, 871, 0, 907, 854, 855, 865, 922, 0, 0,
	942, 942, 933, 0, 964, 0, 1426, 0, 0, 0,
	0, -2, 1429, 1705, 1716, 1717, 2, 77, 0, 1665,
	964, 79, 0, 1665, 82, 0, 1665, 0, -2, 86,
	0, 1665, 161, 162, 1439, 1440, 1444, 1445, 1446, 1447,
	89, 0, 1405, 97, 0, 1665, 1372, 0, 1402, 1448,
	1449, 1450, 1451, 1452, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 0, 1399, 0, 0,
	569, 1369, 1374, 570, 1379, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 206, 643, 1665, 0, 212,
	1410, 667, 1665, 665, 1413, -2, 1665, 687, 690, 1665,
	692, 643, 694, 1412, -2, 1436, 863, 1665, 783, 319,
	321, 0, 214, 0, 796, 0, 798, 0, 817, 970,
	145, 1665, 239, 258, 145, 1665, 242, 145, 1665, 245,
	145, 1665, 248, 1367, 145, 1665, 251, 252, 1665, 254,
	163, 255, 1665, 257, 314, 0, 0, -2, 308, 1415,
	-2, 306, 265, 267, 270, 272, 274, 276, 278, 280,
	282, 284, 287, 289, 292, 294, 297, 299, -2, 0,
	0, 0, 0, 575, 0, 0, 0, 735, 0, 0,
	0, 362, 0, 0, 0, 0, 766, 359, 0, 378,
	0, 380, 1652, -2, -2, 384, 770, 774, 775, 776,
	0, 0, 0, 0, 391, 0, 0, 0, 395, 398,
	0, 471, 472, 0, 481, 482, 483, 484, 485, 0,
	488, 509, 524, 0, 0, 492, 494, 574, 496, 0,
	0, 498, 0, 500, 0, 502, 0, 504, 0, 506,
	508, 510, 525, 512, 0, 0, 0, 523, 0, 529,
	0, 532, 533, 534, 0, 536, 537, 538, 0, 0,
	0, 546, 548, 0, 558, 0, 478, 479, 145, 968,
	-2, 0, 833, 885, 886, 0, 0, 0, 0, 868,
	869, 0, 0, 0, 829, 830, 344, 0, 347, 0,
	0, 0, 0, 1287, 1288, 1289, 1290, 1291, 1292, 1295,
	1296, 1293, 1294, 1297, 1298, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 0, 0, 1304, 0, 1306,
	0, 0, 0, 0, 0, 0, 1131, 1133, 1360, 0,
	0, 1303, 1079, 1080, 1081, 1116, 1117, 0, 1185, 1357,
	1356, 1187, 0, 1309, -2, 1310, 0, 0, 1190, 1396,
	1195, 1196, 1309, 0, 1351, 0, 0, 1386, 0, 1071,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1027, 1041, 1048, 1045, 1044, 1029, 0,
	1028, 0, 0, 1026, 0, 0, 0, 1030, 0, 1332,
	-2, 0, 0, 0, 0, 0, 746, -2, 748, 0,
	764, 0, 858, 0, 0, 911, 1361, 1365, 1366, 911,
	911, 0, 0, 1310, 0, 0, 0, 0, 961, 961,
	961, 959, 936, 0, 942, 0, -2, 0, 942, 942,
	0, 952, 0, 952, -2, 933, 0, 0, 965, 966,
	0, 0, 98, 730, 117, 0, 730, 730, 0, 0,
	135, 0, 0, 0, 0, 0, 113, 105, 106, 0,
	0, 83, 668, 0, 671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 115, 0, 138, 140, 0, 0, 0, 0,
	955, 568, 0, 0, 1430, 1377, 0, 0, 1430, 0,
	0, 1416, 1417, 582, 0, 0, 0, 663, 666, 0,
	685, 0, 862, 0, 0, 0, 0, 1665, 699, 1401,
	1435, 0, 1665, 785, 0, 974, 0, 799, 0, 0,
	971, 0, 237, 0, 143, 144, 0, 240, 0, 243,
	0, 246, 0, 0, 249, 0, 0, 0, 0, 0,
	865, 0, 0, 324, 334, 0, 0, 865, 0, 1312,
	982, 985, 986, 987, 1071, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1049, 1043, 1057, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1039, 0, 1014, 1014,
	1014, 1031, 1032, 1050, 1051, 1053, 1055, 983, 984, 1049,
	1049, 1046, 1047, 175, 0, 328, 0, 955, 364, 955,
	366, 0, 554, 0, 0, 0, 0, -2, 386, 0,
	772, 0, 777, 410, 411, 412, 779, 780, 390, 413,
	414, 415, 416, 417, 418, 0, 660, 0, 662, 1392,
	0, 387, 403, 388, 393, 0, 399, 0, 486, 487,
	489, 490, 491, 495, 0, 562, 1579, 572, 497, 499,
	501, 503, 505, 865, 514, 0, 516, 865, 527, 530,
	535, 539, 540, 541, 542, 543, 544, 0, 0, 0,
	683, 0, 836, 883, 884, 889, 893, 894, 897, 900,
	901, 891, 1074, 851, 852, 853, 877, 878, 713, 0,
	0, 346, 1075, 978, 979, 1033, 1034, 1035, 1036, 1037,
	1076, 1077, 1398, 0, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, -2, -2, -2, -2, -2, -2,
	-2, -2, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, -2, -2, -2, 1114, 1115, -2, 1305,
	1307, 0, 1360, 0, -2, 0, -2, -2, -2, -2,
	1128, 0, 1130, 1135, 1137, 1139, 0, 0, 0, 0,
	1359, 1149, 1343, 0, 0, 1284, 1285, 1286, 1134, 0,
	0, 1358, 1355, 0, 0, 1308, 1192, 0, 0, 0,
	1316, 1350, 1346, 0, 1418, 1424, 1199, 876, 0, 0,
	0, 0, 1206, 0, 1397, 1058, 1059, 1060, 1061, 1062,
	1063, 1072, 1264, 0, 0, 0, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 0, 1319, -2, -2, -2, -2, -2,
	-2, -2, 0, 1238, 0, 0, 1250, 0, 1252, 0,
	1240, 1310, 1329, 0, 0, 1155, 0, 0, 0, 0,
	1686, 0, 1243, 1310, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 1342, 763, 860, 0, 0,
	974, 0, 0, 0, 1364, 974, 974, 0, 906, 0,
	0, 0, 0, 0, 0, 956, 960, 957, 958, 0,
	0, 942, 952, 919, 0, 0, 1400, 0, 927, -2,
	952, 952, 0, 929, 951, 0, 643, 941, 931, -2,
	0, -2, 0, 0, 0, 0, 729, 119, 1665, 0,
	147, 0, 0, 633, 1406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 669, 670, 672, 678, 680, 0, 674,
	1395, 0, 675, 0, 677, 679, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 1371, 0, 0, 166, 954, 0, 1370, 1380,
	0, 176, 642, 0, 0, 0, 0, 581, -2, 583,
	585, 586, 587, 588, 1517, 1436, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	787, 793, 0, 876, 0, 815, 801, 0, 0, 0,
	815, 819, 820, 822, 823, 0, 0, 972, 259, 145,
	145, 145, 1368, 145, 145, 164, 253, 256, 316, 262,
	309, 0, 0, 0, 0, 310, 0, 0, 0, 312,
	0, 975, 977, 0, 988, 0, 1041, 0, 154, 175,
	0, 0, 0, 363, 368, 0, 555, 0, 0, 379,
	0, 771, 778, 0, 407, 0, 409, 661, 1394, 1393,
	0, 400, 480, 573, 571, 513, 517, 865, 519, 0,
	556, 557, 561, 969, 0, 895, 0, 892, 898, 899,
	0, 880, 711, 712, 0, 0, 0, -2, -2, 0,
	0, 0, 1150, -2, 1129, 1132, 1136, 1138, 1140, 0,
	0, 0, 0, 0, 0, 0, 1151, 1309, 0, 1353,
	1356, -2, 1311, 1314, 1315, 0, 0, 1347, 0, 0,
	0, 0, 0, 875, 876, 876, 876, 1205, 0, 0,
	0, 0, 0, 0, 1207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1225, 1012, 0, 1235, 0, 1237,
	1038, 1249, 1251, 1239, 0, 0, 1241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1158, 1159, 1160, 0, 1309, 1242, 1335, 1336, 0, 0,
	1052, 1054, 1056, 0, 0, 0, 0, 1248, 0, 1341,
	865, 908, 903, 1362, 955, 910, 912, 1363, 1403, 903,
	903, 0, 1311, 944, 0, 946, 0, 0, 0, 948,
	0, 937, 0, 939, 952, 924, 0, 0, 917, 0,
	916, 942, 0, 928, 930, 932, 1418, 643, 950, 0,
	967, 0, 118, 717, 0, 0, 1404, 0, 121, 1665,
	129, 0, 610, 0, 0, 0, 0, 0, 732, 130,
	1665, 145, 1665, 145, 131, 134, 0, 137, 0, 0,
	601, 99, 730, 102, 0, 0, 723, 0, 673, 676,
	682, 84, 0, 725, 715, 0, 0, 714, 139, 103,
	0, 0, 727, 101, 0, 0, 0, 175, 0, 0,
	1376, 1431, 186, 188, 189, 187, 590, 0, 1436, 0,
	1436, 0, 1408, 579, 643, 0, 667, 688, -2, 691,
	693, 701, 0, 0, 0, 789, 793, 0, 792, 863,
	888, 973, 794, 815, 0, 0, 0, 804, 806, 803,
	800, 797, 974, 0, 0, 0, 0, 0, 238, 241,
	244, 247, 250, 323, 0, 0, 0, 1313, 0, 980,
	0, 0, 0, 0, 155, 173, 1546, 171, 168, 170,
	327, 0, 365, 0, 0, 0, 0, 0, 0, 376,
	377, -2, 405, 406, 408, 404, 515, 518, 526, 0,
	0, 879, 713, 0, 1078, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1344, 0, 0, 0, 1355, -2,
	1317, 1345, 1349, 0, 1419, 1423, 1200, 0, 0, 0,
	0, 1388, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 0,
	1262, 1263, 1267, 1411, 0, 0, 1211, 0, 0, 0,
	0, 0, 0, 1318, 1328, 1330, 1156, 1157, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, -2, -2,
	-2, 1174, 1175, 1176, -2, -2, -2, 0, 0, 0,
	1331, 0, 0, 1333, 1334, 1338, 1339, 0, 1245, 1246,
	1247, 1340, 0, 905, 0, 909, 0, 905, 905, 872,
	945, 0, 963, 947, 922, 938, 0, 935, 920, 0,
	921, 0, 952, 942, 0, 949, 934, -2, 0, 0,
	0, 0, 146, 608, 632, 0, 0, 704, 710, 710,
	0, 1406, 1209, 1210, 0, 0, 0, 123, 0, 0,
	0, 0, 127, 0, 133, 136, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 109, 112, 0,
	0, 108, 0, 152, 0, 0, 598, 0, 584, 0,
	0, 0, 0, 582, 0, 211, 664, 686, 0, 0,
	0, 0, 0, 791, 793, 0, 784, 785, 815, 887,
	795, 813, 814, 812, 0, 0, 0, 876, 821, 818,
	824, 825, 0, 325, 0, 157, 0, 0, 981, 989,
	0, 1042, 0, 0, 0, 0, 329, 0, 549, 550,
	596, 0, 553, 890, 896, 881, 713, 0, 0, -2,
	0, 1143, -2, -2, 1280, 1311, 1354, 1348, 0, 1385,
	876, 1201, 1203, 1204, 1073, 1269, 1266, 0, 1253, 1220,
	1221, 0, 1223, 1224, 1013, 1327, 0, 0, 0, 0,
	1311, 1282, 1244, 861, 1258, 0, 0, 913, 1258, 1258,
	0, 942, 940, 918, 914, 0, 925, 952, 1419, 0,
	719, 721, 120, 0, 609, 0, 612, 0, 0, 0,
	0, 619, 620, 0, 0, 0, 0, 0, 634, 641,
	0, 713, 0, 713, 0, 0, 0, 0, 0, 142,
	0, 0, 731, 0, 145, 145, 0, 0, 718, 0,
	0, 0, 0, 724, 726, 716, 0, 728, 0, 165,
	0, 577, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 781, 793, 0, 786, 787,
	213, 0, 0, 0, 802, 805, 807, 888, 0, 0,
	0, 976, 1040, 172, 0, 167, 169, 367, 369, 0,
	0, 375, 551, 595, 0, 0, 882, -2, -2, 1144,
	1281, 1420, 1422, 0, 876, 0, 1255, 0, -2, 0,
	0, 0, 1283, 847, 0, 904, 902, 848, 849, 962,
	952, 0, 926, 122, 0, 613, 614, 1407, 616, 0,
	618, 621, 0, 623, 1438, 0, 627, 590, 0, 638,
	639, 705, 706, 709, 707, 710, 876, 636, 0, 124,
	125, 141, 149, 126, 132, 0, 0, 0, 0, 876,
	0, 0, 0, 953, 0, 0, 641, 0, 631, 590,
	580, 0, 701, 697, 0, 0, 788, 789, 0, 0,
	0, 815, 826, 0, 0, 174, 0, 371, 0, 373,
	0, 594, 0, 1202, 1272, 0, 1222, -2, 0, 1182,
	1257, 1259, 0, 923, 915, 611, 615, 0, 0, 647,
	0, 0, 598, 0, 713, 0, 0, 151, 0, 0,
	0, 720, 722, 0, 0, 0, 111, 0, 630, 590,
	641, 598, 641, 0, 0, 790, 791, 0, 809, 974,
	811, 816, 0, 0, 370, 0, 0, 552, 0, 0,
	0, 1268, 1183, 0, 0, 0, 622, 652, 0, 0,
	0, 635, 0, 708, 1200, 643, 128, 0, 148, 0,
	602, 0, 0, 605, 0, 0, 0, 0, 0, 598,
	590, 578, 590, 0, 0, 782, 0, 810, 175, 175,
	372, 374, 1265, 1270, 1273, -2, 1625, 1481, 0, 1271,
	1260, 1261, 0, 624, 648, 649, 0, 644, 645, 646,
	1437, 625, 626, 640, 647, 150, 599, 0, 0, 600,
	0, 0, 114, 116, 0, 628, 598, 598, 0, 698,
	974, 158, 159, 0, 1275, 1276, 1277, 1278, 1279, 617,
	650, 0, 651, 0, 0, 0, 652, 603, 0, 606,
	0, 593, 629, 695, 641, 808, 0, 653, 0, 656,
	657, 0, 654, 637, 0, 0, 589, 591, 592, 590,
	1274, 655, 658, 659, 0, 0, 598, 598, 0, 696,
	604, 0, 0, 0, 598, 607,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 400, 3, 406, 401, 3,
	411, 412, 404, 402, 416, 403, 413, 405, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 420, 415,
	392, 394, 393, 396, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 409, 3, 410, 407, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 418, 399, 419, 397,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 395,
	57735, 398, 57736, 408, 57737, 414, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1057
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1068
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1231
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1241
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1247
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1256
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1265
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1274
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1286
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1357
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1380
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = nil
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1486
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplemented(sqllex, "alter using")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.str = "CSV"
		}
	case 158:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1654
		{
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1698
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1702
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.str = ""
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "CREATE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			return helpWith(sqllex, "DROP")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "DELETE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "INSERT")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{ /* SKIP DOC */
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "GRANT")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "RESET")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "RESET")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "USE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{ /* SKIP DOC */
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "USE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			return unimplemented(sqllex, "set local")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			return unimplemented(sqllex, "set from current")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = tree.Low
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = tree.Normal
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = tree.High
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			return helpWith(sqllex, "SHOW")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2595
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.str = "client_encoding"
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.str = "timezone"
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2677
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2688
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = true
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = false
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2868
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2900
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2933
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2973
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3000
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3026
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.str = ""
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3574
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 628:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			return unimplemented(sqllex, "match full")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			return unimplemented(sqllex, "match partial")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplemented(sqllex, "match simple")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3804
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3812
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3831
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3835
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = nil
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3979
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = true
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = false
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = true
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = false
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4021
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4025
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = tree.Descending
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4076
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4078
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4122
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4198
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4229
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4233
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.str = ""
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.str = ""
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4294
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4358
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.str = ""
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.str = ""
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.str = ""
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4402
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			return helpWith(sqllex, "INSERT")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4516
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4520
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 816:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4570
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4594
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4693
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4728
		{
			return helpWith(sqllex, "SELECT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4729
		{
			return helpWith(sqllex, "VALUES")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4730
		{
			return helpWith(sqllex, "TABLE")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			return helpWith(sqllex, "SELECT")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4835
		{
			return helpWith(sqllex, "TABLE")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4874
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4881
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4885
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = true
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = false
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = false
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = true
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4915
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4986
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5042
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5101
		{
			return helpWith(sqllex, "VALUES")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5103
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5140
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5218
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5238
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5240
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5250
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = nil
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = true
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = false
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5395
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5396
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5470
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5484
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5541
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = nil
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5698
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5782
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5834
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5835
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = tree.Year
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = tree.Month
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = tree.Day
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = tree.Month
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = nil
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = tree.Second
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5938
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5973
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6201
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6263
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6267
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6429
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6437
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6478
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6492
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6497
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6501
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6505
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6513
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6528
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6529
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6535
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6539
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6542
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6553
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6560
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6569
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6570
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6574
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6576
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6580
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6586
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6590
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6594
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6604
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6608
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6612
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6616
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6620
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6624
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6628
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6632
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6639
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6642
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6647
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6649
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6652
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6654
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6657
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6659
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6662
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6664
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6667
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6669
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6672
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6674
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6678
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6681
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6682
		{
			return unimplemented(sqllex, "treat")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6684
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6688
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6692
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6696
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6700
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6703
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6705
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6708
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6713
		{
			return unimplemented(sqllex, "within group")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6714
		{
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6718
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6722
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6729
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6733
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6739
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6749
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6757
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6761
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6765
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6772
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6791
		{
			sqlVAL.str = ""
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6797
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6801
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6811
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6812
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6813
		{
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6816
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6817
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6823
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6824
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6825
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6826
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6827
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6838
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6842
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6848
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6854
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6860
		{
			sqlVAL.union.val = tree.Any
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6864
		{
			sqlVAL.union.val = tree.Some
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6868
		{
			sqlVAL.union.val = tree.All
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6873
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6874
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6875
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6876
		{
			sqlVAL.union.val = tree.Div
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6877
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6878
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6879
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6880
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6881
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6882
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6883
		{
			sqlVAL.union.val = tree.LT
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6884
		{
			sqlVAL.union.val = tree.GT
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6885
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6886
		{
			sqlVAL.union.val = tree.LE
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6887
		{
			sqlVAL.union.val = tree.GE
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6888
		{
			sqlVAL.union.val = tree.NE
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6892
		{
			sqlVAL.union.val = tree.Like
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6893
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6894
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6895
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6907
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6913
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6923
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6933
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6937
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6943
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6953
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6957
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6979
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6983
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6987
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6993
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7000
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7004
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7021
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7025
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7029
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7033
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7037
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7043
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7049
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7055
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7059
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7063
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7069
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7073
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7084
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7091
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7101
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7107
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7111
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7118
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7124
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7128
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7135
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7141
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7150
		{
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7151
		{
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7155
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7165
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7174
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7178
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7182
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7190
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7200
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7210
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7217
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7245
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7249
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7253
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7259
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7270
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7274
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7278
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7282
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7285
		{
			return unimplemented(sqllex, "func const")
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7287
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7291
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7294
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7296
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7300
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7304
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7311
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7315
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7324
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7335
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7345
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7441
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7448
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7452
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7456
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7470
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7474
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7478
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7491
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7509
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7519
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7523
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7537
		{
			sqlVAL.str = ""
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7543
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7547
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
