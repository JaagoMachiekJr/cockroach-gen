# LogicTest: default distsql

query TTTTT
EXPLAIN (METADATA,NOOPTIMIZE) SELECT 1 FROM (SELECT 2 AS s)
----
render              ·  ·  ("1")  "1"=CONST
 └── render         ·  ·  (s)    s=CONST
      └── emptyrow  ·  ·  ()     ·

# Propagation to data sources.
query TTTTT
EXPLAIN (METADATA) SELECT 1 FROM (SELECT 2 AS s)
----
render              ·  ·  ("1")         "1"=CONST
 └── render         ·  ·  (s[omitted])  ·
      └── emptyrow  ·  ·  ()            ·

# Propagation through CREATE TABLE.
query TTTTT
EXPLAIN (METADATA) CREATE TABLE t AS SELECT 1 FROM (SELECT 2 AS s)
----
create table             ·  ·  ()            ·
 └── render              ·  ·  ("1")         "1"=CONST
      └── render         ·  ·  (s[omitted])  ·
           └── emptyrow  ·  ·  ()            ·

# Propagation through LIMIT.
query TTTTT
EXPLAIN (METADATA) SELECT 1 FROM (SELECT 2 AS s) LIMIT 1
----
limit                    ·  ·  ("1")         "1"=CONST
 └── render              ·  ·  ("1")         "1"=CONST
      └── render         ·  ·  (s[omitted])  ·
           └── emptyrow  ·  ·  ()            ·

query TTTTT
EXPLAIN (METADATA) SELECT 1 FROM (SELECT 2 AS s LIMIT 1)
----
render                   ·  ·  ("1")         "1"=CONST
 └── limit               ·  ·  (s[omitted])  ·
      └── render         ·  ·  (s[omitted])  ·
           └── emptyrow  ·  ·  ()            ·

# Propagation through UNION.
query TTTTT
EXPLAIN (METADATA) SELECT 1 FROM (SELECT 1 AS s UNION SELECT 2 AS s)
----
render                   ·  ·  ("1")  "1"=CONST
 └── union               ·  ·  (s)    ·
      ├── render         ·  ·  (s)    s=CONST
      │    └── emptyrow  ·  ·  ()     ·
      └── render         ·  ·  (s)    s=CONST
           └── emptyrow  ·  ·  ()     ·

query TTTTT
EXPLAIN (METADATA) SELECT 1 FROM (SELECT 1 AS s UNION ALL SELECT 2 AS s)
----
render                   ·  ·  ("1")         "1"=CONST
 └── append              ·  ·  (s[omitted])  ·
      ├── render         ·  ·  (s[omitted])  ·
      │    └── emptyrow  ·  ·  ()            ·
      └── render         ·  ·  (s[omitted])  ·
           └── emptyrow  ·  ·  ()            ·

# Propagation through WITH ORDINALITY.
query TTTTT
EXPLAIN (METADATA) SELECT 1 FROM (SELECT 1 AS s) WITH ORDINALITY
----
render                   ·  ·  ("1")                       "1"=CONST
 └── ordinality          ·  ·  (s[omitted], "ordinality")  weak-key("ordinality")
      └── render         ·  ·  (s[omitted])                ·
           └── emptyrow  ·  ·  ()                          ·

# Propagation through sort, when the sorting column is in the results.
query TTTTT
EXPLAIN (METADATA) SELECT x FROM (SELECT 1 AS x, 2 AS y) ORDER BY x
----
render              ·  ·  (x)              x=CONST
 └── render         ·  ·  (x, y[omitted])  x=CONST
      └── emptyrow  ·  ·  ()               ·

# Propagation through sort, when the sorting column is not in the results.
query TTTTT
EXPLAIN (METADATA) SELECT x FROM (SELECT 1 AS x, 2 AS y, 3 AS z) ORDER BY y
----
nosort                   ·      ·   (x)                 x=CONST
 │                       order  +y  ·                   ·
 └── render              ·      ·   (x, y)              x=CONST; y=CONST
      └── render         ·      ·   (x, y, z[omitted])  x=CONST; y=CONST
           └── emptyrow  ·      ·   ()                  ·

# Propagation to sub-queries.
query TTTTT
EXPLAIN (METADATA) SELECT 1 = (SELECT 2 AS x FROM (SELECT 3 AS s)) AS y
----
root                               ·          ·                                     (y)           y=CONST
 ├── render                        ·          ·                                     (y)           y=CONST
 │    └── emptyrow                 ·          ·                                     ()            ·
 └── subquery                      ·          ·                                     (y)           y=CONST
      │                            id         @S1                                   ·             ·
      │                            sql        (SELECT 2 AS x FROM (SELECT 3 AS s))  ·             ·
      │                            exec mode  one row                               ·             ·
      └── limit                    ·          ·                                     (x)           x=CONST
           └── render              ·          ·                                     (x)           x=CONST
                └── render         ·          ·                                     (s[omitted])  ·
                     └── emptyrow  ·          ·                                     ()            ·

# Propagation through table scans.
statement ok
CREATE TABLE kv(k INT PRIMARY KEY, v INT)

query TTTTT
EXPLAIN (METADATA) SELECT 1 FROM kv
----
render     ·      ·           ("1")                     "1"=CONST
 └── scan  ·      ·           (k[omitted], v[omitted])  k!=NULL; key(k)
·          table  kv@primary  ·                         ·
·          spans  ALL         ·                         ·

# Propagation through DISTINCT.
query TTTTT
EXPLAIN (METADATA) SELECT DISTINCT v FROM kv
----
distinct        ·      ·           (v)              weak-key(v)
 └── render     ·      ·           (v)              ·
      └── scan  ·      ·           (k[omitted], v)  k!=NULL; key(k)
·               table  kv@primary  ·                ·
·               spans  ALL         ·                ·

# Propagation through INSERT.
query TTTTT
EXPLAIN (METADATA) INSERT INTO kv(k, v) SELECT 1, 2 FROM (SELECT 3 AS x, 4 AS y)
----
insert                   ·     ·         ()                        ·
 │                       into  kv(k, v)  ·                         ·
 └── render              ·     ·         ("1", "2")                "1"=CONST; "2"=CONST
      └── render         ·     ·         (x[omitted], y[omitted])  ·
           └── emptyrow  ·     ·         ()                        ·

# Propagation through DELETE.
query TTTTT
EXPLAIN (METADATA) DELETE FROM kv WHERE k = 3
----
delete          ·      ·           ()               ·
 │              from   kv          ·                ·
 └── render     ·      ·           (k)              k=CONST; key()
      └── scan  ·      ·           (k, v[omitted])  k=CONST; key()
·               table  kv@primary  ·                ·
·               spans  /3-/3/#     ·                ·

# Ensure that propagations through a render node removes the renders
# and properly propagates the remaining needed columns.
query TTTTT
EXPLAIN (VERBOSE) SELECT x FROM (SELECT 1 AS x, y FROM (SELECT 2 AS y))
----
render                   ·         ·     (x)              x=CONST
 │                       render 0  x     ·                ·
 └── render              ·         ·     (x, y[omitted])  x=CONST
      │                  render 0  1     ·                ·
      │                  render 1  NULL  ·                ·
      └── render         ·         ·     (y[omitted])     ·
           │             render 0  NULL  ·                ·
           └── emptyrow  ·         ·     ()               ·

query TTTTT
EXPLAIN (VERBOSE) SELECT 1 FROM (SELECT k+1 AS x, v-2 AS y FROM kv)
----
render     ·         ·           ("1")                     "1"=CONST
 │         render 0  1           ·                         ·
 └── scan  ·         ·           (k[omitted], v[omitted])  k!=NULL; key(k)
·          table     kv@primary  ·                         ·
·          spans     ALL         ·                         ·

statement ok
CREATE TABLE a ("name" string, age int);

query TTTTT
EXPLAIN (VERBOSE) SELECT count(*) FROM (SELECT "name", age FROM a);
----
group                ·            ·             (count)                                                 ·
 │                   aggregate 0  count_rows()  ·                                                       ·
 └── render          ·            ·             ()                                                      ·
      └── render     ·            ·             ("name"[omitted], age[omitted])                         ·
           │         render 0     NULL          ·                                                       ·
           │         render 1     NULL          ·                                                       ·
           └── scan  ·            ·             ("name"[omitted], age[omitted], rowid[hidden,omitted])  rowid!=NULL; key(rowid)
·                    table        a@primary     ·                                                       ·
·                    spans        ALL           ·                                                       ·

# Ensure that variables within filter conditions are omitted (not decoded) if
# the filter condition is replaced by an index search.

statement ok
CREATE TABLE ab (a INT, b INT, PRIMARY KEY (a, b));

query TTTTT
EXPLAIN (VERBOSE) SELECT count(*) FROM ab WHERE a=1
----
group           ·            ·             (count)                   ·
 │              aggregate 0  count_rows()  ·                         ·
 └── render     ·            ·             ()                        ·
      └── scan  ·            ·             (a[omitted], b[omitted])  a=CONST; b!=NULL; key(b)
·               table        ab@primary    ·                         ·
·               spans        /1-/2         ·                         ·
